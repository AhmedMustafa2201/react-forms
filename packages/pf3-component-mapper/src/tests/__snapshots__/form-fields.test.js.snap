// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormFields <Checkbox /> should render single checkbox variant 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Checkbox
      meta={Object {}}
      name="single-check-box"
    >
      <SingleCheckbox
        meta={Object {}}
        name="single-check-box"
      >
        <FormGroup
          hideLabel={true}
          meta={
            Object {
              "active": false,
              "data": Object {},
              "dirty": false,
              "dirtySinceLastSubmit": false,
              "error": undefined,
              "initial": undefined,
              "invalid": false,
              "length": undefined,
              "modified": false,
              "pristine": true,
              "submitError": undefined,
              "submitFailed": false,
              "submitSucceeded": false,
              "submitting": false,
              "touched": false,
              "valid": true,
              "validating": false,
              "visited": false,
            }
          }
        >
          <FormGroup
            bsClass="form-group"
            validationState={null}
          >
            <div
              className="form-group"
            >
              <Checkbox
                bsClass="checkbox"
                disabled={false}
                inline={false}
                name="single-check-box"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                title=""
                value=""
              >
                <div
                  className="checkbox"
                >
                  <label
                    title=""
                  >
                    <input
                      disabled={false}
                      name="single-check-box"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="checkbox"
                      value=""
                    />
                  </label>
                </div>
              </Checkbox>
            </div>
          </FormGroup>
        </FormGroup>
      </SingleCheckbox>
    </Checkbox>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Checkbox /> should render single checkbox variant with a helper text 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Checkbox
      helperText="Helper text"
      meta={Object {}}
      name="single-check-box"
    >
      <SingleCheckbox
        helperText="Helper text"
        meta={Object {}}
        name="single-check-box"
      >
        <FormGroup
          hideLabel={true}
          meta={
            Object {
              "active": false,
              "data": Object {},
              "dirty": false,
              "dirtySinceLastSubmit": false,
              "error": undefined,
              "initial": undefined,
              "invalid": false,
              "length": undefined,
              "modified": false,
              "pristine": true,
              "submitError": undefined,
              "submitFailed": false,
              "submitSucceeded": false,
              "submitting": false,
              "touched": false,
              "valid": true,
              "validating": false,
              "visited": false,
            }
          }
        >
          <FormGroup
            bsClass="form-group"
            validationState={null}
          >
            <div
              className="form-group"
            >
              <Checkbox
                bsClass="checkbox"
                disabled={false}
                inline={false}
                name="single-check-box"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                title=""
                value=""
              >
                <div
                  className="checkbox"
                >
                  <label
                    title=""
                  >
                    <input
                      disabled={false}
                      name="single-check-box"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="checkbox"
                      value=""
                    />
                    <FieldLevelHelp
                      buttonClass=""
                      content="Helper text"
                      placement="top"
                      rootClose={true}
                    >
                      <OverlayTrigger
                        defaultOverlayShown={false}
                        overlay={
                          <Popover
                            bsClass="popover"
                            id="popover"
                            placement="right"
                          >
                            Helper text
                          </Popover>
                        }
                        placement="top"
                        rootClose={true}
                        trigger={
                          Array [
                            "click",
                          ]
                        }
                      >
                        <Button
                          active={false}
                          block={false}
                          bsClass="btn"
                          bsStyle="link"
                          className="popover-pf-info"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <button
                            className="popover-pf-info btn btn-link"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            <Icon
                              name="info"
                              type="pf"
                            >
                              <PatternflyIcon
                                className=""
                                name="info"
                              >
                                <span
                                  aria-hidden="true"
                                  className="pficon pficon-info"
                                />
                              </PatternflyIcon>
                            </Icon>
                          </button>
                        </Button>
                      </OverlayTrigger>
                    </FieldLevelHelp>
                  </label>
                </div>
              </Checkbox>
            </div>
          </FormGroup>
        </FormGroup>
      </SingleCheckbox>
    </Checkbox>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Radio /> should render correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Radio
      name="radio"
      options={
        Array [
          Object {
            "label": "option 1",
            "value": 1,
          },
          Object {
            "label": "option 2",
            "value": 2,
          },
        ]
      }
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <RadioOption
              key="1"
              name="radio"
              option={
                Object {
                  "label": "option 1",
                  "value": 1,
                }
              }
            >
              <Radio
                bsClass="radio"
                checked={false}
                disabled={false}
                inline={false}
                key="radio-1"
                name="radio"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                title=""
                type="radio"
                value={1}
              >
                <div
                  className="radio"
                >
                  <label
                    title=""
                  >
                    <input
                      checked={false}
                      disabled={false}
                      name="radio"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="radio"
                      value={1}
                    />
                    option 1
                  </label>
                </div>
              </Radio>
            </RadioOption>
            <RadioOption
              key="2"
              name="radio"
              option={
                Object {
                  "label": "option 2",
                  "value": 2,
                }
              }
            >
              <Radio
                bsClass="radio"
                checked={false}
                disabled={false}
                inline={false}
                key="radio-2"
                name="radio"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                title=""
                type="radio"
                value={2}
              >
                <div
                  className="radio"
                >
                  <label
                    title=""
                  >
                    <input
                      checked={false}
                      disabled={false}
                      name="radio"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="radio"
                      value={2}
                    />
                    option 2
                  </label>
                </div>
              </Radio>
            </RadioOption>
          </div>
        </FormGroup>
      </FormGroup>
    </Radio>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Switch /> should render Switch correctly 1`] = `
<RenderWithProvider
  value={
    Object {
      "formOptions": Object {
        "handleSubmit": [MockFunction],
      },
    }
  }
>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      FieldProvider={[Function]}
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "value": "",
        }
      }
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": true,
            "dirtySinceLastSubmit": false,
            "error": Object {},
            "initial": undefined,
            "invalid": true,
            "length": undefined,
            "modified": false,
            "pristine": false,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": false,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <Switch
              FieldProvider={[Function]}
              checked={true}
              id="someIdKey"
              offText="OFF"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onText="ON"
              type="checkbox"
            >
              <div>
                <label
                  className="pf3-switch"
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "width": 80,
                    }
                  }
                  tabIndex={0}
                >
                  <input
                    FieldProvider={[Function]}
                    checked={true}
                    id="someIdKey"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf3-switch-slider checked"
                  >
                    <span
                      className="on-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "left": -46,
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                          "width": 46,
                        }
                      }
                    >
                      ON
                    </span>
                    <span
                      className="divider"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                        }
                      }
                    />
                    <span
                      className="off-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(80px)",
                          "left": 34,
                          "msTransform": "translateX(80px)",
                          "transform": "translateX(80px)",
                          "width": 46,
                        }
                      }
                    >
                      OFF
                    </span>
                  </span>
                </label>
              </div>
            </Switch>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Switch /> should render Switch with label correctly 1`] = `
<RenderWithProvider
  value={
    Object {
      "formOptions": Object {
        "handleSubmit": [MockFunction],
      },
    }
  }
>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      FieldProvider={[Function]}
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "value": "",
        }
      }
      label="Label"
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
    >
      <FormGroup
        label="Label"
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": true,
            "dirtySinceLastSubmit": false,
            "error": Object {},
            "initial": undefined,
            "invalid": true,
            "length": undefined,
            "modified": false,
            "pristine": false,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": false,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <ControlLabel
              bsClass="control-label"
              srOnly={false}
            >
              <label
                className="control-label"
              >
                Label
              </label>
            </ControlLabel>
            <Switch
              FieldProvider={[Function]}
              checked={true}
              id="someIdKey"
              offText="OFF"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onText="ON"
              type="checkbox"
            >
              <div>
                <label
                  className="pf3-switch"
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "width": 80,
                    }
                  }
                  tabIndex={0}
                >
                  <input
                    FieldProvider={[Function]}
                    checked={true}
                    id="someIdKey"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf3-switch-slider checked"
                  >
                    <span
                      className="on-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "left": -46,
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                          "width": 46,
                        }
                      }
                    >
                      ON
                    </span>
                    <span
                      className="divider"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                        }
                      }
                    />
                    <span
                      className="off-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(80px)",
                          "left": 34,
                          "msTransform": "translateX(80px)",
                          "transform": "translateX(80px)",
                          "width": 46,
                        }
                      }
                    >
                      OFF
                    </span>
                  </span>
                </label>
              </div>
            </Switch>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Switch /> should render Switch with onText (custom prop) correctly 1`] = `
<RenderWithProvider
  value={
    Object {
      "formOptions": Object {
        "handleSubmit": [MockFunction],
      },
    }
  }
>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      FieldProvider={[Function]}
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "value": "",
        }
      }
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
      onText="OnText"
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": true,
            "dirtySinceLastSubmit": false,
            "error": Object {},
            "initial": undefined,
            "invalid": true,
            "length": undefined,
            "modified": false,
            "pristine": false,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": false,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <Switch
              FieldProvider={[Function]}
              checked={true}
              id="someIdKey"
              offText="OFF"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onText="OnText"
              type="checkbox"
            >
              <div>
                <label
                  className="pf3-switch"
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "width": 80,
                    }
                  }
                  tabIndex={0}
                >
                  <input
                    FieldProvider={[Function]}
                    checked={true}
                    id="someIdKey"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf3-switch-slider checked"
                  >
                    <span
                      className="on-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "left": -46,
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                          "width": 46,
                        }
                      }
                    >
                      OnText
                    </span>
                    <span
                      className="divider"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                        }
                      }
                    />
                    <span
                      className="off-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(80px)",
                          "left": 34,
                          "msTransform": "translateX(80px)",
                          "transform": "translateX(80px)",
                          "width": 46,
                        }
                      }
                    >
                      OFF
                    </span>
                  </span>
                </label>
              </div>
            </Switch>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Switch /> should render Switch with placeholder correctly 1`] = `
<RenderWithProvider
  value={
    Object {
      "formOptions": Object {
        "handleSubmit": [MockFunction],
      },
    }
  }
>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      FieldProvider={[Function]}
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "value": "",
        }
      }
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
      placeholder="Placeholder"
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": true,
            "dirtySinceLastSubmit": false,
            "error": Object {},
            "initial": undefined,
            "invalid": true,
            "length": undefined,
            "modified": false,
            "pristine": false,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": false,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <Switch
              FieldProvider={[Function]}
              checked={true}
              id="someIdKey"
              offText="OFF"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onText="ON"
              type="checkbox"
            >
              <div>
                <label
                  className="pf3-switch"
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "width": 80,
                    }
                  }
                  tabIndex={0}
                >
                  <input
                    FieldProvider={[Function]}
                    checked={true}
                    id="someIdKey"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf3-switch-slider checked"
                  >
                    <span
                      className="on-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "left": -46,
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                          "width": 46,
                        }
                      }
                    >
                      ON
                    </span>
                    <span
                      className="divider"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                        }
                      }
                    />
                    <span
                      className="off-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(80px)",
                          "left": 34,
                          "msTransform": "translateX(80px)",
                          "transform": "translateX(80px)",
                          "width": 46,
                        }
                      }
                    >
                      OFF
                    </span>
                  </span>
                </label>
              </div>
            </Switch>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Switch /> should render disabled Switch correctly 1`] = `
<RenderWithProvider
  value={
    Object {
      "formOptions": Object {
        "handleSubmit": [MockFunction],
      },
    }
  }
>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      FieldProvider={[Function]}
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "value": "",
        }
      }
      isDisabled={true}
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": true,
            "dirtySinceLastSubmit": false,
            "error": Object {},
            "initial": undefined,
            "invalid": true,
            "length": undefined,
            "modified": false,
            "pristine": false,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": false,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <Switch
              FieldProvider={[Function]}
              checked={true}
              disabled={true}
              id="someIdKey"
              offText="OFF"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onText="ON"
              type="checkbox"
            >
              <div>
                <label
                  className="pf3-switch disabled"
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "width": 80,
                    }
                  }
                  tabIndex={-1}
                >
                  <input
                    FieldProvider={[Function]}
                    checked={true}
                    disabled={true}
                    id="someIdKey"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf3-switch-slider checked"
                  >
                    <span
                      className="on-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "left": -46,
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                          "width": 46,
                        }
                      }
                    >
                      ON
                    </span>
                    <span
                      className="divider"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                        }
                      }
                    />
                    <span
                      className="off-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(80px)",
                          "left": 34,
                          "msTransform": "translateX(80px)",
                          "transform": "translateX(80px)",
                          "width": 46,
                        }
                      }
                    >
                      OFF
                    </span>
                  </span>
                </label>
              </div>
            </Switch>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Switch /> should render mini Switch correctly 1`] = `
<RenderWithProvider
  value={
    Object {
      "formOptions": Object {
        "handleSubmit": [MockFunction],
      },
    }
  }
>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      FieldProvider={[Function]}
      bsSize="mini"
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "value": "",
        }
      }
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": true,
            "dirtySinceLastSubmit": false,
            "error": Object {},
            "initial": undefined,
            "invalid": true,
            "length": undefined,
            "modified": false,
            "pristine": false,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": false,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <Switch
              FieldProvider={[Function]}
              bsSize="mini"
              checked={true}
              id="someIdKey"
              offText="OFF"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onText="ON"
              type="checkbox"
            >
              <div>
                <label
                  className="pf3-switch mini"
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "width": 80,
                    }
                  }
                  tabIndex={0}
                >
                  <input
                    FieldProvider={[Function]}
                    checked={true}
                    id="someIdKey"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf3-switch-slider checked"
                  >
                    <span
                      className="on-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "left": -46,
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                          "width": 46,
                        }
                      }
                    >
                      ON
                    </span>
                    <span
                      className="divider"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                        }
                      }
                    />
                    <span
                      className="off-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(80px)",
                          "left": 34,
                          "msTransform": "translateX(80px)",
                          "transform": "translateX(80px)",
                          "width": 46,
                        }
                      }
                    >
                      OFF
                    </span>
                  </span>
                </label>
              </div>
            </Switch>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Switch /> should render readOnly Switch correctly 1`] = `
<RenderWithProvider
  value={
    Object {
      "formOptions": Object {
        "handleSubmit": [MockFunction],
      },
    }
  }
>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      FieldProvider={[Function]}
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "value": "",
        }
      }
      isReadOnly={true}
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": true,
            "dirtySinceLastSubmit": false,
            "error": Object {},
            "initial": undefined,
            "invalid": true,
            "length": undefined,
            "modified": false,
            "pristine": false,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": false,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <Switch
              FieldProvider={[Function]}
              checked={true}
              id="someIdKey"
              isReadOnly={true}
              offText="OFF"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onText="ON"
              type="checkbox"
            >
              <div>
                <label
                  className="pf3-switch disabled"
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "width": 80,
                    }
                  }
                  tabIndex={-1}
                >
                  <input
                    FieldProvider={[Function]}
                    checked={true}
                    disabled={true}
                    id="someIdKey"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf3-switch-slider checked"
                  >
                    <span
                      className="on-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "left": -46,
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                          "width": 46,
                        }
                      }
                    >
                      ON
                    </span>
                    <span
                      className="divider"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                        }
                      }
                    />
                    <span
                      className="off-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(80px)",
                          "left": 34,
                          "msTransform": "translateX(80px)",
                          "transform": "translateX(80px)",
                          "width": 46,
                        }
                      }
                    >
                      OFF
                    </span>
                  </span>
                </label>
              </div>
            </Switch>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Switch /> should render sm Switch correctly 1`] = `
<RenderWithProvider
  value={
    Object {
      "formOptions": Object {
        "handleSubmit": [MockFunction],
      },
    }
  }
>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      FieldProvider={[Function]}
      bsSize="mn"
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "value": "",
        }
      }
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": true,
            "dirtySinceLastSubmit": false,
            "error": Object {},
            "initial": undefined,
            "invalid": true,
            "length": undefined,
            "modified": false,
            "pristine": false,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": false,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <Switch
              FieldProvider={[Function]}
              bsSize="mn"
              checked={true}
              id="someIdKey"
              offText="OFF"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onText="ON"
              type="checkbox"
            >
              <div>
                <label
                  className="pf3-switch mini"
                  onKeyDown={[Function]}
                  style={
                    Object {
                      "width": 80,
                    }
                  }
                  tabIndex={0}
                >
                  <input
                    FieldProvider={[Function]}
                    checked={true}
                    id="someIdKey"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="checkbox"
                  />
                  <span
                    className="pf3-switch-slider checked"
                  >
                    <span
                      className="on-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "left": -46,
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                          "width": 46,
                        }
                      }
                    >
                      ON
                    </span>
                    <span
                      className="divider"
                      style={
                        Object {
                          "WebkitTransform": "translateX(46px)",
                          "msTransform": "translateX(46px)",
                          "transform": "translateX(46px)",
                        }
                      }
                    />
                    <span
                      className="off-text"
                      style={
                        Object {
                          "WebkitTransform": "translateX(80px)",
                          "left": 34,
                          "msTransform": "translateX(80px)",
                          "transform": "translateX(80px)",
                          "width": 46,
                        }
                      }
                    >
                      OFF
                    </span>
                  </span>
                </label>
              </div>
            </Switch>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <TextField /> should render correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <TextField
      name="text-field"
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <FormControl
              bsClass="form-control"
              componentClass="input"
              name="text-field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              value=""
            >
              <input
                className="form-control"
                name="text-field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                value=""
              />
            </FormControl>
          </div>
        </FormGroup>
      </FormGroup>
    </TextField>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <TextField /> should render correctly with placeholder 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <TextField
      name="text-field"
      placeholder="placeholder"
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <FormControl
              bsClass="form-control"
              componentClass="input"
              name="text-field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              placeholder="placeholder"
              value=""
            >
              <input
                className="form-control"
                name="text-field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                placeholder="placeholder"
                value=""
              />
            </FormControl>
          </div>
        </FormGroup>
      </FormGroup>
    </TextField>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Textarea /> should render correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Textarea
      input={
        Object {
          "name": "textarea-field",
        }
      }
      meta={Object {}}
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": true,
            "dirtySinceLastSubmit": false,
            "error": Object {},
            "initial": undefined,
            "invalid": true,
            "length": undefined,
            "modified": false,
            "pristine": false,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": false,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <FormControl
              bsClass="form-control"
              componentClass="textarea"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              value={Object {}}
            >
              <textarea
                className="form-control"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                value={Object {}}
              />
            </FormControl>
          </div>
        </FormGroup>
      </FormGroup>
    </Textarea>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields <Textarea /> should render correctly with placeholder 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Textarea
      input={
        Object {
          "name": "textarea-field",
        }
      }
      meta={Object {}}
      placeholder="placeholder"
    >
      <FormGroup
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": true,
            "dirtySinceLastSubmit": false,
            "error": Object {},
            "initial": undefined,
            "invalid": true,
            "length": undefined,
            "modified": false,
            "pristine": false,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": false,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          bsClass="form-group"
          validationState={null}
        >
          <div
            className="form-group"
          >
            <FormControl
              bsClass="form-control"
              componentClass="textarea"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              placeholder="placeholder"
              value={Object {}}
            >
              <textarea
                className="form-control"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                placeholder="placeholder"
                value={Object {}}
              />
            </FormControl>
          </div>
        </FormGroup>
      </FormGroup>
    </Textarea>
  </ReactFinalForm>
</RenderWithProvider>
`;
