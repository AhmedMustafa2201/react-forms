// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormFields <CheckboxGroup /> should render single checkbox variant 1`] = `
<CheckboxGroup
  FieldProvider={[Function]}
  input={
    Object {
      "name": "single-check-box",
    }
  }
  meta={Object {}}
>
  <FieldInterface
    FieldProvider={[Function]}
    componentType="checkbox"
    input={
      Object {
        "name": "single-check-box",
      }
    }
    meta={Object {}}
    name="single-check-box"
  >
    <FinalFormField
      FieldProvider={[Function]}
      componentType="checkbox"
      id="single-check-box"
      input={
        Object {
          "name": "single-check-box",
        }
      }
      meta={Object {}}
      name="single-check-box"
      noCheckboxLabel={true}
    >
      <FormGroup
        bsClass="form-group"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <Checkbox
            bsClass="checkbox"
            disabled={false}
            inline={false}
            name="single-check-box"
            title=""
          >
            <div
              className="checkbox"
            >
              <label
                title=""
              >
                <input
                  disabled={false}
                  name="single-check-box"
                  type="checkbox"
                />
              </label>
            </div>
          </Checkbox>
        </div>
      </FormGroup>
    </FinalFormField>
  </FieldInterface>
</CheckboxGroup>
`;

exports[`FormFields <CheckboxGroup /> should render single checkbox variant with a helper text 1`] = `
<CheckboxGroup
  FieldProvider={[Function]}
  helperText="Helper text"
  input={
    Object {
      "name": "single-check-box",
    }
  }
  meta={Object {}}
>
  <FieldInterface
    FieldProvider={[Function]}
    componentType="checkbox"
    helperText="Helper text"
    input={
      Object {
        "name": "single-check-box",
      }
    }
    meta={Object {}}
    name="single-check-box"
  >
    <FinalFormField
      FieldProvider={[Function]}
      componentType="checkbox"
      helperText="Helper text"
      id="single-check-box"
      input={
        Object {
          "name": "single-check-box",
        }
      }
      meta={Object {}}
      name="single-check-box"
      noCheckboxLabel={true}
    >
      <FormGroup
        bsClass="form-group"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <Checkbox
            bsClass="checkbox"
            disabled={false}
            inline={false}
            name="single-check-box"
            title=""
          >
            <div
              className="checkbox"
            >
              <label
                title=""
              >
                <input
                  disabled={false}
                  name="single-check-box"
                  type="checkbox"
                />
                <FieldLevelHelp
                  buttonClass=""
                  content="Helper text"
                  placement="top"
                  rootClose={true}
                >
                  <OverlayTrigger
                    defaultOverlayShown={false}
                    overlay={
                      <Popover
                        bsClass="popover"
                        id="popover"
                        placement="right"
                      >
                        Helper text
                      </Popover>
                    }
                    placement="top"
                    rootClose={true}
                    trigger={
                      Array [
                        "click",
                      ]
                    }
                  >
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="link"
                      className="popover-pf-info"
                      disabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="popover-pf-info btn btn-link"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <Icon
                          name="info"
                          type="pf"
                        >
                          <PatternflyIcon
                            className=""
                            name="info"
                          >
                            <span
                              aria-hidden="true"
                              className="pficon pficon-info"
                            />
                          </PatternflyIcon>
                        </Icon>
                      </button>
                    </Button>
                  </OverlayTrigger>
                </FieldLevelHelp>
              </label>
            </div>
          </Checkbox>
        </div>
      </FormGroup>
    </FinalFormField>
  </FieldInterface>
</CheckboxGroup>
`;

exports[`FormFields <Radio /> should render correctly 1`] = `
<Radio
  FieldProvider={[Function]}
  input={
    Object {
      "name": "radio",
    }
  }
  meta={Object {}}
  options={
    Array [
      Object {
        "label": "option 1",
        "value": 1,
      },
      Object {
        "label": "option 2",
        "value": 2,
      },
    ]
  }
>
  <FieldInterface
    FieldProvider={[Function]}
    componentType="radio"
    input={
      Object {
        "name": "radio",
      }
    }
    meta={Object {}}
    name="radio"
    options={
      Array [
        Object {
          "label": "option 1",
          "value": 1,
        },
        Object {
          "label": "option 2",
          "value": 2,
        },
      ]
    }
  >
    <FormGroup
      bsClass="form-group"
      validationState={null}
    >
      <div
        className="form-group"
      >
        <RadioGroup
          FieldProvider={[Function]}
          input={
            Object {
              "name": "radio",
            }
          }
          options={
            Array [
              Object {
                "label": "option 1",
                "value": 1,
              },
              Object {
                "label": "option 2",
                "value": 2,
              },
            ]
          }
        >
          <MockFieldProvider
            key="radio-1"
            name="radio"
            render={[Function]}
            type="radio"
            value={1}
          >
            <Radio
              bsClass="radio"
              disabled={false}
              inline={false}
              onChange={[Function]}
              title=""
            >
              <div
                className="radio"
              >
                <label
                  title=""
                >
                  <input
                    disabled={false}
                    onChange={[Function]}
                    type="radio"
                  />
                  option 1
                </label>
              </div>
            </Radio>
          </MockFieldProvider>
          <MockFieldProvider
            key="radio-2"
            name="radio"
            render={[Function]}
            type="radio"
            value={2}
          >
            <Radio
              bsClass="radio"
              disabled={false}
              inline={false}
              onChange={[Function]}
              title=""
            >
              <div
                className="radio"
              >
                <label
                  title=""
                >
                  <input
                    disabled={false}
                    onChange={[Function]}
                    type="radio"
                  />
                  option 2
                </label>
              </div>
            </Radio>
          </MockFieldProvider>
        </RadioGroup>
      </div>
    </FormGroup>
  </FieldInterface>
</Radio>
`;

exports[`FormFields <SwitchField /> should render Switch correctly 1`] = `
<SwitchField
  FieldProvider={[Function]}
  dataType="someDataType"
  id="someIdKey"
  input={
    Object {
      "name": "Name of the field",
      "value": "",
    }
  }
  meta={
    Object {
      "error": false,
      "touched": false,
    }
  }
>
  <MockFieldProvider
    dataType="someDataType"
    id="someIdKey"
    input={
      Object {
        "name": "Name of the field",
        "value": "",
      }
    }
    meta={
      Object {
        "error": false,
        "touched": false,
      }
    }
    render={[Function]}
  >
    <FieldInterface
      componentType="switch-field"
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "onChange": [MockFunction],
          "value": "",
        }
      }
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
      name="Name of the field"
    >
      <FormGroup
        bsClass="form-group"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <Switch
            checked=""
            id="someIdKey"
            name="Name of the field"
            offText="OFF"
            onChange={[Function]}
            onText="ON"
            value=""
          >
            <div>
              <label
                className="pf3-switch"
                style={
                  Object {
                    "width": 80,
                  }
                }
              >
                <input
                  checked=""
                  id="someIdKey"
                  name="Name of the field"
                  onChange={[Function]}
                  type="checkbox"
                  value=""
                />
                <span
                  className="pf3-switch-slider"
                >
                  <span
                    className="on-text"
                    style={
                      Object {
                        "left": -46,
                        "width": 46,
                      }
                    }
                  >
                    ON
                  </span>
                  <span
                    className="divider"
                    style={Object {}}
                  />
                  <span
                    className="off-text"
                    style={
                      Object {
                        "left": 34,
                        "width": 46,
                      }
                    }
                  >
                    OFF
                  </span>
                </span>
              </label>
            </div>
          </Switch>
        </div>
      </FormGroup>
    </FieldInterface>
  </MockFieldProvider>
</SwitchField>
`;

exports[`FormFields <SwitchField /> should render Switch with label correctly 1`] = `
<SwitchField
  FieldProvider={[Function]}
  dataType="someDataType"
  id="someIdKey"
  input={
    Object {
      "name": "Name of the field",
      "value": "",
    }
  }
  label="Label"
  meta={
    Object {
      "error": false,
      "touched": false,
    }
  }
>
  <MockFieldProvider
    dataType="someDataType"
    id="someIdKey"
    input={
      Object {
        "name": "Name of the field",
        "value": "",
      }
    }
    label="Label"
    meta={
      Object {
        "error": false,
        "touched": false,
      }
    }
    render={[Function]}
  >
    <FieldInterface
      componentType="switch-field"
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "onChange": [MockFunction],
          "value": "",
        }
      }
      label="Label"
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
      name="Name of the field"
    >
      <FormGroup
        bsClass="form-group"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <ControlLabel
            bsClass="control-label"
            srOnly={false}
          >
            <label
              className="control-label"
            >
              Label
            </label>
          </ControlLabel>
          <Switch
            checked=""
            id="someIdKey"
            name="Name of the field"
            offText="OFF"
            onChange={[Function]}
            onText="ON"
            value=""
          >
            <div>
              <label
                className="pf3-switch"
                style={
                  Object {
                    "width": 80,
                  }
                }
              >
                <input
                  checked=""
                  id="someIdKey"
                  name="Name of the field"
                  onChange={[Function]}
                  type="checkbox"
                  value=""
                />
                <span
                  className="pf3-switch-slider"
                >
                  <span
                    className="on-text"
                    style={
                      Object {
                        "left": -46,
                        "width": 46,
                      }
                    }
                  >
                    ON
                  </span>
                  <span
                    className="divider"
                    style={Object {}}
                  />
                  <span
                    className="off-text"
                    style={
                      Object {
                        "left": 34,
                        "width": 46,
                      }
                    }
                  >
                    OFF
                  </span>
                </span>
              </label>
            </div>
          </Switch>
        </div>
      </FormGroup>
    </FieldInterface>
  </MockFieldProvider>
</SwitchField>
`;

exports[`FormFields <SwitchField /> should render Switch with onText (custom prop) correctly 1`] = `
<SwitchField
  FieldProvider={[Function]}
  dataType="someDataType"
  id="someIdKey"
  input={
    Object {
      "name": "Name of the field",
      "value": "",
    }
  }
  meta={
    Object {
      "error": false,
      "touched": false,
    }
  }
  onText="OnText"
>
  <MockFieldProvider
    dataType="someDataType"
    id="someIdKey"
    input={
      Object {
        "name": "Name of the field",
        "value": "",
      }
    }
    meta={
      Object {
        "error": false,
        "touched": false,
      }
    }
    onText="OnText"
    render={[Function]}
  >
    <FieldInterface
      componentType="switch-field"
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "onChange": [MockFunction],
          "value": "",
        }
      }
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
      name="Name of the field"
      onText="OnText"
    >
      <FormGroup
        bsClass="form-group"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <Switch
            checked=""
            id="someIdKey"
            name="Name of the field"
            offText="OFF"
            onChange={[Function]}
            onText="OnText"
            value=""
          >
            <div>
              <label
                className="pf3-switch"
                style={
                  Object {
                    "width": 80,
                  }
                }
              >
                <input
                  checked=""
                  id="someIdKey"
                  name="Name of the field"
                  onChange={[Function]}
                  type="checkbox"
                  value=""
                />
                <span
                  className="pf3-switch-slider"
                >
                  <span
                    className="on-text"
                    style={
                      Object {
                        "left": -46,
                        "width": 46,
                      }
                    }
                  >
                    OnText
                  </span>
                  <span
                    className="divider"
                    style={Object {}}
                  />
                  <span
                    className="off-text"
                    style={
                      Object {
                        "left": 34,
                        "width": 46,
                      }
                    }
                  >
                    OFF
                  </span>
                </span>
              </label>
            </div>
          </Switch>
        </div>
      </FormGroup>
    </FieldInterface>
  </MockFieldProvider>
</SwitchField>
`;

exports[`FormFields <SwitchField /> should render Switch with placeholder correctly 1`] = `
<SwitchField
  FieldProvider={[Function]}
  dataType="someDataType"
  id="someIdKey"
  input={
    Object {
      "name": "Name of the field",
      "value": "",
    }
  }
  meta={
    Object {
      "error": false,
      "touched": false,
    }
  }
  placeholder="Placeholder"
>
  <MockFieldProvider
    dataType="someDataType"
    id="someIdKey"
    input={
      Object {
        "name": "Name of the field",
        "value": "",
      }
    }
    meta={
      Object {
        "error": false,
        "touched": false,
      }
    }
    placeholder="Placeholder"
    render={[Function]}
  >
    <FieldInterface
      componentType="switch-field"
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "onChange": [MockFunction],
          "value": "",
        }
      }
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
      name="Name of the field"
      placeholder="Placeholder"
    >
      <FormGroup
        bsClass="form-group"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <Switch
            checked=""
            id="someIdKey"
            name="Name of the field"
            offText="OFF"
            onChange={[Function]}
            onText="ON"
            value=""
          >
            <div>
              <label
                className="pf3-switch"
                style={
                  Object {
                    "width": 80,
                  }
                }
              >
                <input
                  checked=""
                  id="someIdKey"
                  name="Name of the field"
                  onChange={[Function]}
                  type="checkbox"
                  value=""
                />
                <span
                  className="pf3-switch-slider"
                >
                  <span
                    className="on-text"
                    style={
                      Object {
                        "left": -46,
                        "width": 46,
                      }
                    }
                  >
                    ON
                  </span>
                  <span
                    className="divider"
                    style={Object {}}
                  />
                  <span
                    className="off-text"
                    style={
                      Object {
                        "left": 34,
                        "width": 46,
                      }
                    }
                  >
                    OFF
                  </span>
                </span>
              </label>
            </div>
          </Switch>
        </div>
      </FormGroup>
    </FieldInterface>
  </MockFieldProvider>
</SwitchField>
`;

exports[`FormFields <SwitchField /> should render disabled Switch correctly 1`] = `
<SwitchField
  FieldProvider={[Function]}
  dataType="someDataType"
  id="someIdKey"
  input={
    Object {
      "name": "Name of the field",
      "value": "",
    }
  }
  isDisabled={true}
  meta={
    Object {
      "error": false,
      "touched": false,
    }
  }
>
  <MockFieldProvider
    dataType="someDataType"
    id="someIdKey"
    input={
      Object {
        "name": "Name of the field",
        "value": "",
      }
    }
    isDisabled={true}
    meta={
      Object {
        "error": false,
        "touched": false,
      }
    }
    render={[Function]}
  >
    <FieldInterface
      componentType="switch-field"
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "onChange": [MockFunction],
          "value": "",
        }
      }
      isDisabled={true}
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
      name="Name of the field"
    >
      <FormGroup
        bsClass="form-group"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <Switch
            checked=""
            disabled={true}
            id="someIdKey"
            name="Name of the field"
            offText="OFF"
            onChange={[Function]}
            onText="ON"
            value=""
          >
            <div>
              <label
                className="pf3-switch disabled"
                style={
                  Object {
                    "width": 80,
                  }
                }
              >
                <input
                  checked=""
                  disabled={true}
                  id="someIdKey"
                  name="Name of the field"
                  onChange={[Function]}
                  type="checkbox"
                  value=""
                />
                <span
                  className="pf3-switch-slider"
                >
                  <span
                    className="on-text"
                    style={
                      Object {
                        "left": -46,
                        "width": 46,
                      }
                    }
                  >
                    ON
                  </span>
                  <span
                    className="divider"
                    style={Object {}}
                  />
                  <span
                    className="off-text"
                    style={
                      Object {
                        "left": 34,
                        "width": 46,
                      }
                    }
                  >
                    OFF
                  </span>
                </span>
              </label>
            </div>
          </Switch>
        </div>
      </FormGroup>
    </FieldInterface>
  </MockFieldProvider>
</SwitchField>
`;

exports[`FormFields <SwitchField /> should render mini Switch correctly 1`] = `
<SwitchField
  FieldProvider={[Function]}
  bsSize="mini"
  dataType="someDataType"
  id="someIdKey"
  input={
    Object {
      "name": "Name of the field",
      "value": "",
    }
  }
  meta={
    Object {
      "error": false,
      "touched": false,
    }
  }
>
  <MockFieldProvider
    bsSize="mini"
    dataType="someDataType"
    id="someIdKey"
    input={
      Object {
        "name": "Name of the field",
        "value": "",
      }
    }
    meta={
      Object {
        "error": false,
        "touched": false,
      }
    }
    render={[Function]}
  >
    <FieldInterface
      bsSize="mini"
      componentType="switch-field"
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "onChange": [MockFunction],
          "value": "",
        }
      }
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
      name="Name of the field"
    >
      <FormGroup
        bsClass="form-group"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <Switch
            bsSize="mini"
            checked=""
            id="someIdKey"
            name="Name of the field"
            offText="OFF"
            onChange={[Function]}
            onText="ON"
            value=""
          >
            <div>
              <label
                className="pf3-switch mini"
                style={
                  Object {
                    "width": 80,
                  }
                }
              >
                <input
                  checked=""
                  id="someIdKey"
                  name="Name of the field"
                  onChange={[Function]}
                  type="checkbox"
                  value=""
                />
                <span
                  className="pf3-switch-slider"
                >
                  <span
                    className="on-text"
                    style={
                      Object {
                        "left": -46,
                        "width": 46,
                      }
                    }
                  >
                    ON
                  </span>
                  <span
                    className="divider"
                    style={Object {}}
                  />
                  <span
                    className="off-text"
                    style={
                      Object {
                        "left": 34,
                        "width": 46,
                      }
                    }
                  >
                    OFF
                  </span>
                </span>
              </label>
            </div>
          </Switch>
        </div>
      </FormGroup>
    </FieldInterface>
  </MockFieldProvider>
</SwitchField>
`;

exports[`FormFields <SwitchField /> should render readOnly Switch correctly 1`] = `
<SwitchField
  FieldProvider={[Function]}
  dataType="someDataType"
  id="someIdKey"
  input={
    Object {
      "name": "Name of the field",
      "value": "",
    }
  }
  isReadOnly={true}
  meta={
    Object {
      "error": false,
      "touched": false,
    }
  }
>
  <MockFieldProvider
    dataType="someDataType"
    id="someIdKey"
    input={
      Object {
        "name": "Name of the field",
        "value": "",
      }
    }
    isReadOnly={true}
    meta={
      Object {
        "error": false,
        "touched": false,
      }
    }
    render={[Function]}
  >
    <FieldInterface
      componentType="switch-field"
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "onChange": [MockFunction],
          "value": "",
        }
      }
      isReadOnly={true}
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
      name="Name of the field"
    >
      <FormGroup
        bsClass="form-group"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <Switch
            checked=""
            id="someIdKey"
            isReadOnly={true}
            name="Name of the field"
            offText="OFF"
            onChange={[Function]}
            onText="ON"
            value=""
          >
            <div>
              <label
                className="pf3-switch disabled"
                style={
                  Object {
                    "width": 80,
                  }
                }
              >
                <input
                  checked=""
                  disabled={true}
                  id="someIdKey"
                  name="Name of the field"
                  onChange={[Function]}
                  type="checkbox"
                  value=""
                />
                <span
                  className="pf3-switch-slider"
                >
                  <span
                    className="on-text"
                    style={
                      Object {
                        "left": -46,
                        "width": 46,
                      }
                    }
                  >
                    ON
                  </span>
                  <span
                    className="divider"
                    style={Object {}}
                  />
                  <span
                    className="off-text"
                    style={
                      Object {
                        "left": 34,
                        "width": 46,
                      }
                    }
                  >
                    OFF
                  </span>
                </span>
              </label>
            </div>
          </Switch>
        </div>
      </FormGroup>
    </FieldInterface>
  </MockFieldProvider>
</SwitchField>
`;

exports[`FormFields <SwitchField /> should render sm Switch correctly 1`] = `
<SwitchField
  FieldProvider={[Function]}
  bsSize="mn"
  dataType="someDataType"
  id="someIdKey"
  input={
    Object {
      "name": "Name of the field",
      "value": "",
    }
  }
  meta={
    Object {
      "error": false,
      "touched": false,
    }
  }
>
  <MockFieldProvider
    bsSize="mn"
    dataType="someDataType"
    id="someIdKey"
    input={
      Object {
        "name": "Name of the field",
        "value": "",
      }
    }
    meta={
      Object {
        "error": false,
        "touched": false,
      }
    }
    render={[Function]}
  >
    <FieldInterface
      bsSize="mn"
      componentType="switch-field"
      dataType="someDataType"
      id="someIdKey"
      input={
        Object {
          "name": "Name of the field",
          "onChange": [MockFunction],
          "value": "",
        }
      }
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
      name="Name of the field"
    >
      <FormGroup
        bsClass="form-group"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <Switch
            bsSize="mn"
            checked=""
            id="someIdKey"
            name="Name of the field"
            offText="OFF"
            onChange={[Function]}
            onText="ON"
            value=""
          >
            <div>
              <label
                className="pf3-switch mini"
                style={
                  Object {
                    "width": 80,
                  }
                }
              >
                <input
                  checked=""
                  id="someIdKey"
                  name="Name of the field"
                  onChange={[Function]}
                  type="checkbox"
                  value=""
                />
                <span
                  className="pf3-switch-slider"
                >
                  <span
                    className="on-text"
                    style={
                      Object {
                        "left": -46,
                        "width": 46,
                      }
                    }
                  >
                    ON
                  </span>
                  <span
                    className="divider"
                    style={Object {}}
                  />
                  <span
                    className="off-text"
                    style={
                      Object {
                        "left": 34,
                        "width": 46,
                      }
                    }
                  >
                    OFF
                  </span>
                </span>
              </label>
            </div>
          </Switch>
        </div>
      </FormGroup>
    </FieldInterface>
  </MockFieldProvider>
</SwitchField>
`;

exports[`FormFields <TextField /> should render correctly 1`] = `
<TextField
  input={
    Object {
      "name": "text-field",
    }
  }
  meta={Object {}}
>
  <FieldInterface
    componentType="text-field"
    input={
      Object {
        "name": "text-field",
      }
    }
    meta={Object {}}
    name="text-field"
  >
    <FormGroup
      bsClass="form-group"
      validationState={null}
    >
      <div
        className="form-group"
      >
        <FormControl
          bsClass="form-control"
          componentClass="input"
          id="text-field"
          name="text-field"
        >
          <input
            className="form-control"
            id="text-field"
            name="text-field"
          />
        </FormControl>
      </div>
    </FormGroup>
  </FieldInterface>
</TextField>
`;

exports[`FormFields <TextField /> should render correctly with placeholder 1`] = `
<TextField
  input={
    Object {
      "name": "text-field",
    }
  }
  meta={Object {}}
  placeholder="placeholder"
>
  <FieldInterface
    componentType="text-field"
    input={
      Object {
        "name": "text-field",
      }
    }
    meta={Object {}}
    name="text-field"
    placeholder="placeholder"
  >
    <FormGroup
      bsClass="form-group"
      validationState={null}
    >
      <div
        className="form-group"
      >
        <FormControl
          bsClass="form-control"
          componentClass="input"
          id="text-field"
          name="text-field"
          placeholder="placeholder"
        >
          <input
            className="form-control"
            id="text-field"
            name="text-field"
            placeholder="placeholder"
          />
        </FormControl>
      </div>
    </FormGroup>
  </FieldInterface>
</TextField>
`;

exports[`FormFields <TextareaField /> should render correctly 1`] = `
<TextareaField
  input={
    Object {
      "name": "textarea-field",
    }
  }
  meta={Object {}}
>
  <FieldInterface
    componentType="textarea-field"
    input={
      Object {
        "name": "textarea-field",
      }
    }
    meta={Object {}}
    name="textarea-field"
  >
    <FormGroup
      bsClass="form-group"
      validationState={null}
    >
      <div
        className="form-group"
      >
        <FormControl
          bsClass="form-control"
          componentClass="textarea"
          id="textarea-field"
          name="textarea-field"
        >
          <textarea
            className="form-control"
            id="textarea-field"
            name="textarea-field"
          />
        </FormControl>
      </div>
    </FormGroup>
  </FieldInterface>
</TextareaField>
`;

exports[`FormFields <TextareaField /> should render correctly with placeholder 1`] = `
<TextareaField
  input={
    Object {
      "name": "textarea-field",
    }
  }
  meta={Object {}}
  placeholder="placeholder"
>
  <FieldInterface
    componentType="textarea-field"
    input={
      Object {
        "name": "textarea-field",
      }
    }
    meta={Object {}}
    name="textarea-field"
    placeholder="placeholder"
  >
    <FormGroup
      bsClass="form-group"
      validationState={null}
    >
      <div
        className="form-group"
      >
        <FormControl
          bsClass="form-control"
          componentClass="textarea"
          id="textarea-field"
          name="textarea-field"
          placeholder="placeholder"
        >
          <textarea
            className="form-control"
            id="textarea-field"
            name="textarea-field"
            placeholder="placeholder"
          />
        </FormControl>
      </div>
    </FormGroup>
  </FieldInterface>
</TextareaField>
`;
