// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Wizard /> should render Wizard correctly 1`] = `
<FormRenderer
  FormTemplate={[Function]}
  clearOnUnmount={false}
  componentMapper={
    Object {
      "button": [Function],
      "checkbox": [Function],
      "date-picker": [Function],
      "input-addon-button-group": [Function],
      "input-addon-group": [Function],
      "plain-text": [Function],
      "radio": [Function],
      "select": [Function],
      "slider": [Function],
      "sub-form": [Function],
      "switch": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea": [Function],
      "time-picker": [Function],
      "wizard": [Function],
    }
  }
  initialValues={Object {}}
  onCancel={[Function]}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "wizard",
          "fields": Array [
            Object {
              "fields": Array [],
              "name": 1,
              "nextStep": "step-2",
              "title": "Step 1",
            },
            Object {
              "fields": Array [],
              "name": "step-2",
              "title": "Step 2",
            },
          ],
          "name": "Wizard",
        },
      ],
    }
  }
>
  <Component
    clearOnUnmount={false}
    initialValues={Object {}}
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <FormTemplate
      formFields={
        Array [
          <SingleField
            component="wizard"
            fields={
              Array [
                Object {
                  "fields": Array [],
                  "name": 1,
                  "nextStep": "step-2",
                  "title": "Step 1",
                },
                Object {
                  "fields": Array [],
                  "name": "step-2",
                  "title": "Step 2",
                },
              ]
            }
            name="Wizard"
          />,
        ]
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "wizard",
              "fields": Array [
                Object {
                  "fields": Array [],
                  "name": 1,
                  "nextStep": "step-2",
                  "title": "Step 1",
                },
                Object {
                  "fields": Array [],
                  "name": "step-2",
                  "title": "Step 2",
                },
              ],
              "name": "Wizard",
            },
          ],
        }
      }
    >
      <PF3FormTemplate
        formFields={
          Array [
            <SingleField
              component="wizard"
              fields={
                Array [
                  Object {
                    "fields": Array [],
                    "name": 1,
                    "nextStep": "step-2",
                    "title": "Step 1",
                  },
                  Object {
                    "fields": Array [],
                    "name": "step-2",
                    "title": "Step 2",
                  },
                ]
              }
              name="Wizard"
            />,
          ]
        }
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "wizard",
                "fields": Array [
                  Object {
                    "fields": Array [],
                    "name": 1,
                    "nextStep": "step-2",
                    "title": "Step 1",
                  },
                  Object {
                    "fields": Array [],
                    "name": "step-2",
                    "title": "Step 2",
                  },
                ],
                "name": "Wizard",
              },
            ],
          }
        }
        showFormControls={false}
      >
        <FormTemplate
          Button={[Function]}
          ButtonGroup={[Function]}
          Description={[Function]}
          FormWrapper={[Function]}
          Header={Symbol(react.fragment)}
          Title={[Function]}
          disableSubmit={Array []}
          formFields={
            Array [
              <SingleField
                component="wizard"
                fields={
                  Array [
                    Object {
                      "fields": Array [],
                      "name": 1,
                      "nextStep": "step-2",
                      "title": "Step 1",
                    },
                    Object {
                      "fields": Array [],
                      "name": "step-2",
                      "title": "Step 2",
                    },
                  ]
                }
                name="Wizard"
              />,
            ]
          }
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "wizard",
                  "fields": Array [
                    Object {
                      "fields": Array [],
                      "name": 1,
                      "nextStep": "step-2",
                      "title": "Step 1",
                    },
                    Object {
                      "fields": Array [],
                      "name": "step-2",
                      "title": "Step 2",
                    },
                  ],
                  "name": "Wizard",
                },
              ],
            }
          }
          showFormControls={false}
        >
          <FormWrapper
            onSubmit={[Function]}
          >
            <Form
              bsClass="form"
              className="ddorg__pf3-layout-components__form-wrapper"
              componentClass="form"
              horizontal={false}
              inline={false}
              onSubmit={[Function]}
            >
              <form
                className="ddorg__pf3-layout-components__form-wrapper"
                onSubmit={[Function]}
              >
                <SingleField
                  component="wizard"
                  fields={
                    Array [
                      Object {
                        "fields": Array [],
                        "name": 1,
                        "nextStep": "step-2",
                        "title": "Step 1",
                      },
                      Object {
                        "fields": Array [],
                        "name": "step-2",
                        "title": "Step 2",
                      },
                    ]
                  }
                  key="Wizard"
                  name="Wizard"
                >
                  <FormConditionWrapper
                    field={
                      Object {
                        "component": "wizard",
                        "fields": Array [
                          Object {
                            "fields": Array [],
                            "name": 1,
                            "nextStep": "step-2",
                            "title": "Step 1",
                          },
                          Object {
                            "fields": Array [],
                            "name": "step-2",
                            "title": "Step 2",
                          },
                        ],
                        "name": "Wizard",
                      }
                    }
                  >
                    <FormFieldHideWrapper
                      hideField={false}
                    >
                      <WizardFinal
                        component="wizard"
                        fields={
                          Array [
                            Object {
                              "fields": Array [],
                              "name": 1,
                              "nextStep": "step-2",
                              "title": "Step 1",
                            },
                            Object {
                              "fields": Array [],
                              "name": "step-2",
                              "title": "Step 2",
                            },
                          ]
                        }
                        name="Wizard"
                      >
                        <Wizard
                          Wizard={[Function]}
                          component="wizard"
                          fields={
                            Array [
                              Object {
                                "fields": Array [],
                                "name": 1,
                                "nextStep": "step-2",
                                "title": "Step 1",
                              },
                              Object {
                                "fields": Array [],
                                "name": "step-2",
                                "title": "Step 2",
                              },
                            ]
                          }
                          name="Wizard"
                        >
                          <WizardInternal
                            name="Wizard"
                          >
                            <div
                              onKeyDown={[Function]}
                            >
                              <WizardStep
                                buttonLabels={
                                  Object {
                                    "back": "Back",
                                    "cancel": "Cancel",
                                    "next": "Next",
                                    "submit": "Submit",
                                  }
                                }
                                disableBack={true}
                                fields={Array []}
                                formOptions={
                                  Object {
                                    "active": undefined,
                                    "afterSilentRegistration": [Function],
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "destroyOnUnregister": undefined,
                                    "dirty": false,
                                    "dirtyFields": Object {},
                                    "dirtyFieldsSinceLastSubmit": Object {},
                                    "dirtySinceLastSubmit": false,
                                    "error": undefined,
                                    "errors": Object {},
                                    "fieldListeners": Object {
                                      "1607416663369": Object {
                                        "count": 1,
                                        "fields": Object {
                                          "1607416663369": Object {
                                            "afterSubmit": undefined,
                                            "beforeSubmit": undefined,
                                            "isEqual": undefined,
                                            "render": [Function],
                                            "subscription": Object {
                                              "pristine": true,
                                              "submitting": true,
                                              "valid": true,
                                            },
                                            "validate": undefined,
                                          },
                                        },
                                        "validateFields": undefined,
                                      },
                                    },
                                    "fileInputs": Array [],
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getFieldValue": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "handleSubmit": [Function],
                                    "hasSubmitErrors": false,
                                    "hasValidationErrors": false,
                                    "initialValues": Object {},
                                    "initialize": [Function],
                                    "invalid": false,
                                    "isValidationPaused": [Function],
                                    "modified": Object {},
                                    "modifiedSinceLastSubmit": false,
                                    "onCancel": [Function],
                                    "onReset": [Function],
                                    "onSubmit": [MockFunction],
                                    "pauseValidation": [Function],
                                    "pristine": true,
                                    "registerAsyncValidator": [Function],
                                    "registerField": [Function],
                                    "registerInputFile": [Function],
                                    "registeredFields": Array [],
                                    "renderForm": [Function],
                                    "rerender": [Function],
                                    "reset": [Function],
                                    "resetFieldState": [Function],
                                    "restart": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "setFieldState": [Function],
                                    "submit": [Function],
                                    "submitError": undefined,
                                    "submitErrors": undefined,
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "subscribe": [Function],
                                    "touched": Object {},
                                    "unregisterField": [Function],
                                    "unregisterInputFile": [Function],
                                    "unsubscribe": [Function],
                                    "updateError": [Function],
                                    "updateValid": [Function],
                                    "valid": true,
                                    "validating": false,
                                    "values": Object {},
                                    "visited": Object {},
                                  }
                                }
                                handleNext={[Function]}
                                handlePrev={[Function]}
                                name={1}
                                nextStep="step-2"
                                title="Step 1"
                              >
                                <WizardBody
                                  className=""
                                >
                                  <ModalBody
                                    bsClass="modal-body"
                                    className="wizard-pf-body clearfix"
                                    componentClass="div"
                                  >
                                    <div
                                      className="wizard-pf-body clearfix modal-body"
                                    >
                                      <WizardRow
                                        className=""
                                      >
                                        <section
                                          className="wizard-pf-row"
                                        >
                                          <WizardMain
                                            className=""
                                          >
                                            <div
                                              className="wizard-pf-main"
                                            >
                                              <div
                                                className="form-horizontal"
                                              />
                                            </div>
                                          </WizardMain>
                                        </section>
                                      </WizardRow>
                                    </div>
                                  </ModalBody>
                                </WizardBody>
                                <WizardStepButtons
                                  buttonLabels={
                                    Object {
                                      "back": "Back",
                                      "cancel": "Cancel",
                                      "next": "Next",
                                      "submit": "Submit",
                                    }
                                  }
                                  disableBack={true}
                                  formOptions={
                                    Object {
                                      "active": undefined,
                                      "afterSilentRegistration": [Function],
                                      "batch": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "destroyOnUnregister": undefined,
                                      "dirty": false,
                                      "dirtyFields": Object {},
                                      "dirtyFieldsSinceLastSubmit": Object {},
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "errors": Object {},
                                      "fieldListeners": Object {
                                        "1607416663369": Object {
                                          "count": 1,
                                          "fields": Object {
                                            "1607416663369": Object {
                                              "afterSubmit": undefined,
                                              "beforeSubmit": undefined,
                                              "isEqual": undefined,
                                              "render": [Function],
                                              "subscription": Object {
                                                "pristine": true,
                                                "submitting": true,
                                                "valid": true,
                                              },
                                              "validate": undefined,
                                            },
                                          },
                                          "validateFields": undefined,
                                        },
                                      },
                                      "fileInputs": Array [],
                                      "focus": [Function],
                                      "getFieldState": [Function],
                                      "getFieldValue": [Function],
                                      "getRegisteredFields": [Function],
                                      "getState": [Function],
                                      "handleSubmit": [Function],
                                      "hasSubmitErrors": false,
                                      "hasValidationErrors": false,
                                      "initialValues": Object {},
                                      "initialize": [Function],
                                      "invalid": false,
                                      "isValidationPaused": [Function],
                                      "modified": Object {},
                                      "modifiedSinceLastSubmit": false,
                                      "onCancel": [Function],
                                      "onReset": [Function],
                                      "onSubmit": [MockFunction],
                                      "pauseValidation": [Function],
                                      "pristine": true,
                                      "registerAsyncValidator": [Function],
                                      "registerField": [Function],
                                      "registerInputFile": [Function],
                                      "registeredFields": Array [],
                                      "renderForm": [Function],
                                      "rerender": [Function],
                                      "reset": [Function],
                                      "resetFieldState": [Function],
                                      "restart": [Function],
                                      "resumeValidation": [Function],
                                      "setConfig": [Function],
                                      "setFieldState": [Function],
                                      "submit": [Function],
                                      "submitError": undefined,
                                      "submitErrors": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "subscribe": [Function],
                                      "touched": Object {},
                                      "unregisterField": [Function],
                                      "unregisterInputFile": [Function],
                                      "unsubscribe": [Function],
                                      "updateError": [Function],
                                      "updateValid": [Function],
                                      "valid": true,
                                      "validating": false,
                                      "values": Object {},
                                      "visited": Object {},
                                    }
                                  }
                                  handleNext={[Function]}
                                  handlePrev={[Function]}
                                  name={1}
                                  nextStep="step-2"
                                  title="Step 1"
                                >
                                  <WizardFooter
                                    className=""
                                  >
                                    <ModalFooter
                                      bsClass="modal-footer"
                                      className="wizard-pf-footer"
                                      componentClass="div"
                                    >
                                      <div
                                        className="wizard-pf-footer modal-footer"
                                      >
                                        <Button
                                          className="ddorg__pf3-component-mapper__wizard__buttons"
                                          color="secondary"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <Button
                                            active={false}
                                            block={false}
                                            bsClass="btn"
                                            bsStyle="default"
                                            className="ddorg__pf3-component-mapper__wizard__buttons"
                                            color="secondary"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="ddorg__pf3-component-mapper__wizard__buttons btn btn-default"
                                              color="secondary"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              Cancel
                                            </button>
                                          </Button>
                                        </Button>
                                        <Button
                                          className="margin-left-3"
                                          disabled={true}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <Button
                                            active={false}
                                            block={false}
                                            bsClass="btn"
                                            bsStyle="default"
                                            className="margin-left-3"
                                            disabled={true}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="margin-left-3 btn btn-default"
                                              disabled={true}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Icon
                                                name="angle-left"
                                                type="fa"
                                              >
                                                <FontAwesome
                                                  name="angle-left"
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="fa fa-angle-left"
                                                  />
                                                </FontAwesome>
                                              </Icon>
                                              Back
                                            </button>
                                          </Button>
                                        </Button>
                                        <SimpleNext
                                          afterSilentRegistration={[Function]}
                                          batch={[Function]}
                                          blur={[Function]}
                                          buttonLabels={
                                            Object {
                                              "back": "Back",
                                              "cancel": "Cancel",
                                              "next": "Next",
                                              "submit": "Submit",
                                            }
                                          }
                                          change={[Function]}
                                          dirty={false}
                                          dirtyFields={Object {}}
                                          dirtyFieldsSinceLastSubmit={Object {}}
                                          dirtySinceLastSubmit={false}
                                          errors={Object {}}
                                          fieldListeners={
                                            Object {
                                              "1607416663369": Object {
                                                "count": 1,
                                                "fields": Object {
                                                  "1607416663369": Object {
                                                    "afterSubmit": undefined,
                                                    "beforeSubmit": undefined,
                                                    "isEqual": undefined,
                                                    "render": [Function],
                                                    "subscription": Object {
                                                      "pristine": true,
                                                      "submitting": true,
                                                      "valid": true,
                                                    },
                                                    "validate": undefined,
                                                  },
                                                },
                                                "validateFields": undefined,
                                              },
                                            }
                                          }
                                          fileInputs={Array []}
                                          focus={[Function]}
                                          getFieldState={[Function]}
                                          getFieldValue={[Function]}
                                          getRegisteredFields={[Function]}
                                          getState={[Function]}
                                          handleNext={[Function]}
                                          hasSubmitErrors={false}
                                          hasValidationErrors={false}
                                          initialValues={Object {}}
                                          initialize={[Function]}
                                          invalid={false}
                                          isValidationPaused={[Function]}
                                          modified={Object {}}
                                          modifiedSinceLastSubmit={false}
                                          next="step-2"
                                          onCancel={[Function]}
                                          onReset={[Function]}
                                          onSubmit={[MockFunction]}
                                          pauseValidation={[Function]}
                                          pristine={true}
                                          registerAsyncValidator={[Function]}
                                          registerField={[Function]}
                                          registerInputFile={[Function]}
                                          registeredFields={Array []}
                                          renderForm={[Function]}
                                          rerender={[Function]}
                                          reset={[Function]}
                                          resetFieldState={[Function]}
                                          restart={[Function]}
                                          resumeValidation={[Function]}
                                          setConfig={[Function]}
                                          setFieldState={[Function]}
                                          submit={[Function]}
                                          submitFailed={false}
                                          submitSucceeded={false}
                                          submitting={false}
                                          subscribe={[Function]}
                                          touched={Object {}}
                                          unregisterField={[Function]}
                                          unregisterInputFile={[Function]}
                                          unsubscribe={[Function]}
                                          updateError={[Function]}
                                          updateValid={[Function]}
                                          valid={true}
                                          validating={false}
                                          values={Object {}}
                                          visited={Object {}}
                                        >
                                          <Button
                                            bsStyle="primary"
                                            className="margin-left-3"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <Button
                                              active={false}
                                              block={false}
                                              bsClass="btn"
                                              bsStyle="primary"
                                              className="margin-left-3"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <button
                                                className="margin-left-3 btn btn-primary"
                                                disabled={false}
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                Next
                                                <Icon
                                                  name="angle-right"
                                                  type="fa"
                                                >
                                                  <FontAwesome
                                                    name="angle-right"
                                                  >
                                                    <span
                                                      aria-hidden={true}
                                                      className="fa fa-angle-right"
                                                    />
                                                  </FontAwesome>
                                                </Icon>
                                              </button>
                                            </Button>
                                          </Button>
                                        </SimpleNext>
                                      </div>
                                    </ModalFooter>
                                  </WizardFooter>
                                </WizardStepButtons>
                              </WizardStep>
                            </div>
                          </WizardInternal>
                        </Wizard>
                      </WizardFinal>
                    </FormFieldHideWrapper>
                  </FormConditionWrapper>
                </SingleField>
              </form>
            </Form>
          </FormWrapper>
        </FormTemplate>
      </PF3FormTemplate>
    </FormTemplate>
  </Component>
</FormRenderer>
`;

exports[`<Wizard /> should render Wizard with conditional steps correctly 1`] = `
<FormRenderer
  FormTemplate={[Function]}
  clearOnUnmount={false}
  componentMapper={
    Object {
      "button": [Function],
      "checkbox": [Function],
      "date-picker": [Function],
      "input-addon-button-group": [Function],
      "input-addon-group": [Function],
      "plain-text": [Function],
      "radio": [Function],
      "select": [Function],
      "slider": [Function],
      "sub-form": [Function],
      "switch": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea": [Function],
      "time-picker": [Function],
      "wizard": [Function],
    }
  }
  initialValues={Object {}}
  onCancel={[Function]}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "wizard",
          "fields": Array [
            Object {
              "fields": Array [],
              "name": 1,
              "nextStep": Object {
                "stepMapper": Object {
                  "step": "step-2",
                },
                "when": "step",
              },
              "title": "Step 1",
            },
            Object {
              "fields": Array [],
              "name": "step-2",
              "title": "Step 2",
            },
          ],
          "name": "Wizard",
        },
      ],
    }
  }
>
  <Component
    clearOnUnmount={false}
    initialValues={Object {}}
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <FormTemplate
      formFields={
        Array [
          <SingleField
            component="wizard"
            fields={
              Array [
                Object {
                  "fields": Array [],
                  "name": 1,
                  "nextStep": Object {
                    "stepMapper": Object {
                      "step": "step-2",
                    },
                    "when": "step",
                  },
                  "title": "Step 1",
                },
                Object {
                  "fields": Array [],
                  "name": "step-2",
                  "title": "Step 2",
                },
              ]
            }
            name="Wizard"
          />,
        ]
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "wizard",
              "fields": Array [
                Object {
                  "fields": Array [],
                  "name": 1,
                  "nextStep": Object {
                    "stepMapper": Object {
                      "step": "step-2",
                    },
                    "when": "step",
                  },
                  "title": "Step 1",
                },
                Object {
                  "fields": Array [],
                  "name": "step-2",
                  "title": "Step 2",
                },
              ],
              "name": "Wizard",
            },
          ],
        }
      }
    >
      <PF3FormTemplate
        formFields={
          Array [
            <SingleField
              component="wizard"
              fields={
                Array [
                  Object {
                    "fields": Array [],
                    "name": 1,
                    "nextStep": Object {
                      "stepMapper": Object {
                        "step": "step-2",
                      },
                      "when": "step",
                    },
                    "title": "Step 1",
                  },
                  Object {
                    "fields": Array [],
                    "name": "step-2",
                    "title": "Step 2",
                  },
                ]
              }
              name="Wizard"
            />,
          ]
        }
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "wizard",
                "fields": Array [
                  Object {
                    "fields": Array [],
                    "name": 1,
                    "nextStep": Object {
                      "stepMapper": Object {
                        "step": "step-2",
                      },
                      "when": "step",
                    },
                    "title": "Step 1",
                  },
                  Object {
                    "fields": Array [],
                    "name": "step-2",
                    "title": "Step 2",
                  },
                ],
                "name": "Wizard",
              },
            ],
          }
        }
        showFormControls={false}
      >
        <FormTemplate
          Button={[Function]}
          ButtonGroup={[Function]}
          Description={[Function]}
          FormWrapper={[Function]}
          Header={Symbol(react.fragment)}
          Title={[Function]}
          disableSubmit={Array []}
          formFields={
            Array [
              <SingleField
                component="wizard"
                fields={
                  Array [
                    Object {
                      "fields": Array [],
                      "name": 1,
                      "nextStep": Object {
                        "stepMapper": Object {
                          "step": "step-2",
                        },
                        "when": "step",
                      },
                      "title": "Step 1",
                    },
                    Object {
                      "fields": Array [],
                      "name": "step-2",
                      "title": "Step 2",
                    },
                  ]
                }
                name="Wizard"
              />,
            ]
          }
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "wizard",
                  "fields": Array [
                    Object {
                      "fields": Array [],
                      "name": 1,
                      "nextStep": Object {
                        "stepMapper": Object {
                          "step": "step-2",
                        },
                        "when": "step",
                      },
                      "title": "Step 1",
                    },
                    Object {
                      "fields": Array [],
                      "name": "step-2",
                      "title": "Step 2",
                    },
                  ],
                  "name": "Wizard",
                },
              ],
            }
          }
          showFormControls={false}
        >
          <FormWrapper
            onSubmit={[Function]}
          >
            <Form
              bsClass="form"
              className="ddorg__pf3-layout-components__form-wrapper"
              componentClass="form"
              horizontal={false}
              inline={false}
              onSubmit={[Function]}
            >
              <form
                className="ddorg__pf3-layout-components__form-wrapper"
                onSubmit={[Function]}
              >
                <SingleField
                  component="wizard"
                  fields={
                    Array [
                      Object {
                        "fields": Array [],
                        "name": 1,
                        "nextStep": Object {
                          "stepMapper": Object {
                            "step": "step-2",
                          },
                          "when": "step",
                        },
                        "title": "Step 1",
                      },
                      Object {
                        "fields": Array [],
                        "name": "step-2",
                        "title": "Step 2",
                      },
                    ]
                  }
                  key="Wizard"
                  name="Wizard"
                >
                  <FormConditionWrapper
                    field={
                      Object {
                        "component": "wizard",
                        "fields": Array [
                          Object {
                            "fields": Array [],
                            "name": 1,
                            "nextStep": Object {
                              "stepMapper": Object {
                                "step": "step-2",
                              },
                              "when": "step",
                            },
                            "title": "Step 1",
                          },
                          Object {
                            "fields": Array [],
                            "name": "step-2",
                            "title": "Step 2",
                          },
                        ],
                        "name": "Wizard",
                      }
                    }
                  >
                    <FormFieldHideWrapper
                      hideField={false}
                    >
                      <WizardFinal
                        component="wizard"
                        fields={
                          Array [
                            Object {
                              "fields": Array [],
                              "name": 1,
                              "nextStep": Object {
                                "stepMapper": Object {
                                  "step": "step-2",
                                },
                                "when": "step",
                              },
                              "title": "Step 1",
                            },
                            Object {
                              "fields": Array [],
                              "name": "step-2",
                              "title": "Step 2",
                            },
                          ]
                        }
                        name="Wizard"
                      >
                        <Wizard
                          Wizard={[Function]}
                          component="wizard"
                          fields={
                            Array [
                              Object {
                                "fields": Array [],
                                "name": 1,
                                "nextStep": Object {
                                  "stepMapper": Object {
                                    "step": "step-2",
                                  },
                                  "when": "step",
                                },
                                "title": "Step 1",
                              },
                              Object {
                                "fields": Array [],
                                "name": "step-2",
                                "title": "Step 2",
                              },
                            ]
                          }
                          name="Wizard"
                        >
                          <WizardInternal
                            name="Wizard"
                          >
                            <div
                              onKeyDown={[Function]}
                            >
                              <WizardStep
                                buttonLabels={
                                  Object {
                                    "back": "Back",
                                    "cancel": "Cancel",
                                    "next": "Next",
                                    "submit": "Submit",
                                  }
                                }
                                disableBack={true}
                                fields={Array []}
                                formOptions={
                                  Object {
                                    "active": undefined,
                                    "afterSilentRegistration": [Function],
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "destroyOnUnregister": undefined,
                                    "dirty": false,
                                    "dirtyFields": Object {},
                                    "dirtyFieldsSinceLastSubmit": Object {},
                                    "dirtySinceLastSubmit": false,
                                    "error": undefined,
                                    "errors": Object {},
                                    "fieldListeners": Object {
                                      "1607416663376": Object {
                                        "count": 1,
                                        "fields": Object {
                                          "1607416663376": Object {
                                            "afterSubmit": undefined,
                                            "beforeSubmit": undefined,
                                            "isEqual": undefined,
                                            "render": [Function],
                                            "subscription": Object {
                                              "pristine": true,
                                              "submitting": true,
                                              "valid": true,
                                            },
                                            "validate": undefined,
                                          },
                                        },
                                        "validateFields": undefined,
                                      },
                                      "step": Object {
                                        "asyncWatcher": Object {
                                          "registerValidator": [Function],
                                        },
                                        "count": 1,
                                        "fields": Object {
                                          "1607416698361": Object {
                                            "afterSubmit": undefined,
                                            "beforeSubmit": undefined,
                                            "isEqual": undefined,
                                            "render": [Function],
                                            "subscription": Object {
                                              "value": true,
                                            },
                                            "validate": undefined,
                                          },
                                        },
                                        "state": Object {
                                          "meta": Object {
                                            "active": false,
                                            "data": Object {},
                                            "dirty": false,
                                            "dirtySinceLastSubmit": false,
                                            "error": undefined,
                                            "initial": undefined,
                                            "invalid": false,
                                            "modified": false,
                                            "modifiedSinceLastSubmit": false,
                                            "pristine": true,
                                            "submitError": undefined,
                                            "submitFailed": false,
                                            "submitSucceeded": false,
                                            "submitting": false,
                                            "touched": false,
                                            "valid": true,
                                            "validating": false,
                                            "visited": false,
                                            "warning": undefined,
                                          },
                                          "name": "step",
                                          "value": undefined,
                                        },
                                        "validateFields": undefined,
                                      },
                                    },
                                    "fileInputs": Array [],
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getFieldValue": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "handleSubmit": [Function],
                                    "hasSubmitErrors": false,
                                    "hasValidationErrors": false,
                                    "initialValues": Object {},
                                    "initialize": [Function],
                                    "invalid": false,
                                    "isValidationPaused": [Function],
                                    "modified": Object {},
                                    "modifiedSinceLastSubmit": false,
                                    "onCancel": [Function],
                                    "onReset": [Function],
                                    "onSubmit": [MockFunction],
                                    "pauseValidation": [Function],
                                    "pristine": true,
                                    "registerAsyncValidator": [Function],
                                    "registerField": [Function],
                                    "registerInputFile": [Function],
                                    "registeredFields": Array [
                                      "step",
                                    ],
                                    "renderForm": [Function],
                                    "rerender": [Function],
                                    "reset": [Function],
                                    "resetFieldState": [Function],
                                    "restart": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "setFieldState": [Function],
                                    "submit": [Function],
                                    "submitError": undefined,
                                    "submitErrors": undefined,
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "subscribe": [Function],
                                    "touched": Object {},
                                    "unregisterField": [Function],
                                    "unregisterInputFile": [Function],
                                    "unsubscribe": [Function],
                                    "updateError": [Function],
                                    "updateValid": [Function],
                                    "valid": true,
                                    "validating": false,
                                    "values": Object {},
                                    "visited": Object {},
                                  }
                                }
                                handleNext={[Function]}
                                handlePrev={[Function]}
                                name={1}
                                nextStep={
                                  Object {
                                    "stepMapper": Object {
                                      "step": "step-2",
                                    },
                                    "when": "step",
                                  }
                                }
                                title="Step 1"
                              >
                                <WizardBody
                                  className=""
                                >
                                  <ModalBody
                                    bsClass="modal-body"
                                    className="wizard-pf-body clearfix"
                                    componentClass="div"
                                  >
                                    <div
                                      className="wizard-pf-body clearfix modal-body"
                                    >
                                      <WizardRow
                                        className=""
                                      >
                                        <section
                                          className="wizard-pf-row"
                                        >
                                          <WizardMain
                                            className=""
                                          >
                                            <div
                                              className="wizard-pf-main"
                                            >
                                              <div
                                                className="form-horizontal"
                                              />
                                            </div>
                                          </WizardMain>
                                        </section>
                                      </WizardRow>
                                    </div>
                                  </ModalBody>
                                </WizardBody>
                                <WizardStepButtons
                                  buttonLabels={
                                    Object {
                                      "back": "Back",
                                      "cancel": "Cancel",
                                      "next": "Next",
                                      "submit": "Submit",
                                    }
                                  }
                                  disableBack={true}
                                  formOptions={
                                    Object {
                                      "active": undefined,
                                      "afterSilentRegistration": [Function],
                                      "batch": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "destroyOnUnregister": undefined,
                                      "dirty": false,
                                      "dirtyFields": Object {},
                                      "dirtyFieldsSinceLastSubmit": Object {},
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "errors": Object {},
                                      "fieldListeners": Object {
                                        "1607416663376": Object {
                                          "count": 1,
                                          "fields": Object {
                                            "1607416663376": Object {
                                              "afterSubmit": undefined,
                                              "beforeSubmit": undefined,
                                              "isEqual": undefined,
                                              "render": [Function],
                                              "subscription": Object {
                                                "pristine": true,
                                                "submitting": true,
                                                "valid": true,
                                              },
                                              "validate": undefined,
                                            },
                                          },
                                          "validateFields": undefined,
                                        },
                                        "step": Object {
                                          "asyncWatcher": Object {
                                            "registerValidator": [Function],
                                          },
                                          "count": 1,
                                          "fields": Object {
                                            "1607416698361": Object {
                                              "afterSubmit": undefined,
                                              "beforeSubmit": undefined,
                                              "isEqual": undefined,
                                              "render": [Function],
                                              "subscription": Object {
                                                "value": true,
                                              },
                                              "validate": undefined,
                                            },
                                          },
                                          "state": Object {
                                            "meta": Object {
                                              "active": false,
                                              "data": Object {},
                                              "dirty": false,
                                              "dirtySinceLastSubmit": false,
                                              "error": undefined,
                                              "initial": undefined,
                                              "invalid": false,
                                              "modified": false,
                                              "modifiedSinceLastSubmit": false,
                                              "pristine": true,
                                              "submitError": undefined,
                                              "submitFailed": false,
                                              "submitSucceeded": false,
                                              "submitting": false,
                                              "touched": false,
                                              "valid": true,
                                              "validating": false,
                                              "visited": false,
                                              "warning": undefined,
                                            },
                                            "name": "step",
                                            "value": undefined,
                                          },
                                          "validateFields": undefined,
                                        },
                                      },
                                      "fileInputs": Array [],
                                      "focus": [Function],
                                      "getFieldState": [Function],
                                      "getFieldValue": [Function],
                                      "getRegisteredFields": [Function],
                                      "getState": [Function],
                                      "handleSubmit": [Function],
                                      "hasSubmitErrors": false,
                                      "hasValidationErrors": false,
                                      "initialValues": Object {},
                                      "initialize": [Function],
                                      "invalid": false,
                                      "isValidationPaused": [Function],
                                      "modified": Object {},
                                      "modifiedSinceLastSubmit": false,
                                      "onCancel": [Function],
                                      "onReset": [Function],
                                      "onSubmit": [MockFunction],
                                      "pauseValidation": [Function],
                                      "pristine": true,
                                      "registerAsyncValidator": [Function],
                                      "registerField": [Function],
                                      "registerInputFile": [Function],
                                      "registeredFields": Array [
                                        "step",
                                      ],
                                      "renderForm": [Function],
                                      "rerender": [Function],
                                      "reset": [Function],
                                      "resetFieldState": [Function],
                                      "restart": [Function],
                                      "resumeValidation": [Function],
                                      "setConfig": [Function],
                                      "setFieldState": [Function],
                                      "submit": [Function],
                                      "submitError": undefined,
                                      "submitErrors": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "subscribe": [Function],
                                      "touched": Object {},
                                      "unregisterField": [Function],
                                      "unregisterInputFile": [Function],
                                      "unsubscribe": [Function],
                                      "updateError": [Function],
                                      "updateValid": [Function],
                                      "valid": true,
                                      "validating": false,
                                      "values": Object {},
                                      "visited": Object {},
                                    }
                                  }
                                  handleNext={[Function]}
                                  handlePrev={[Function]}
                                  name={1}
                                  nextStep={
                                    Object {
                                      "stepMapper": Object {
                                        "step": "step-2",
                                      },
                                      "when": "step",
                                    }
                                  }
                                  title="Step 1"
                                >
                                  <WizardFooter
                                    className=""
                                  >
                                    <ModalFooter
                                      bsClass="modal-footer"
                                      className="wizard-pf-footer"
                                      componentClass="div"
                                    >
                                      <div
                                        className="wizard-pf-footer modal-footer"
                                      >
                                        <Button
                                          className="ddorg__pf3-component-mapper__wizard__buttons"
                                          color="secondary"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <Button
                                            active={false}
                                            block={false}
                                            bsClass="btn"
                                            bsStyle="default"
                                            className="ddorg__pf3-component-mapper__wizard__buttons"
                                            color="secondary"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="ddorg__pf3-component-mapper__wizard__buttons btn btn-default"
                                              color="secondary"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              Cancel
                                            </button>
                                          </Button>
                                        </Button>
                                        <Button
                                          className="margin-left-3"
                                          disabled={true}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <Button
                                            active={false}
                                            block={false}
                                            bsClass="btn"
                                            bsStyle="default"
                                            className="margin-left-3"
                                            disabled={true}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="margin-left-3 btn btn-default"
                                              disabled={true}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Icon
                                                name="angle-left"
                                                type="fa"
                                              >
                                                <FontAwesome
                                                  name="angle-left"
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="fa fa-angle-left"
                                                  />
                                                </FontAwesome>
                                              </Icon>
                                              Back
                                            </button>
                                          </Button>
                                        </Button>
                                        <ConditionalNext
                                          afterSilentRegistration={[Function]}
                                          batch={[Function]}
                                          blur={[Function]}
                                          buttonLabels={
                                            Object {
                                              "back": "Back",
                                              "cancel": "Cancel",
                                              "next": "Next",
                                              "submit": "Submit",
                                            }
                                          }
                                          change={[Function]}
                                          dirty={false}
                                          dirtyFields={Object {}}
                                          dirtyFieldsSinceLastSubmit={Object {}}
                                          dirtySinceLastSubmit={false}
                                          errors={Object {}}
                                          fieldListeners={
                                            Object {
                                              "1607416663376": Object {
                                                "count": 1,
                                                "fields": Object {
                                                  "1607416663376": Object {
                                                    "afterSubmit": undefined,
                                                    "beforeSubmit": undefined,
                                                    "isEqual": undefined,
                                                    "render": [Function],
                                                    "subscription": Object {
                                                      "pristine": true,
                                                      "submitting": true,
                                                      "valid": true,
                                                    },
                                                    "validate": undefined,
                                                  },
                                                },
                                                "validateFields": undefined,
                                              },
                                              "step": Object {
                                                "asyncWatcher": Object {
                                                  "registerValidator": [Function],
                                                },
                                                "count": 1,
                                                "fields": Object {
                                                  "1607416698361": Object {
                                                    "afterSubmit": undefined,
                                                    "beforeSubmit": undefined,
                                                    "isEqual": undefined,
                                                    "render": [Function],
                                                    "subscription": Object {
                                                      "value": true,
                                                    },
                                                    "validate": undefined,
                                                  },
                                                },
                                                "state": Object {
                                                  "meta": Object {
                                                    "active": false,
                                                    "data": Object {},
                                                    "dirty": false,
                                                    "dirtySinceLastSubmit": false,
                                                    "error": undefined,
                                                    "initial": undefined,
                                                    "invalid": false,
                                                    "modified": false,
                                                    "modifiedSinceLastSubmit": false,
                                                    "pristine": true,
                                                    "submitError": undefined,
                                                    "submitFailed": false,
                                                    "submitSucceeded": false,
                                                    "submitting": false,
                                                    "touched": false,
                                                    "valid": true,
                                                    "validating": false,
                                                    "visited": false,
                                                    "warning": undefined,
                                                  },
                                                  "name": "step",
                                                  "value": undefined,
                                                },
                                                "validateFields": undefined,
                                              },
                                            }
                                          }
                                          fileInputs={Array []}
                                          focus={[Function]}
                                          getFieldState={[Function]}
                                          getFieldValue={[Function]}
                                          getRegisteredFields={[Function]}
                                          getState={[Function]}
                                          handleNext={[Function]}
                                          hasSubmitErrors={false}
                                          hasValidationErrors={false}
                                          initialValues={Object {}}
                                          initialize={[Function]}
                                          invalid={false}
                                          isValidationPaused={[Function]}
                                          modified={Object {}}
                                          modifiedSinceLastSubmit={false}
                                          nextStep={
                                            Object {
                                              "stepMapper": Object {
                                                "step": "step-2",
                                              },
                                              "when": "step",
                                            }
                                          }
                                          onCancel={[Function]}
                                          onReset={[Function]}
                                          onSubmit={[MockFunction]}
                                          pauseValidation={[Function]}
                                          pristine={true}
                                          registerAsyncValidator={[Function]}
                                          registerField={[Function]}
                                          registerInputFile={[Function]}
                                          registeredFields={
                                            Array [
                                              "step",
                                            ]
                                          }
                                          renderForm={[Function]}
                                          rerender={[Function]}
                                          reset={[Function]}
                                          resetFieldState={[Function]}
                                          restart={[Function]}
                                          resumeValidation={[Function]}
                                          setConfig={[Function]}
                                          setFieldState={[Function]}
                                          submit={[Function]}
                                          submitFailed={false}
                                          submitSucceeded={false}
                                          submitting={false}
                                          subscribe={[Function]}
                                          touched={Object {}}
                                          unregisterField={[Function]}
                                          unregisterInputFile={[Function]}
                                          unsubscribe={[Function]}
                                          updateError={[Function]}
                                          updateValid={[Function]}
                                          valid={true}
                                          validating={false}
                                          values={Object {}}
                                          visited={Object {}}
                                        >
                                          <SimpleNext
                                            afterSilentRegistration={[Function]}
                                            batch={[Function]}
                                            blur={[Function]}
                                            buttonLabels={
                                              Object {
                                                "back": "Back",
                                                "cancel": "Cancel",
                                                "next": "Next",
                                                "submit": "Submit",
                                              }
                                            }
                                            change={[Function]}
                                            dirty={false}
                                            dirtyFields={Object {}}
                                            dirtyFieldsSinceLastSubmit={Object {}}
                                            dirtySinceLastSubmit={false}
                                            disabled={true}
                                            errors={Object {}}
                                            fieldListeners={
                                              Object {
                                                "1607416663376": Object {
                                                  "count": 1,
                                                  "fields": Object {
                                                    "1607416663376": Object {
                                                      "afterSubmit": undefined,
                                                      "beforeSubmit": undefined,
                                                      "isEqual": undefined,
                                                      "render": [Function],
                                                      "subscription": Object {
                                                        "pristine": true,
                                                        "submitting": true,
                                                        "valid": true,
                                                      },
                                                      "validate": undefined,
                                                    },
                                                  },
                                                  "validateFields": undefined,
                                                },
                                                "step": Object {
                                                  "asyncWatcher": Object {
                                                    "registerValidator": [Function],
                                                  },
                                                  "count": 1,
                                                  "fields": Object {
                                                    "1607416698361": Object {
                                                      "afterSubmit": undefined,
                                                      "beforeSubmit": undefined,
                                                      "isEqual": undefined,
                                                      "render": [Function],
                                                      "subscription": Object {
                                                        "value": true,
                                                      },
                                                      "validate": undefined,
                                                    },
                                                  },
                                                  "state": Object {
                                                    "meta": Object {
                                                      "active": false,
                                                      "data": Object {},
                                                      "dirty": false,
                                                      "dirtySinceLastSubmit": false,
                                                      "error": undefined,
                                                      "initial": undefined,
                                                      "invalid": false,
                                                      "modified": false,
                                                      "modifiedSinceLastSubmit": false,
                                                      "pristine": true,
                                                      "submitError": undefined,
                                                      "submitFailed": false,
                                                      "submitSucceeded": false,
                                                      "submitting": false,
                                                      "touched": false,
                                                      "valid": true,
                                                      "validating": false,
                                                      "visited": false,
                                                      "warning": undefined,
                                                    },
                                                    "name": "step",
                                                    "value": undefined,
                                                  },
                                                  "validateFields": undefined,
                                                },
                                              }
                                            }
                                            fileInputs={Array []}
                                            focus={[Function]}
                                            getFieldState={[Function]}
                                            getFieldValue={[Function]}
                                            getRegisteredFields={[Function]}
                                            getState={[Function]}
                                            handleNext={[Function]}
                                            hasSubmitErrors={false}
                                            hasValidationErrors={false}
                                            initialValues={Object {}}
                                            initialize={[Function]}
                                            invalid={false}
                                            isValidationPaused={[Function]}
                                            modified={Object {}}
                                            modifiedSinceLastSubmit={false}
                                            onCancel={[Function]}
                                            onReset={[Function]}
                                            onSubmit={[MockFunction]}
                                            pauseValidation={[Function]}
                                            pristine={true}
                                            registerAsyncValidator={[Function]}
                                            registerField={[Function]}
                                            registerInputFile={[Function]}
                                            registeredFields={
                                              Array [
                                                "step",
                                              ]
                                            }
                                            renderForm={[Function]}
                                            rerender={[Function]}
                                            reset={[Function]}
                                            resetFieldState={[Function]}
                                            restart={[Function]}
                                            resumeValidation={[Function]}
                                            setConfig={[Function]}
                                            setFieldState={[Function]}
                                            submit={[Function]}
                                            submitFailed={false}
                                            submitSucceeded={false}
                                            submitting={false}
                                            subscribe={[Function]}
                                            touched={Object {}}
                                            unregisterField={[Function]}
                                            unregisterInputFile={[Function]}
                                            unsubscribe={[Function]}
                                            updateError={[Function]}
                                            updateValid={[Function]}
                                            valid={true}
                                            validating={false}
                                            values={Object {}}
                                            visited={Object {}}
                                          >
                                            <Button
                                              bsStyle="primary"
                                              className="margin-left-3"
                                              disabled={true}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Button
                                                active={false}
                                                block={false}
                                                bsClass="btn"
                                                bsStyle="primary"
                                                className="margin-left-3"
                                                disabled={true}
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <button
                                                  className="margin-left-3 btn btn-primary"
                                                  disabled={true}
                                                  onClick={[Function]}
                                                  type="button"
                                                >
                                                  Next
                                                  <Icon
                                                    name="angle-right"
                                                    type="fa"
                                                  >
                                                    <FontAwesome
                                                      name="angle-right"
                                                    >
                                                      <span
                                                        aria-hidden={true}
                                                        className="fa fa-angle-right"
                                                      />
                                                    </FontAwesome>
                                                  </Icon>
                                                </button>
                                              </Button>
                                            </Button>
                                          </SimpleNext>
                                        </ConditionalNext>
                                      </div>
                                    </ModalFooter>
                                  </WizardFooter>
                                </WizardStepButtons>
                              </WizardStep>
                            </div>
                          </WizardInternal>
                        </Wizard>
                      </WizardFinal>
                    </FormFieldHideWrapper>
                  </FormConditionWrapper>
                </SingleField>
              </form>
            </Form>
          </FormWrapper>
        </FormTemplate>
      </PF3FormTemplate>
    </FormTemplate>
  </Component>
</FormRenderer>
`;

exports[`<Wizard /> should render Wizard with stepsInfo correctly 1`] = `
<FormRenderer
  FormTemplate={[Function]}
  clearOnUnmount={false}
  componentMapper={
    Object {
      "button": [Function],
      "checkbox": [Function],
      "date-picker": [Function],
      "input-addon-button-group": [Function],
      "input-addon-group": [Function],
      "plain-text": [Function],
      "radio": [Function],
      "select": [Function],
      "slider": [Function],
      "sub-form": [Function],
      "switch": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea": [Function],
      "time-picker": [Function],
      "wizard": [Function],
    }
  }
  initialValues={Object {}}
  onCancel={[Function]}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "wizard",
          "fields": Array [
            Object {
              "fields": Array [],
              "name": 1,
              "nextStep": "step-2",
              "title": "Step 1",
            },
            Object {
              "fields": Array [],
              "name": "step-2",
              "title": "Step 2",
            },
          ],
          "name": "Wizard",
          "stepsInfo": Array [
            Object {
              "title": "step1",
            },
            Object {
              "title": "step2",
            },
          ],
        },
      ],
    }
  }
>
  <Component
    clearOnUnmount={false}
    initialValues={Object {}}
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <FormTemplate
      formFields={
        Array [
          <SingleField
            component="wizard"
            fields={
              Array [
                Object {
                  "fields": Array [],
                  "name": 1,
                  "nextStep": "step-2",
                  "title": "Step 1",
                },
                Object {
                  "fields": Array [],
                  "name": "step-2",
                  "title": "Step 2",
                },
              ]
            }
            name="Wizard"
            stepsInfo={
              Array [
                Object {
                  "title": "step1",
                },
                Object {
                  "title": "step2",
                },
              ]
            }
          />,
        ]
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "wizard",
              "fields": Array [
                Object {
                  "fields": Array [],
                  "name": 1,
                  "nextStep": "step-2",
                  "title": "Step 1",
                },
                Object {
                  "fields": Array [],
                  "name": "step-2",
                  "title": "Step 2",
                },
              ],
              "name": "Wizard",
              "stepsInfo": Array [
                Object {
                  "title": "step1",
                },
                Object {
                  "title": "step2",
                },
              ],
            },
          ],
        }
      }
    >
      <PF3FormTemplate
        formFields={
          Array [
            <SingleField
              component="wizard"
              fields={
                Array [
                  Object {
                    "fields": Array [],
                    "name": 1,
                    "nextStep": "step-2",
                    "title": "Step 1",
                  },
                  Object {
                    "fields": Array [],
                    "name": "step-2",
                    "title": "Step 2",
                  },
                ]
              }
              name="Wizard"
              stepsInfo={
                Array [
                  Object {
                    "title": "step1",
                  },
                  Object {
                    "title": "step2",
                  },
                ]
              }
            />,
          ]
        }
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "wizard",
                "fields": Array [
                  Object {
                    "fields": Array [],
                    "name": 1,
                    "nextStep": "step-2",
                    "title": "Step 1",
                  },
                  Object {
                    "fields": Array [],
                    "name": "step-2",
                    "title": "Step 2",
                  },
                ],
                "name": "Wizard",
                "stepsInfo": Array [
                  Object {
                    "title": "step1",
                  },
                  Object {
                    "title": "step2",
                  },
                ],
              },
            ],
          }
        }
        showFormControls={false}
      >
        <FormTemplate
          Button={[Function]}
          ButtonGroup={[Function]}
          Description={[Function]}
          FormWrapper={[Function]}
          Header={Symbol(react.fragment)}
          Title={[Function]}
          disableSubmit={Array []}
          formFields={
            Array [
              <SingleField
                component="wizard"
                fields={
                  Array [
                    Object {
                      "fields": Array [],
                      "name": 1,
                      "nextStep": "step-2",
                      "title": "Step 1",
                    },
                    Object {
                      "fields": Array [],
                      "name": "step-2",
                      "title": "Step 2",
                    },
                  ]
                }
                name="Wizard"
                stepsInfo={
                  Array [
                    Object {
                      "title": "step1",
                    },
                    Object {
                      "title": "step2",
                    },
                  ]
                }
              />,
            ]
          }
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "wizard",
                  "fields": Array [
                    Object {
                      "fields": Array [],
                      "name": 1,
                      "nextStep": "step-2",
                      "title": "Step 1",
                    },
                    Object {
                      "fields": Array [],
                      "name": "step-2",
                      "title": "Step 2",
                    },
                  ],
                  "name": "Wizard",
                  "stepsInfo": Array [
                    Object {
                      "title": "step1",
                    },
                    Object {
                      "title": "step2",
                    },
                  ],
                },
              ],
            }
          }
          showFormControls={false}
        >
          <FormWrapper
            onSubmit={[Function]}
          >
            <Form
              bsClass="form"
              className="ddorg__pf3-layout-components__form-wrapper"
              componentClass="form"
              horizontal={false}
              inline={false}
              onSubmit={[Function]}
            >
              <form
                className="ddorg__pf3-layout-components__form-wrapper"
                onSubmit={[Function]}
              >
                <SingleField
                  component="wizard"
                  fields={
                    Array [
                      Object {
                        "fields": Array [],
                        "name": 1,
                        "nextStep": "step-2",
                        "title": "Step 1",
                      },
                      Object {
                        "fields": Array [],
                        "name": "step-2",
                        "title": "Step 2",
                      },
                    ]
                  }
                  key="Wizard"
                  name="Wizard"
                  stepsInfo={
                    Array [
                      Object {
                        "title": "step1",
                      },
                      Object {
                        "title": "step2",
                      },
                    ]
                  }
                >
                  <FormConditionWrapper
                    field={
                      Object {
                        "component": "wizard",
                        "fields": Array [
                          Object {
                            "fields": Array [],
                            "name": 1,
                            "nextStep": "step-2",
                            "title": "Step 1",
                          },
                          Object {
                            "fields": Array [],
                            "name": "step-2",
                            "title": "Step 2",
                          },
                        ],
                        "name": "Wizard",
                        "stepsInfo": Array [
                          Object {
                            "title": "step1",
                          },
                          Object {
                            "title": "step2",
                          },
                        ],
                      }
                    }
                  >
                    <FormFieldHideWrapper
                      hideField={false}
                    >
                      <WizardFinal
                        component="wizard"
                        fields={
                          Array [
                            Object {
                              "fields": Array [],
                              "name": 1,
                              "nextStep": "step-2",
                              "title": "Step 1",
                            },
                            Object {
                              "fields": Array [],
                              "name": "step-2",
                              "title": "Step 2",
                            },
                          ]
                        }
                        name="Wizard"
                        stepsInfo={
                          Array [
                            Object {
                              "title": "step1",
                            },
                            Object {
                              "title": "step2",
                            },
                          ]
                        }
                      >
                        <Wizard
                          Wizard={[Function]}
                          component="wizard"
                          fields={
                            Array [
                              Object {
                                "fields": Array [],
                                "name": 1,
                                "nextStep": "step-2",
                                "title": "Step 1",
                              },
                              Object {
                                "fields": Array [],
                                "name": "step-2",
                                "title": "Step 2",
                              },
                            ]
                          }
                          name="Wizard"
                          stepsInfo={
                            Array [
                              Object {
                                "title": "step1",
                              },
                              Object {
                                "title": "step2",
                              },
                            ]
                          }
                        >
                          <WizardInternal
                            name="Wizard"
                            stepsInfo={
                              Array [
                                Object {
                                  "title": "step1",
                                },
                                Object {
                                  "title": "step2",
                                },
                              ]
                            }
                          >
                            <div
                              onKeyDown={[Function]}
                            >
                              <WizardSteps
                                className=""
                                steps={
                                  Array [
                                    <WizardStep
                                      activeStep={1}
                                      className=""
                                      label="1"
                                      onClick={[Function]}
                                      step={1}
                                      stepIndex={1}
                                      title="step1"
                                    />,
                                    <WizardStep
                                      activeStep={1}
                                      className=""
                                      label="2"
                                      onClick={[Function]}
                                      step={2}
                                      stepIndex={2}
                                      title="step2"
                                    />,
                                  ]
                                }
                              >
                                <div
                                  className="wizard-pf-steps"
                                >
                                  <ul
                                    className="wizard-pf-steps-indicator"
                                  >
                                    <WizardStep
                                      activeStep={1}
                                      className=""
                                      key="1"
                                      label="1"
                                      onClick={[Function]}
                                      step={1}
                                      stepIndex={1}
                                      title="step1"
                                    >
                                      <li
                                        className="wizard-pf-step active"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                        >
                                          <span
                                            className="wizard-pf-step-number"
                                          >
                                            1
                                          </span>
                                          <span
                                            className="wizard-pf-step-title"
                                          >
                                            step1
                                          </span>
                                        </a>
                                      </li>
                                    </WizardStep>
                                    <WizardStep
                                      activeStep={1}
                                      className=""
                                      key="2"
                                      label="2"
                                      onClick={[Function]}
                                      step={2}
                                      stepIndex={2}
                                      title="step2"
                                    >
                                      <li
                                        className="wizard-pf-step"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                        >
                                          <span
                                            className="wizard-pf-step-number"
                                          >
                                            2
                                          </span>
                                          <span
                                            className="wizard-pf-step-title"
                                          >
                                            step2
                                          </span>
                                        </a>
                                      </li>
                                    </WizardStep>
                                  </ul>
                                </div>
                              </WizardSteps>
                              <WizardStep
                                buttonLabels={
                                  Object {
                                    "back": "Back",
                                    "cancel": "Cancel",
                                    "next": "Next",
                                    "submit": "Submit",
                                  }
                                }
                                disableBack={true}
                                fields={Array []}
                                formOptions={
                                  Object {
                                    "active": undefined,
                                    "afterSilentRegistration": [Function],
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "destroyOnUnregister": undefined,
                                    "dirty": false,
                                    "dirtyFields": Object {},
                                    "dirtyFieldsSinceLastSubmit": Object {},
                                    "dirtySinceLastSubmit": false,
                                    "error": undefined,
                                    "errors": Object {},
                                    "fieldListeners": Object {
                                      "1607416727086": Object {
                                        "count": 1,
                                        "fields": Object {
                                          "1607416727086": Object {
                                            "afterSubmit": undefined,
                                            "beforeSubmit": undefined,
                                            "isEqual": undefined,
                                            "render": [Function],
                                            "subscription": Object {
                                              "pristine": true,
                                              "submitting": true,
                                              "valid": true,
                                            },
                                            "validate": undefined,
                                          },
                                        },
                                        "validateFields": undefined,
                                      },
                                    },
                                    "fileInputs": Array [],
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getFieldValue": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "handleSubmit": [Function],
                                    "hasSubmitErrors": false,
                                    "hasValidationErrors": false,
                                    "initialValues": Object {},
                                    "initialize": [Function],
                                    "invalid": false,
                                    "isValidationPaused": [Function],
                                    "modified": Object {},
                                    "modifiedSinceLastSubmit": false,
                                    "onCancel": [Function],
                                    "onReset": [Function],
                                    "onSubmit": [MockFunction],
                                    "pauseValidation": [Function],
                                    "pristine": true,
                                    "registerAsyncValidator": [Function],
                                    "registerField": [Function],
                                    "registerInputFile": [Function],
                                    "registeredFields": Array [],
                                    "renderForm": [Function],
                                    "rerender": [Function],
                                    "reset": [Function],
                                    "resetFieldState": [Function],
                                    "restart": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "setFieldState": [Function],
                                    "submit": [Function],
                                    "submitError": undefined,
                                    "submitErrors": undefined,
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "subscribe": [Function],
                                    "touched": Object {},
                                    "unregisterField": [Function],
                                    "unregisterInputFile": [Function],
                                    "unsubscribe": [Function],
                                    "updateError": [Function],
                                    "updateValid": [Function],
                                    "valid": true,
                                    "validating": false,
                                    "values": Object {},
                                    "visited": Object {},
                                  }
                                }
                                handleNext={[Function]}
                                handlePrev={[Function]}
                                name={1}
                                nextStep="step-2"
                                title="Step 1"
                              >
                                <WizardBody
                                  className=""
                                >
                                  <ModalBody
                                    bsClass="modal-body"
                                    className="wizard-pf-body clearfix"
                                    componentClass="div"
                                  >
                                    <div
                                      className="wizard-pf-body clearfix modal-body"
                                    >
                                      <WizardRow
                                        className=""
                                      >
                                        <section
                                          className="wizard-pf-row"
                                        >
                                          <WizardMain
                                            className=""
                                          >
                                            <div
                                              className="wizard-pf-main"
                                            >
                                              <div
                                                className="form-horizontal"
                                              />
                                            </div>
                                          </WizardMain>
                                        </section>
                                      </WizardRow>
                                    </div>
                                  </ModalBody>
                                </WizardBody>
                                <WizardStepButtons
                                  buttonLabels={
                                    Object {
                                      "back": "Back",
                                      "cancel": "Cancel",
                                      "next": "Next",
                                      "submit": "Submit",
                                    }
                                  }
                                  disableBack={true}
                                  formOptions={
                                    Object {
                                      "active": undefined,
                                      "afterSilentRegistration": [Function],
                                      "batch": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "destroyOnUnregister": undefined,
                                      "dirty": false,
                                      "dirtyFields": Object {},
                                      "dirtyFieldsSinceLastSubmit": Object {},
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "errors": Object {},
                                      "fieldListeners": Object {
                                        "1607416727086": Object {
                                          "count": 1,
                                          "fields": Object {
                                            "1607416727086": Object {
                                              "afterSubmit": undefined,
                                              "beforeSubmit": undefined,
                                              "isEqual": undefined,
                                              "render": [Function],
                                              "subscription": Object {
                                                "pristine": true,
                                                "submitting": true,
                                                "valid": true,
                                              },
                                              "validate": undefined,
                                            },
                                          },
                                          "validateFields": undefined,
                                        },
                                      },
                                      "fileInputs": Array [],
                                      "focus": [Function],
                                      "getFieldState": [Function],
                                      "getFieldValue": [Function],
                                      "getRegisteredFields": [Function],
                                      "getState": [Function],
                                      "handleSubmit": [Function],
                                      "hasSubmitErrors": false,
                                      "hasValidationErrors": false,
                                      "initialValues": Object {},
                                      "initialize": [Function],
                                      "invalid": false,
                                      "isValidationPaused": [Function],
                                      "modified": Object {},
                                      "modifiedSinceLastSubmit": false,
                                      "onCancel": [Function],
                                      "onReset": [Function],
                                      "onSubmit": [MockFunction],
                                      "pauseValidation": [Function],
                                      "pristine": true,
                                      "registerAsyncValidator": [Function],
                                      "registerField": [Function],
                                      "registerInputFile": [Function],
                                      "registeredFields": Array [],
                                      "renderForm": [Function],
                                      "rerender": [Function],
                                      "reset": [Function],
                                      "resetFieldState": [Function],
                                      "restart": [Function],
                                      "resumeValidation": [Function],
                                      "setConfig": [Function],
                                      "setFieldState": [Function],
                                      "submit": [Function],
                                      "submitError": undefined,
                                      "submitErrors": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "subscribe": [Function],
                                      "touched": Object {},
                                      "unregisterField": [Function],
                                      "unregisterInputFile": [Function],
                                      "unsubscribe": [Function],
                                      "updateError": [Function],
                                      "updateValid": [Function],
                                      "valid": true,
                                      "validating": false,
                                      "values": Object {},
                                      "visited": Object {},
                                    }
                                  }
                                  handleNext={[Function]}
                                  handlePrev={[Function]}
                                  name={1}
                                  nextStep="step-2"
                                  title="Step 1"
                                >
                                  <WizardFooter
                                    className=""
                                  >
                                    <ModalFooter
                                      bsClass="modal-footer"
                                      className="wizard-pf-footer"
                                      componentClass="div"
                                    >
                                      <div
                                        className="wizard-pf-footer modal-footer"
                                      >
                                        <Button
                                          className="ddorg__pf3-component-mapper__wizard__buttons"
                                          color="secondary"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <Button
                                            active={false}
                                            block={false}
                                            bsClass="btn"
                                            bsStyle="default"
                                            className="ddorg__pf3-component-mapper__wizard__buttons"
                                            color="secondary"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="ddorg__pf3-component-mapper__wizard__buttons btn btn-default"
                                              color="secondary"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              Cancel
                                            </button>
                                          </Button>
                                        </Button>
                                        <Button
                                          className="margin-left-3"
                                          disabled={true}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <Button
                                            active={false}
                                            block={false}
                                            bsClass="btn"
                                            bsStyle="default"
                                            className="margin-left-3"
                                            disabled={true}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="margin-left-3 btn btn-default"
                                              disabled={true}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Icon
                                                name="angle-left"
                                                type="fa"
                                              >
                                                <FontAwesome
                                                  name="angle-left"
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="fa fa-angle-left"
                                                  />
                                                </FontAwesome>
                                              </Icon>
                                              Back
                                            </button>
                                          </Button>
                                        </Button>
                                        <SimpleNext
                                          afterSilentRegistration={[Function]}
                                          batch={[Function]}
                                          blur={[Function]}
                                          buttonLabels={
                                            Object {
                                              "back": "Back",
                                              "cancel": "Cancel",
                                              "next": "Next",
                                              "submit": "Submit",
                                            }
                                          }
                                          change={[Function]}
                                          dirty={false}
                                          dirtyFields={Object {}}
                                          dirtyFieldsSinceLastSubmit={Object {}}
                                          dirtySinceLastSubmit={false}
                                          errors={Object {}}
                                          fieldListeners={
                                            Object {
                                              "1607416727086": Object {
                                                "count": 1,
                                                "fields": Object {
                                                  "1607416727086": Object {
                                                    "afterSubmit": undefined,
                                                    "beforeSubmit": undefined,
                                                    "isEqual": undefined,
                                                    "render": [Function],
                                                    "subscription": Object {
                                                      "pristine": true,
                                                      "submitting": true,
                                                      "valid": true,
                                                    },
                                                    "validate": undefined,
                                                  },
                                                },
                                                "validateFields": undefined,
                                              },
                                            }
                                          }
                                          fileInputs={Array []}
                                          focus={[Function]}
                                          getFieldState={[Function]}
                                          getFieldValue={[Function]}
                                          getRegisteredFields={[Function]}
                                          getState={[Function]}
                                          handleNext={[Function]}
                                          hasSubmitErrors={false}
                                          hasValidationErrors={false}
                                          initialValues={Object {}}
                                          initialize={[Function]}
                                          invalid={false}
                                          isValidationPaused={[Function]}
                                          modified={Object {}}
                                          modifiedSinceLastSubmit={false}
                                          next="step-2"
                                          onCancel={[Function]}
                                          onReset={[Function]}
                                          onSubmit={[MockFunction]}
                                          pauseValidation={[Function]}
                                          pristine={true}
                                          registerAsyncValidator={[Function]}
                                          registerField={[Function]}
                                          registerInputFile={[Function]}
                                          registeredFields={Array []}
                                          renderForm={[Function]}
                                          rerender={[Function]}
                                          reset={[Function]}
                                          resetFieldState={[Function]}
                                          restart={[Function]}
                                          resumeValidation={[Function]}
                                          setConfig={[Function]}
                                          setFieldState={[Function]}
                                          submit={[Function]}
                                          submitFailed={false}
                                          submitSucceeded={false}
                                          submitting={false}
                                          subscribe={[Function]}
                                          touched={Object {}}
                                          unregisterField={[Function]}
                                          unregisterInputFile={[Function]}
                                          unsubscribe={[Function]}
                                          updateError={[Function]}
                                          updateValid={[Function]}
                                          valid={true}
                                          validating={false}
                                          values={Object {}}
                                          visited={Object {}}
                                        >
                                          <Button
                                            bsStyle="primary"
                                            className="margin-left-3"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <Button
                                              active={false}
                                              block={false}
                                              bsClass="btn"
                                              bsStyle="primary"
                                              className="margin-left-3"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <button
                                                className="margin-left-3 btn btn-primary"
                                                disabled={false}
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                Next
                                                <Icon
                                                  name="angle-right"
                                                  type="fa"
                                                >
                                                  <FontAwesome
                                                    name="angle-right"
                                                  >
                                                    <span
                                                      aria-hidden={true}
                                                      className="fa fa-angle-right"
                                                    />
                                                  </FontAwesome>
                                                </Icon>
                                              </button>
                                            </Button>
                                          </Button>
                                        </SimpleNext>
                                      </div>
                                    </ModalFooter>
                                  </WizardFooter>
                                </WizardStepButtons>
                              </WizardStep>
                            </div>
                          </WizardInternal>
                        </Wizard>
                      </WizardFinal>
                    </FormFieldHideWrapper>
                  </FormConditionWrapper>
                </SingleField>
              </form>
            </Form>
          </FormWrapper>
        </FormTemplate>
      </PF3FormTemplate>
    </FormTemplate>
  </Component>
</FormRenderer>
`;

exports[`<Wizard /> should render Wizard with title correctly 1`] = `
<FormRenderer
  FormTemplate={[Function]}
  clearOnUnmount={false}
  componentMapper={
    Object {
      "button": [Function],
      "checkbox": [Function],
      "date-picker": [Function],
      "input-addon-button-group": [Function],
      "input-addon-group": [Function],
      "plain-text": [Function],
      "radio": [Function],
      "select": [Function],
      "slider": [Function],
      "sub-form": [Function],
      "switch": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea": [Function],
      "time-picker": [Function],
      "wizard": [Function],
    }
  }
  initialValues={Object {}}
  onCancel={[Function]}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "wizard",
          "fields": Array [
            Object {
              "fields": Array [],
              "name": 1,
              "nextStep": "step-2",
              "title": "Step 1",
            },
            Object {
              "fields": Array [],
              "name": "step-2",
              "title": "Step 2",
            },
          ],
          "name": "Wizard",
          "title": "Wizard title",
        },
      ],
    }
  }
>
  <Component
    clearOnUnmount={false}
    initialValues={Object {}}
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <FormTemplate
      formFields={
        Array [
          <SingleField
            component="wizard"
            fields={
              Array [
                Object {
                  "fields": Array [],
                  "name": 1,
                  "nextStep": "step-2",
                  "title": "Step 1",
                },
                Object {
                  "fields": Array [],
                  "name": "step-2",
                  "title": "Step 2",
                },
              ]
            }
            name="Wizard"
            title="Wizard title"
          />,
        ]
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "wizard",
              "fields": Array [
                Object {
                  "fields": Array [],
                  "name": 1,
                  "nextStep": "step-2",
                  "title": "Step 1",
                },
                Object {
                  "fields": Array [],
                  "name": "step-2",
                  "title": "Step 2",
                },
              ],
              "name": "Wizard",
              "title": "Wizard title",
            },
          ],
        }
      }
    >
      <PF3FormTemplate
        formFields={
          Array [
            <SingleField
              component="wizard"
              fields={
                Array [
                  Object {
                    "fields": Array [],
                    "name": 1,
                    "nextStep": "step-2",
                    "title": "Step 1",
                  },
                  Object {
                    "fields": Array [],
                    "name": "step-2",
                    "title": "Step 2",
                  },
                ]
              }
              name="Wizard"
              title="Wizard title"
            />,
          ]
        }
        schema={
          Object {
            "fields": Array [
              Object {
                "component": "wizard",
                "fields": Array [
                  Object {
                    "fields": Array [],
                    "name": 1,
                    "nextStep": "step-2",
                    "title": "Step 1",
                  },
                  Object {
                    "fields": Array [],
                    "name": "step-2",
                    "title": "Step 2",
                  },
                ],
                "name": "Wizard",
                "title": "Wizard title",
              },
            ],
          }
        }
        showFormControls={false}
      >
        <FormTemplate
          Button={[Function]}
          ButtonGroup={[Function]}
          Description={[Function]}
          FormWrapper={[Function]}
          Header={Symbol(react.fragment)}
          Title={[Function]}
          disableSubmit={Array []}
          formFields={
            Array [
              <SingleField
                component="wizard"
                fields={
                  Array [
                    Object {
                      "fields": Array [],
                      "name": 1,
                      "nextStep": "step-2",
                      "title": "Step 1",
                    },
                    Object {
                      "fields": Array [],
                      "name": "step-2",
                      "title": "Step 2",
                    },
                  ]
                }
                name="Wizard"
                title="Wizard title"
              />,
            ]
          }
          schema={
            Object {
              "fields": Array [
                Object {
                  "component": "wizard",
                  "fields": Array [
                    Object {
                      "fields": Array [],
                      "name": 1,
                      "nextStep": "step-2",
                      "title": "Step 1",
                    },
                    Object {
                      "fields": Array [],
                      "name": "step-2",
                      "title": "Step 2",
                    },
                  ],
                  "name": "Wizard",
                  "title": "Wizard title",
                },
              ],
            }
          }
          showFormControls={false}
        >
          <FormWrapper
            onSubmit={[Function]}
          >
            <Form
              bsClass="form"
              className="ddorg__pf3-layout-components__form-wrapper"
              componentClass="form"
              horizontal={false}
              inline={false}
              onSubmit={[Function]}
            >
              <form
                className="ddorg__pf3-layout-components__form-wrapper"
                onSubmit={[Function]}
              >
                <SingleField
                  component="wizard"
                  fields={
                    Array [
                      Object {
                        "fields": Array [],
                        "name": 1,
                        "nextStep": "step-2",
                        "title": "Step 1",
                      },
                      Object {
                        "fields": Array [],
                        "name": "step-2",
                        "title": "Step 2",
                      },
                    ]
                  }
                  key="Wizard"
                  name="Wizard"
                  title="Wizard title"
                >
                  <FormConditionWrapper
                    field={
                      Object {
                        "component": "wizard",
                        "fields": Array [
                          Object {
                            "fields": Array [],
                            "name": 1,
                            "nextStep": "step-2",
                            "title": "Step 1",
                          },
                          Object {
                            "fields": Array [],
                            "name": "step-2",
                            "title": "Step 2",
                          },
                        ],
                        "name": "Wizard",
                        "title": "Wizard title",
                      }
                    }
                  >
                    <FormFieldHideWrapper
                      hideField={false}
                    >
                      <WizardFinal
                        component="wizard"
                        fields={
                          Array [
                            Object {
                              "fields": Array [],
                              "name": 1,
                              "nextStep": "step-2",
                              "title": "Step 1",
                            },
                            Object {
                              "fields": Array [],
                              "name": "step-2",
                              "title": "Step 2",
                            },
                          ]
                        }
                        name="Wizard"
                        title="Wizard title"
                      >
                        <Wizard
                          Wizard={[Function]}
                          component="wizard"
                          fields={
                            Array [
                              Object {
                                "fields": Array [],
                                "name": 1,
                                "nextStep": "step-2",
                                "title": "Step 1",
                              },
                              Object {
                                "fields": Array [],
                                "name": "step-2",
                                "title": "Step 2",
                              },
                            ]
                          }
                          name="Wizard"
                          title="Wizard title"
                        >
                          <WizardInternal
                            name="Wizard"
                            title="Wizard title"
                          >
                            <div
                              onKeyDown={[Function]}
                            >
                              <ModalHeader
                                bsClass="modal-header"
                                closeButton={false}
                                closeLabel="Close"
                              >
                                <div
                                  className="modal-header"
                                >
                                  <ModalTitle
                                    bsClass="modal-title"
                                    componentClass="h4"
                                  >
                                    <h4
                                      className="modal-title"
                                    >
                                      Wizard title
                                    </h4>
                                  </ModalTitle>
                                </div>
                              </ModalHeader>
                              <WizardStep
                                buttonLabels={
                                  Object {
                                    "back": "Back",
                                    "cancel": "Cancel",
                                    "next": "Next",
                                    "submit": "Submit",
                                  }
                                }
                                disableBack={true}
                                fields={Array []}
                                formOptions={
                                  Object {
                                    "active": undefined,
                                    "afterSilentRegistration": [Function],
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "destroyOnUnregister": undefined,
                                    "dirty": false,
                                    "dirtyFields": Object {},
                                    "dirtyFieldsSinceLastSubmit": Object {},
                                    "dirtySinceLastSubmit": false,
                                    "error": undefined,
                                    "errors": Object {},
                                    "fieldListeners": Object {
                                      "1607416644871": Object {
                                        "count": 1,
                                        "fields": Object {
                                          "1607416644871": Object {
                                            "afterSubmit": undefined,
                                            "beforeSubmit": undefined,
                                            "isEqual": undefined,
                                            "render": [Function],
                                            "subscription": Object {
                                              "pristine": true,
                                              "submitting": true,
                                              "valid": true,
                                            },
                                            "validate": undefined,
                                          },
                                        },
                                        "validateFields": undefined,
                                      },
                                    },
                                    "fileInputs": Array [],
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getFieldValue": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "handleSubmit": [Function],
                                    "hasSubmitErrors": false,
                                    "hasValidationErrors": false,
                                    "initialValues": Object {},
                                    "initialize": [Function],
                                    "invalid": false,
                                    "isValidationPaused": [Function],
                                    "modified": Object {},
                                    "modifiedSinceLastSubmit": false,
                                    "onCancel": [Function],
                                    "onReset": [Function],
                                    "onSubmit": [MockFunction],
                                    "pauseValidation": [Function],
                                    "pristine": true,
                                    "registerAsyncValidator": [Function],
                                    "registerField": [Function],
                                    "registerInputFile": [Function],
                                    "registeredFields": Array [],
                                    "renderForm": [Function],
                                    "rerender": [Function],
                                    "reset": [Function],
                                    "resetFieldState": [Function],
                                    "restart": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "setFieldState": [Function],
                                    "submit": [Function],
                                    "submitError": undefined,
                                    "submitErrors": undefined,
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "subscribe": [Function],
                                    "touched": Object {},
                                    "unregisterField": [Function],
                                    "unregisterInputFile": [Function],
                                    "unsubscribe": [Function],
                                    "updateError": [Function],
                                    "updateValid": [Function],
                                    "valid": true,
                                    "validating": false,
                                    "values": Object {},
                                    "visited": Object {},
                                  }
                                }
                                handleNext={[Function]}
                                handlePrev={[Function]}
                                name={1}
                                nextStep="step-2"
                                title="Step 1"
                              >
                                <WizardBody
                                  className=""
                                >
                                  <ModalBody
                                    bsClass="modal-body"
                                    className="wizard-pf-body clearfix"
                                    componentClass="div"
                                  >
                                    <div
                                      className="wizard-pf-body clearfix modal-body"
                                    >
                                      <WizardRow
                                        className=""
                                      >
                                        <section
                                          className="wizard-pf-row"
                                        >
                                          <WizardMain
                                            className=""
                                          >
                                            <div
                                              className="wizard-pf-main"
                                            >
                                              <div
                                                className="form-horizontal"
                                              />
                                            </div>
                                          </WizardMain>
                                        </section>
                                      </WizardRow>
                                    </div>
                                  </ModalBody>
                                </WizardBody>
                                <WizardStepButtons
                                  buttonLabels={
                                    Object {
                                      "back": "Back",
                                      "cancel": "Cancel",
                                      "next": "Next",
                                      "submit": "Submit",
                                    }
                                  }
                                  disableBack={true}
                                  formOptions={
                                    Object {
                                      "active": undefined,
                                      "afterSilentRegistration": [Function],
                                      "batch": [Function],
                                      "blur": [Function],
                                      "change": [Function],
                                      "destroyOnUnregister": undefined,
                                      "dirty": false,
                                      "dirtyFields": Object {},
                                      "dirtyFieldsSinceLastSubmit": Object {},
                                      "dirtySinceLastSubmit": false,
                                      "error": undefined,
                                      "errors": Object {},
                                      "fieldListeners": Object {
                                        "1607416644871": Object {
                                          "count": 1,
                                          "fields": Object {
                                            "1607416644871": Object {
                                              "afterSubmit": undefined,
                                              "beforeSubmit": undefined,
                                              "isEqual": undefined,
                                              "render": [Function],
                                              "subscription": Object {
                                                "pristine": true,
                                                "submitting": true,
                                                "valid": true,
                                              },
                                              "validate": undefined,
                                            },
                                          },
                                          "validateFields": undefined,
                                        },
                                      },
                                      "fileInputs": Array [],
                                      "focus": [Function],
                                      "getFieldState": [Function],
                                      "getFieldValue": [Function],
                                      "getRegisteredFields": [Function],
                                      "getState": [Function],
                                      "handleSubmit": [Function],
                                      "hasSubmitErrors": false,
                                      "hasValidationErrors": false,
                                      "initialValues": Object {},
                                      "initialize": [Function],
                                      "invalid": false,
                                      "isValidationPaused": [Function],
                                      "modified": Object {},
                                      "modifiedSinceLastSubmit": false,
                                      "onCancel": [Function],
                                      "onReset": [Function],
                                      "onSubmit": [MockFunction],
                                      "pauseValidation": [Function],
                                      "pristine": true,
                                      "registerAsyncValidator": [Function],
                                      "registerField": [Function],
                                      "registerInputFile": [Function],
                                      "registeredFields": Array [],
                                      "renderForm": [Function],
                                      "rerender": [Function],
                                      "reset": [Function],
                                      "resetFieldState": [Function],
                                      "restart": [Function],
                                      "resumeValidation": [Function],
                                      "setConfig": [Function],
                                      "setFieldState": [Function],
                                      "submit": [Function],
                                      "submitError": undefined,
                                      "submitErrors": undefined,
                                      "submitFailed": false,
                                      "submitSucceeded": false,
                                      "submitting": false,
                                      "subscribe": [Function],
                                      "touched": Object {},
                                      "unregisterField": [Function],
                                      "unregisterInputFile": [Function],
                                      "unsubscribe": [Function],
                                      "updateError": [Function],
                                      "updateValid": [Function],
                                      "valid": true,
                                      "validating": false,
                                      "values": Object {},
                                      "visited": Object {},
                                    }
                                  }
                                  handleNext={[Function]}
                                  handlePrev={[Function]}
                                  name={1}
                                  nextStep="step-2"
                                  title="Step 1"
                                >
                                  <WizardFooter
                                    className=""
                                  >
                                    <ModalFooter
                                      bsClass="modal-footer"
                                      className="wizard-pf-footer"
                                      componentClass="div"
                                    >
                                      <div
                                        className="wizard-pf-footer modal-footer"
                                      >
                                        <Button
                                          className="ddorg__pf3-component-mapper__wizard__buttons"
                                          color="secondary"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <Button
                                            active={false}
                                            block={false}
                                            bsClass="btn"
                                            bsStyle="default"
                                            className="ddorg__pf3-component-mapper__wizard__buttons"
                                            color="secondary"
                                            disabled={false}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="ddorg__pf3-component-mapper__wizard__buttons btn btn-default"
                                              color="secondary"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              Cancel
                                            </button>
                                          </Button>
                                        </Button>
                                        <Button
                                          className="margin-left-3"
                                          disabled={true}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <Button
                                            active={false}
                                            block={false}
                                            bsClass="btn"
                                            bsStyle="default"
                                            className="margin-left-3"
                                            disabled={true}
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="margin-left-3 btn btn-default"
                                              disabled={true}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <Icon
                                                name="angle-left"
                                                type="fa"
                                              >
                                                <FontAwesome
                                                  name="angle-left"
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="fa fa-angle-left"
                                                  />
                                                </FontAwesome>
                                              </Icon>
                                              Back
                                            </button>
                                          </Button>
                                        </Button>
                                        <SimpleNext
                                          afterSilentRegistration={[Function]}
                                          batch={[Function]}
                                          blur={[Function]}
                                          buttonLabels={
                                            Object {
                                              "back": "Back",
                                              "cancel": "Cancel",
                                              "next": "Next",
                                              "submit": "Submit",
                                            }
                                          }
                                          change={[Function]}
                                          dirty={false}
                                          dirtyFields={Object {}}
                                          dirtyFieldsSinceLastSubmit={Object {}}
                                          dirtySinceLastSubmit={false}
                                          errors={Object {}}
                                          fieldListeners={
                                            Object {
                                              "1607416644871": Object {
                                                "count": 1,
                                                "fields": Object {
                                                  "1607416644871": Object {
                                                    "afterSubmit": undefined,
                                                    "beforeSubmit": undefined,
                                                    "isEqual": undefined,
                                                    "render": [Function],
                                                    "subscription": Object {
                                                      "pristine": true,
                                                      "submitting": true,
                                                      "valid": true,
                                                    },
                                                    "validate": undefined,
                                                  },
                                                },
                                                "validateFields": undefined,
                                              },
                                            }
                                          }
                                          fileInputs={Array []}
                                          focus={[Function]}
                                          getFieldState={[Function]}
                                          getFieldValue={[Function]}
                                          getRegisteredFields={[Function]}
                                          getState={[Function]}
                                          handleNext={[Function]}
                                          hasSubmitErrors={false}
                                          hasValidationErrors={false}
                                          initialValues={Object {}}
                                          initialize={[Function]}
                                          invalid={false}
                                          isValidationPaused={[Function]}
                                          modified={Object {}}
                                          modifiedSinceLastSubmit={false}
                                          next="step-2"
                                          onCancel={[Function]}
                                          onReset={[Function]}
                                          onSubmit={[MockFunction]}
                                          pauseValidation={[Function]}
                                          pristine={true}
                                          registerAsyncValidator={[Function]}
                                          registerField={[Function]}
                                          registerInputFile={[Function]}
                                          registeredFields={Array []}
                                          renderForm={[Function]}
                                          rerender={[Function]}
                                          reset={[Function]}
                                          resetFieldState={[Function]}
                                          restart={[Function]}
                                          resumeValidation={[Function]}
                                          setConfig={[Function]}
                                          setFieldState={[Function]}
                                          submit={[Function]}
                                          submitFailed={false}
                                          submitSucceeded={false}
                                          submitting={false}
                                          subscribe={[Function]}
                                          touched={Object {}}
                                          unregisterField={[Function]}
                                          unregisterInputFile={[Function]}
                                          unsubscribe={[Function]}
                                          updateError={[Function]}
                                          updateValid={[Function]}
                                          valid={true}
                                          validating={false}
                                          values={Object {}}
                                          visited={Object {}}
                                        >
                                          <Button
                                            bsStyle="primary"
                                            className="margin-left-3"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <Button
                                              active={false}
                                              block={false}
                                              bsClass="btn"
                                              bsStyle="primary"
                                              className="margin-left-3"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <button
                                                className="margin-left-3 btn btn-primary"
                                                disabled={false}
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                Next
                                                <Icon
                                                  name="angle-right"
                                                  type="fa"
                                                >
                                                  <FontAwesome
                                                    name="angle-right"
                                                  >
                                                    <span
                                                      aria-hidden={true}
                                                      className="fa fa-angle-right"
                                                    />
                                                  </FontAwesome>
                                                </Icon>
                                              </button>
                                            </Button>
                                          </Button>
                                        </SimpleNext>
                                      </div>
                                    </ModalFooter>
                                  </WizardFooter>
                                </WizardStepButtons>
                              </WizardStep>
                            </div>
                          </WizardInternal>
                        </Wizard>
                      </WizardFinal>
                    </FormFieldHideWrapper>
                  </FormConditionWrapper>
                </SingleField>
              </form>
            </Form>
          </FormWrapper>
        </FormTemplate>
      </PF3FormTemplate>
    </FormTemplate>
  </Component>
</FormRenderer>
`;
