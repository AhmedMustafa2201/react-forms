// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Wizard /> should render correctly and unmount 1`] = `
<FormRenderer
  clearOnUnmount={false}
  componentMapper={
    Object {
      "checkbox": [Function],
      "date-picker": [Function],
      "field-array": [Function],
      "plain-text": [Function],
      "radio": [Function],
      "select": [Function],
      "sub-form": [Function],
      "switch": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea": [Function],
      "time-picker": [Function],
      "wizard": [Function],
    }
  }
  formTemplate={[Function]}
  initialValues={Object {}}
  onCancel={[MockFunction]}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "wizard",
          "fields": Array [
            Object {
              "fields": Array [
                Object {
                  "component": "text-field",
                  "name": "foo-field",
                },
              ],
              "name": "foo",
              "nextStep": "2",
              "stepKey": "1",
              "title": "foo-step",
            },
            Object {
              "fields": Array [
                Object {
                  "component": "text-field",
                  "name": "bar-field",
                },
              ],
              "name": "bar",
              "stepKey": "2",
              "title": "bar-step",
            },
          ],
          "name": "wizard",
        },
      ],
    }
  }
>
  <ReactFinalForm
    decorators={
      Array [
        [Function],
      ]
    }
    initialValues={Object {}}
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <Component
      formFields={
        Array [
          <SingleField
            component="wizard"
            fields={
              Array [
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "foo-field",
                    },
                  ],
                  "name": "foo",
                  "nextStep": "2",
                  "stepKey": "1",
                  "title": "foo-step",
                },
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "bar-field",
                    },
                  ],
                  "name": "bar",
                  "stepKey": "2",
                  "title": "bar-step",
                },
              ]
            }
            name="wizard"
          />,
        ]
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "wizard",
              "fields": Array [
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "foo-field",
                    },
                  ],
                  "name": "foo",
                  "nextStep": "2",
                  "stepKey": "1",
                  "title": "foo-step",
                },
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "bar-field",
                    },
                  ],
                  "name": "bar",
                  "stepKey": "2",
                  "title": "bar-step",
                },
              ],
              "name": "wizard",
            },
          ],
        }
      }
    >
      <Form
        onSubmit={[Function]}
      >
        <form
          className="pf-c-form"
          noValidate={true}
          onSubmit={[Function]}
        >
          <SingleField
            component="wizard"
            fields={
              Array [
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "foo-field",
                    },
                  ],
                  "name": "foo",
                  "nextStep": "2",
                  "stepKey": "1",
                  "title": "foo-step",
                },
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "bar-field",
                    },
                  ],
                  "name": "bar",
                  "stepKey": "2",
                  "title": "bar-step",
                },
              ]
            }
            key="wizard"
            name="wizard"
          >
            <FormConditionWrapper>
              <FormFieldHideWrapper
                hideField={false}
              >
                <FieldWrapper
                  component={[Function]}
                  componentType="wizard"
                  fields={
                    Array [
                      Object {
                        "fields": Array [
                          Object {
                            "component": "text-field",
                            "name": "foo-field",
                          },
                        ],
                        "name": "foo",
                        "nextStep": "2",
                        "stepKey": "1",
                        "title": "foo-step",
                      },
                      Object {
                        "fields": Array [
                          Object {
                            "component": "text-field",
                            "name": "bar-field",
                          },
                        ],
                        "name": "bar",
                        "stepKey": "2",
                        "title": "bar-step",
                      },
                    ]
                  }
                  name="wizard"
                >
                  <WizardFunction
                    buttonLabels={Object {}}
                    fields={
                      Array [
                        Object {
                          "fields": Array [
                            Object {
                              "component": "text-field",
                              "name": "foo-field",
                            },
                          ],
                          "name": "foo",
                          "nextStep": "2",
                          "stepKey": "1",
                          "title": "foo-step",
                        },
                        Object {
                          "fields": Array [
                            Object {
                              "component": "text-field",
                              "name": "bar-field",
                            },
                          ],
                          "name": "bar",
                          "stepKey": "2",
                          "title": "bar-step",
                        },
                      ]
                    }
                    name="wizard"
                    validate={[Function]}
                  >
                    <Wizard
                      buttonLabels={
                        Object {
                          "back": "Back",
                          "cancel": "Cancel",
                          "next": "Next",
                          "submit": "Submit",
                        }
                      }
                      fields={
                        Array [
                          Object {
                            "fields": Array [
                              Object {
                                "component": "text-field",
                                "name": "foo-field",
                              },
                            ],
                            "name": "foo",
                            "nextStep": "2",
                            "stepKey": "1",
                            "title": "foo-step",
                          },
                          Object {
                            "fields": Array [
                              Object {
                                "component": "text-field",
                                "name": "bar-field",
                              },
                            ],
                            "name": "bar",
                            "stepKey": "2",
                            "title": "bar-step",
                          },
                        ]
                      }
                      name="wizard"
                      validate={[Function]}
                    >
                      <Modal>
                        <div
                          className="pf-c-wizard no-shadow   "
                          onKeyDown={[Function]}
                          role="dialog"
                        >
                          <div
                            className="pf-c-wizard__outer-wrap"
                          >
                            <WizardNav>
                              <nav
                                className="pf-c-wizard__nav"
                              >
                                <ol
                                  className="pf-c-wizard__nav-list"
                                >
                                  <FormSpy>
                                    <WizardNavigation
                                      activeStepIndex={0}
                                      formOptions={
                                        Object {
                                          "batch": [Function],
                                          "blur": [Function],
                                          "change": [Function],
                                          "clearOnUnmount": false,
                                          "clearedValue": undefined,
                                          "concat": [Function],
                                          "destroyOnUnregister": false,
                                          "focus": [Function],
                                          "getFieldState": [Function],
                                          "getRegisteredFields": [Function],
                                          "getState": [Function],
                                          "handleSubmit": [Function],
                                          "initialize": [Function],
                                          "insert": [Function],
                                          "isValidationPaused": [Function],
                                          "move": [Function],
                                          "onCancel": [MockFunction],
                                          "onReset": undefined,
                                          "onSubmit": [MockFunction],
                                          "pauseValidation": [Function],
                                          "pop": [Function],
                                          "pristine": true,
                                          "push": [Function],
                                          "registerField": [Function],
                                          "remove": [Function],
                                          "removeBatch": [Function],
                                          "renderForm": [Function],
                                          "reset": [Function],
                                          "resetFieldState": [Function],
                                          "resumeValidation": [Function],
                                          "setConfig": [Function],
                                          "shift": [Function],
                                          "submit": [Function],
                                          "subscribe": [Function],
                                          "swap": [Function],
                                          "unshift": [Function],
                                          "update": [Function],
                                          "valid": true,
                                        }
                                      }
                                      isDynamic={false}
                                      jumpToStep={[Function]}
                                      maxStepIndex={0}
                                      navSchema={
                                        Array [
                                          Object {
                                            "index": 0,
                                            "primary": true,
                                            "substepOf": undefined,
                                            "title": "foo-step",
                                          },
                                          Object {
                                            "index": 1,
                                            "primary": true,
                                            "substepOf": undefined,
                                            "title": "bar-step",
                                          },
                                        ]
                                      }
                                      setPrevSteps={[Function]}
                                      values={Object {}}
                                    >
                                      <Component
                                        activeStepIndex={0}
                                        formOptions={
                                          Object {
                                            "batch": [Function],
                                            "blur": [Function],
                                            "change": [Function],
                                            "clearOnUnmount": false,
                                            "clearedValue": undefined,
                                            "concat": [Function],
                                            "destroyOnUnregister": false,
                                            "focus": [Function],
                                            "getFieldState": [Function],
                                            "getRegisteredFields": [Function],
                                            "getState": [Function],
                                            "handleSubmit": [Function],
                                            "initialize": [Function],
                                            "insert": [Function],
                                            "isValidationPaused": [Function],
                                            "move": [Function],
                                            "onCancel": [MockFunction],
                                            "onReset": undefined,
                                            "onSubmit": [MockFunction],
                                            "pauseValidation": [Function],
                                            "pop": [Function],
                                            "pristine": true,
                                            "push": [Function],
                                            "registerField": [Function],
                                            "remove": [Function],
                                            "removeBatch": [Function],
                                            "renderForm": [Function],
                                            "reset": [Function],
                                            "resetFieldState": [Function],
                                            "resumeValidation": [Function],
                                            "setConfig": [Function],
                                            "shift": [Function],
                                            "submit": [Function],
                                            "subscribe": [Function],
                                            "swap": [Function],
                                            "unshift": [Function],
                                            "update": [Function],
                                            "valid": true,
                                          }
                                        }
                                        jumpToStep={[Function]}
                                        maxStepIndex={0}
                                        navSchema={
                                          Array [
                                            Object {
                                              "index": 0,
                                              "primary": true,
                                              "substepOf": undefined,
                                              "title": "foo-step",
                                            },
                                            Object {
                                              "index": 1,
                                              "primary": true,
                                              "substepOf": undefined,
                                              "title": "bar-step",
                                            },
                                          ]
                                        }
                                      >
                                        <WizardNavItem
                                          isCurrent={true}
                                          isDisabled={false}
                                          key="foo-step"
                                          onNavItemClick={[Function]}
                                          step={0}
                                          text="foo-step"
                                        >
                                          <li
                                            className="pf-c-wizard__nav-item"
                                          >
                                            <a
                                              aria-current="page"
                                              aria-disabled={false}
                                              className="pf-c-wizard__nav-link pf-m-current"
                                              onClick={[Function]}
                                            >
                                              foo-step
                                            </a>
                                          </li>
                                        </WizardNavItem>
                                        <WizardNavItem
                                          isCurrent={false}
                                          isDisabled={true}
                                          key="bar-step"
                                          onNavItemClick={[Function]}
                                          step={1}
                                          text="bar-step"
                                        >
                                          <li
                                            className="pf-c-wizard__nav-item"
                                          >
                                            <a
                                              aria-current={false}
                                              aria-disabled={true}
                                              className="pf-c-wizard__nav-link pf-m-disabled"
                                              onClick={[Function]}
                                              tabIndex={-1}
                                            >
                                              bar-step
                                            </a>
                                          </li>
                                        </WizardNavItem>
                                      </Component>
                                    </WizardNavigation>
                                  </FormSpy>
                                </ol>
                              </nav>
                            </WizardNav>
                            <WizardStep
                              buttonLabels={
                                Object {
                                  "back": "Back",
                                  "cancel": "Cancel",
                                  "next": "Next",
                                  "submit": "Submit",
                                }
                              }
                              disableBack={true}
                              fields={
                                Array [
                                  Object {
                                    "component": "text-field",
                                    "name": "foo-field",
                                  },
                                ]
                              }
                              formOptions={
                                Object {
                                  "batch": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearOnUnmount": false,
                                  "clearedValue": undefined,
                                  "concat": [Function],
                                  "destroyOnUnregister": false,
                                  "focus": [Function],
                                  "getFieldState": [Function],
                                  "getRegisteredFields": [Function],
                                  "getState": [Function],
                                  "handleSubmit": [Function],
                                  "initialize": [Function],
                                  "insert": [Function],
                                  "isValidationPaused": [Function],
                                  "move": [Function],
                                  "onCancel": [MockFunction],
                                  "onReset": undefined,
                                  "onSubmit": [MockFunction],
                                  "pauseValidation": [Function],
                                  "pop": [Function],
                                  "pristine": true,
                                  "push": [Function],
                                  "registerField": [Function],
                                  "remove": [Function],
                                  "removeBatch": [Function],
                                  "renderForm": [Function],
                                  "reset": [Function],
                                  "resetFieldState": [Function],
                                  "resumeValidation": [Function],
                                  "setConfig": [Function],
                                  "shift": [Function],
                                  "submit": [Function],
                                  "subscribe": [Function],
                                  "swap": [Function],
                                  "unshift": [Function],
                                  "update": [Function],
                                  "valid": true,
                                }
                              }
                              handleNext={[Function]}
                              handlePrev={[Function]}
                              name="foo"
                              nextStep="2"
                              stepKey="1"
                              title="foo-step"
                            >
                              <WizardBody
                                hasBodyPadding={true}
                              >
                                <main
                                  className="pf-c-wizard__main"
                                >
                                  <div
                                    className="pf-c-wizard__main-body"
                                  >
                                    <div
                                      className="pf-c-form"
                                    >
                                      <SingleField
                                        component="text-field"
                                        key="foo-field"
                                        name="foo-field"
                                      >
                                        <FormConditionWrapper>
                                          <FormFieldHideWrapper
                                            hideField={false}
                                          >
                                            <FieldWrapper
                                              component={[Function]}
                                              componentType="text-field"
                                              name="foo-field"
                                            >
                                              <TextField
                                                name="foo-field"
                                                validate={[Function]}
                                              >
                                                <FormGroup
                                                  id="foo-field"
                                                  isRequired={false}
                                                  meta={
                                                    Object {
                                                      "active": false,
                                                      "data": Object {},
                                                      "dirty": false,
                                                      "dirtySinceLastSubmit": false,
                                                      "error": undefined,
                                                      "initial": undefined,
                                                      "invalid": false,
                                                      "length": undefined,
                                                      "modified": false,
                                                      "pristine": true,
                                                      "submitError": undefined,
                                                      "submitFailed": false,
                                                      "submitSucceeded": false,
                                                      "submitting": false,
                                                      "touched": false,
                                                      "valid": true,
                                                      "validating": false,
                                                      "visited": false,
                                                    }
                                                  }
                                                >
                                                  <FormGroup
                                                    fieldId="foo-field"
                                                    isRequired={false}
                                                    isValid={true}
                                                  >
                                                    <div
                                                      className="pf-c-form__group"
                                                    >
                                                      <ForwardRef
                                                        id="foo-field"
                                                        name="foo-field"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        value=""
                                                      >
                                                        <TextInputBase
                                                          aria-label={null}
                                                          className=""
                                                          id="foo-field"
                                                          innerRef={null}
                                                          isDisabled={false}
                                                          isReadOnly={false}
                                                          isRequired={false}
                                                          isValid={true}
                                                          name="foo-field"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          type="text"
                                                          validated="default"
                                                          value=""
                                                        >
                                                          <input
                                                            aria-invalid={false}
                                                            aria-label={null}
                                                            className="pf-c-form-control"
                                                            disabled={false}
                                                            id="foo-field"
                                                            name="foo-field"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            readOnly={false}
                                                            required={false}
                                                            type="text"
                                                            value=""
                                                          />
                                                        </TextInputBase>
                                                      </ForwardRef>
                                                    </div>
                                                  </FormGroup>
                                                </FormGroup>
                                              </TextField>
                                            </FieldWrapper>
                                          </FormFieldHideWrapper>
                                        </FormConditionWrapper>
                                      </SingleField>
                                    </div>
                                  </div>
                                </main>
                              </WizardBody>
                              <WizardStepButtons
                                buttonLabels={
                                  Object {
                                    "back": "Back",
                                    "cancel": "Cancel",
                                    "next": "Next",
                                    "submit": "Submit",
                                  }
                                }
                                disableBack={true}
                                formOptions={
                                  Object {
                                    "batch": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearOnUnmount": false,
                                    "clearedValue": undefined,
                                    "concat": [Function],
                                    "destroyOnUnregister": false,
                                    "focus": [Function],
                                    "getFieldState": [Function],
                                    "getRegisteredFields": [Function],
                                    "getState": [Function],
                                    "handleSubmit": [Function],
                                    "initialize": [Function],
                                    "insert": [Function],
                                    "isValidationPaused": [Function],
                                    "move": [Function],
                                    "onCancel": [MockFunction],
                                    "onReset": undefined,
                                    "onSubmit": [MockFunction],
                                    "pauseValidation": [Function],
                                    "pop": [Function],
                                    "pristine": true,
                                    "push": [Function],
                                    "registerField": [Function],
                                    "remove": [Function],
                                    "removeBatch": [Function],
                                    "renderForm": [Function],
                                    "reset": [Function],
                                    "resetFieldState": [Function],
                                    "resumeValidation": [Function],
                                    "setConfig": [Function],
                                    "shift": [Function],
                                    "submit": [Function],
                                    "subscribe": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                    "update": [Function],
                                    "valid": true,
                                  }
                                }
                                handleNext={[Function]}
                                handlePrev={[Function]}
                                name="foo"
                                nextStep="2"
                                stepKey="1"
                              >
                                <footer
                                  className="pf-c-wizard__footer "
                                >
                                  <NextButton
                                    batch={[Function]}
                                    blur={[Function]}
                                    change={[Function]}
                                    clearOnUnmount={false}
                                    concat={[Function]}
                                    destroyOnUnregister={false}
                                    focus={[Function]}
                                    getFieldState={[Function]}
                                    getRegisteredFields={[Function]}
                                    getState={[Function]}
                                    handleNext={[Function]}
                                    handleSubmit={[Function]}
                                    initialize={[Function]}
                                    insert={[Function]}
                                    isValidationPaused={[Function]}
                                    move={[Function]}
                                    nextLabel="Next"
                                    nextStep="2"
                                    onCancel={[MockFunction]}
                                    onSubmit={[MockFunction]}
                                    pauseValidation={[Function]}
                                    pop={[Function]}
                                    pristine={true}
                                    push={[Function]}
                                    registerField={[Function]}
                                    remove={[Function]}
                                    removeBatch={[Function]}
                                    renderForm={[Function]}
                                    reset={[Function]}
                                    resetFieldState={[Function]}
                                    resumeValidation={[Function]}
                                    setConfig={[Function]}
                                    shift={[Function]}
                                    submit={[Function]}
                                    submitLabel="Submit"
                                    subscribe={[Function]}
                                    swap={[Function]}
                                    unshift={[Function]}
                                    update={[Function]}
                                    valid={true}
                                  >
                                    <SimpleNext
                                      batch={[Function]}
                                      blur={[Function]}
                                      change={[Function]}
                                      clearOnUnmount={false}
                                      concat={[Function]}
                                      destroyOnUnregister={false}
                                      focus={[Function]}
                                      getFieldState={[Function]}
                                      getRegisteredFields={[Function]}
                                      getState={[Function]}
                                      handleNext={[Function]}
                                      initialize={[Function]}
                                      insert={[Function]}
                                      isValidationPaused={[Function]}
                                      move={[Function]}
                                      nextLabel="Next"
                                      nextStep="2"
                                      onCancel={[MockFunction]}
                                      onSubmit={[MockFunction]}
                                      pauseValidation={[Function]}
                                      pop={[Function]}
                                      pristine={true}
                                      push={[Function]}
                                      registerField={[Function]}
                                      remove={[Function]}
                                      removeBatch={[Function]}
                                      renderForm={[Function]}
                                      reset={[Function]}
                                      resetFieldState={[Function]}
                                      resumeValidation={[Function]}
                                      setConfig={[Function]}
                                      shift={[Function]}
                                      submit={[Function]}
                                      subscribe={[Function]}
                                      swap={[Function]}
                                      unshift={[Function]}
                                      update={[Function]}
                                      valid={true}
                                    >
                                      <Component
                                        isDisabled={false}
                                        onClick={[Function]}
                                        type="button"
                                        variant="primary"
                                      >
                                        <ComponentWithOuia
                                          component={[Function]}
                                          componentProps={
                                            Object {
                                              "children": "Next",
                                              "isDisabled": false,
                                              "onClick": [Function],
                                              "type": "button",
                                              "variant": "primary",
                                            }
                                          }
                                          consumerContext={null}
                                        >
                                          <Button
                                            isDisabled={false}
                                            onClick={[Function]}
                                            ouiaContext={
                                              Object {
                                                "isOuia": false,
                                                "ouiaId": null,
                                              }
                                            }
                                            type="button"
                                            variant="primary"
                                          >
                                            <button
                                              aria-disabled={null}
                                              aria-label={null}
                                              className="pf-c-button pf-m-primary"
                                              disabled={false}
                                              onClick={[Function]}
                                              tabIndex={null}
                                              type="button"
                                            >
                                              Next
                                            </button>
                                          </Button>
                                        </ComponentWithOuia>
                                      </Component>
                                    </SimpleNext>
                                  </NextButton>
                                  <Component
                                    isDisabled={true}
                                    onClick={[Function]}
                                    type="button"
                                    variant="secondary"
                                  >
                                    <ComponentWithOuia
                                      component={[Function]}
                                      componentProps={
                                        Object {
                                          "children": "Back",
                                          "isDisabled": true,
                                          "onClick": [Function],
                                          "type": "button",
                                          "variant": "secondary",
                                        }
                                      }
                                      consumerContext={null}
                                    >
                                      <Button
                                        isDisabled={true}
                                        onClick={[Function]}
                                        ouiaContext={
                                          Object {
                                            "isOuia": false,
                                            "ouiaId": null,
                                          }
                                        }
                                        type="button"
                                        variant="secondary"
                                      >
                                        <button
                                          aria-disabled={null}
                                          aria-label={null}
                                          className="pf-c-button pf-m-secondary"
                                          disabled={true}
                                          onClick={[Function]}
                                          tabIndex={null}
                                          type="button"
                                        >
                                          Back
                                        </button>
                                      </Button>
                                    </ComponentWithOuia>
                                  </Component>
                                  <Component
                                    onClick={[Function]}
                                    type="button"
                                    variant="link"
                                  >
                                    <ComponentWithOuia
                                      component={[Function]}
                                      componentProps={
                                        Object {
                                          "children": "Cancel",
                                          "onClick": [Function],
                                          "type": "button",
                                          "variant": "link",
                                        }
                                      }
                                      consumerContext={null}
                                    >
                                      <Button
                                        onClick={[Function]}
                                        ouiaContext={
                                          Object {
                                            "isOuia": false,
                                            "ouiaId": null,
                                          }
                                        }
                                        type="button"
                                        variant="link"
                                      >
                                        <button
                                          aria-disabled={null}
                                          aria-label={null}
                                          className="pf-c-button pf-m-link"
                                          disabled={false}
                                          onClick={[Function]}
                                          tabIndex={null}
                                          type="button"
                                        >
                                          Cancel
                                        </button>
                                      </Button>
                                    </ComponentWithOuia>
                                  </Component>
                                </footer>
                              </WizardStepButtons>
                            </WizardStep>
                          </div>
                        </div>
                      </Modal>
                    </Wizard>
                  </WizardFunction>
                </FieldWrapper>
              </FormFieldHideWrapper>
            </FormConditionWrapper>
          </SingleField>
        </form>
      </Form>
    </Component>
  </ReactFinalForm>
</FormRenderer>
`;

exports[`<Wizard /> should render correctly and unmount 2`] = `null`;

exports[`<Wizard /> should render correctly in modal and unmount 1`] = `
<FormRenderer
  clearOnUnmount={false}
  componentMapper={
    Object {
      "checkbox": [Function],
      "date-picker": [Function],
      "field-array": [Function],
      "plain-text": [Function],
      "radio": [Function],
      "select": [Function],
      "sub-form": [Function],
      "switch": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea": [Function],
      "time-picker": [Function],
      "wizard": [Function],
    }
  }
  formTemplate={[Function]}
  initialValues={Object {}}
  onCancel={[MockFunction]}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "wizard",
          "fields": Array [
            Object {
              "fields": Array [
                Object {
                  "component": "text-field",
                  "name": "foo-field",
                },
              ],
              "name": "foo",
              "nextStep": "2",
              "stepKey": "1",
              "title": "foo-step",
            },
            Object {
              "fields": Array [
                Object {
                  "component": "text-field",
                  "name": "bar-field",
                },
              ],
              "name": "bar",
              "stepKey": "2",
              "title": "bar-step",
            },
          ],
          "inModal": true,
          "name": "wizard",
        },
      ],
    }
  }
>
  <ReactFinalForm
    decorators={
      Array [
        [Function],
      ]
    }
    initialValues={Object {}}
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <Component
      formFields={
        Array [
          <SingleField
            component="wizard"
            fields={
              Array [
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "foo-field",
                    },
                  ],
                  "name": "foo",
                  "nextStep": "2",
                  "stepKey": "1",
                  "title": "foo-step",
                },
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "bar-field",
                    },
                  ],
                  "name": "bar",
                  "stepKey": "2",
                  "title": "bar-step",
                },
              ]
            }
            inModal={true}
            name="wizard"
          />,
        ]
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "wizard",
              "fields": Array [
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "foo-field",
                    },
                  ],
                  "name": "foo",
                  "nextStep": "2",
                  "stepKey": "1",
                  "title": "foo-step",
                },
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "bar-field",
                    },
                  ],
                  "name": "bar",
                  "stepKey": "2",
                  "title": "bar-step",
                },
              ],
              "inModal": true,
              "name": "wizard",
            },
          ],
        }
      }
    >
      <Form
        onSubmit={[Function]}
      >
        <form
          className="pf-c-form"
          noValidate={true}
          onSubmit={[Function]}
        >
          <SingleField
            component="wizard"
            fields={
              Array [
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "foo-field",
                    },
                  ],
                  "name": "foo",
                  "nextStep": "2",
                  "stepKey": "1",
                  "title": "foo-step",
                },
                Object {
                  "fields": Array [
                    Object {
                      "component": "text-field",
                      "name": "bar-field",
                    },
                  ],
                  "name": "bar",
                  "stepKey": "2",
                  "title": "bar-step",
                },
              ]
            }
            inModal={true}
            key="wizard"
            name="wizard"
          >
            <FormConditionWrapper>
              <FormFieldHideWrapper
                hideField={false}
              >
                <FieldWrapper
                  component={[Function]}
                  componentType="wizard"
                  fields={
                    Array [
                      Object {
                        "fields": Array [
                          Object {
                            "component": "text-field",
                            "name": "foo-field",
                          },
                        ],
                        "name": "foo",
                        "nextStep": "2",
                        "stepKey": "1",
                        "title": "foo-step",
                      },
                      Object {
                        "fields": Array [
                          Object {
                            "component": "text-field",
                            "name": "bar-field",
                          },
                        ],
                        "name": "bar",
                        "stepKey": "2",
                        "title": "bar-step",
                      },
                    ]
                  }
                  inModal={true}
                  name="wizard"
                >
                  <WizardFunction
                    buttonLabels={Object {}}
                    fields={
                      Array [
                        Object {
                          "fields": Array [
                            Object {
                              "component": "text-field",
                              "name": "foo-field",
                            },
                          ],
                          "name": "foo",
                          "nextStep": "2",
                          "stepKey": "1",
                          "title": "foo-step",
                        },
                        Object {
                          "fields": Array [
                            Object {
                              "component": "text-field",
                              "name": "bar-field",
                            },
                          ],
                          "name": "bar",
                          "stepKey": "2",
                          "title": "bar-step",
                        },
                      ]
                    }
                    inModal={true}
                    name="wizard"
                    validate={[Function]}
                  >
                    <Wizard
                      buttonLabels={
                        Object {
                          "back": "Back",
                          "cancel": "Cancel",
                          "next": "Next",
                          "submit": "Submit",
                        }
                      }
                      fields={
                        Array [
                          Object {
                            "fields": Array [
                              Object {
                                "component": "text-field",
                                "name": "foo-field",
                              },
                            ],
                            "name": "foo",
                            "nextStep": "2",
                            "stepKey": "1",
                            "title": "foo-step",
                          },
                          Object {
                            "fields": Array [
                              Object {
                                "component": "text-field",
                                "name": "bar-field",
                              },
                            ],
                            "name": "bar",
                            "stepKey": "2",
                            "title": "bar-step",
                          },
                        ]
                      }
                      inModal={true}
                      name="wizard"
                      validate={[Function]}
                    >
                      <Modal
                        container={
                          <div>
                            <div
                              class="pf-c-backdrop"
                            >
                              <div
                                class="pf-l-bullseye"
                              >
                                <div
                                  aria-modal="true"
                                  class="pf-c-wizard    "
                                  role="dialog"
                                >
                                  <div
                                    class="pf-c-wizard__outer-wrap"
                                  >
                                    <nav
                                      class="pf-c-wizard__nav"
                                    >
                                      <ol
                                        class="pf-c-wizard__nav-list"
                                      >
                                        <li
                                          class="pf-c-wizard__nav-item"
                                        >
                                          <a
                                            aria-current="page"
                                            aria-disabled="false"
                                            class="pf-c-wizard__nav-link pf-m-current"
                                          >
                                            foo-step
                                          </a>
                                        </li>
                                        <li
                                          class="pf-c-wizard__nav-item"
                                        >
                                          <a
                                            aria-current="false"
                                            aria-disabled="true"
                                            class="pf-c-wizard__nav-link pf-m-disabled"
                                            tabindex="-1"
                                          >
                                            bar-step
                                          </a>
                                        </li>
                                      </ol>
                                    </nav>
                                    <main
                                      class="pf-c-wizard__main"
                                    >
                                      <div
                                        class="pf-c-wizard__main-body"
                                      >
                                        <div
                                          class="pf-c-form"
                                        >
                                          <div
                                            class="pf-c-form__group"
                                          >
                                            <input
                                              aria-invalid="false"
                                              class="pf-c-form-control"
                                              id="foo-field"
                                              name="foo-field"
                                              type="text"
                                              value=""
                                            />
                                            
                                          </div>
                                        </div>
                                      </div>
                                    </main>
                                    <footer
                                      class="pf-c-wizard__footer "
                                    >
                                      <button
                                        class="pf-c-button pf-m-primary"
                                        type="button"
                                      >
                                        Next
                                      </button>
                                      <button
                                        class="pf-c-button pf-m-secondary"
                                        disabled=""
                                        type="button"
                                      >
                                        Back
                                      </button>
                                      <button
                                        class="pf-c-button pf-m-link"
                                        type="button"
                                      >
                                        Cancel
                                      </button>
                                    </footer>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        }
                        inModal={true}
                      >
                        <Portal
                          containerInfo={
                            <div>
                              <div
                                class="pf-c-backdrop"
                              >
                                <div
                                  class="pf-l-bullseye"
                                >
                                  <div
                                    aria-modal="true"
                                    class="pf-c-wizard    "
                                    role="dialog"
                                  >
                                    <div
                                      class="pf-c-wizard__outer-wrap"
                                    >
                                      <nav
                                        class="pf-c-wizard__nav"
                                      >
                                        <ol
                                          class="pf-c-wizard__nav-list"
                                        >
                                          <li
                                            class="pf-c-wizard__nav-item"
                                          >
                                            <a
                                              aria-current="page"
                                              aria-disabled="false"
                                              class="pf-c-wizard__nav-link pf-m-current"
                                            >
                                              foo-step
                                            </a>
                                          </li>
                                          <li
                                            class="pf-c-wizard__nav-item"
                                          >
                                            <a
                                              aria-current="false"
                                              aria-disabled="true"
                                              class="pf-c-wizard__nav-link pf-m-disabled"
                                              tabindex="-1"
                                            >
                                              bar-step
                                            </a>
                                          </li>
                                        </ol>
                                      </nav>
                                      <main
                                        class="pf-c-wizard__main"
                                      >
                                        <div
                                          class="pf-c-wizard__main-body"
                                        >
                                          <div
                                            class="pf-c-form"
                                          >
                                            <div
                                              class="pf-c-form__group"
                                            >
                                              <input
                                                aria-invalid="false"
                                                class="pf-c-form-control"
                                                id="foo-field"
                                                name="foo-field"
                                                type="text"
                                                value=""
                                              />
                                              
                                            </div>
                                          </div>
                                        </div>
                                      </main>
                                      <footer
                                        class="pf-c-wizard__footer "
                                      >
                                        <button
                                          class="pf-c-button pf-m-primary"
                                          type="button"
                                        >
                                          Next
                                        </button>
                                        <button
                                          class="pf-c-button pf-m-secondary"
                                          disabled=""
                                          type="button"
                                        >
                                          Back
                                        </button>
                                        <button
                                          class="pf-c-button pf-m-link"
                                          type="button"
                                        >
                                          Cancel
                                        </button>
                                      </footer>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          }
                        >
                          <Backdrop>
                            <div
                              className="pf-c-backdrop"
                            >
                              <Bullseye>
                                <div
                                  className="pf-l-bullseye"
                                >
                                  <div
                                    aria-modal="true"
                                    className="pf-c-wizard    "
                                    onKeyDown={[Function]}
                                    role="dialog"
                                  >
                                    <div
                                      className="pf-c-wizard__outer-wrap"
                                    >
                                      <WizardNav>
                                        <nav
                                          className="pf-c-wizard__nav"
                                        >
                                          <ol
                                            className="pf-c-wizard__nav-list"
                                          >
                                            <FormSpy>
                                              <WizardNavigation
                                                activeStepIndex={0}
                                                formOptions={
                                                  Object {
                                                    "batch": [Function],
                                                    "blur": [Function],
                                                    "change": [Function],
                                                    "clearOnUnmount": false,
                                                    "clearedValue": undefined,
                                                    "concat": [Function],
                                                    "destroyOnUnregister": false,
                                                    "focus": [Function],
                                                    "getFieldState": [Function],
                                                    "getRegisteredFields": [Function],
                                                    "getState": [Function],
                                                    "handleSubmit": [Function],
                                                    "initialize": [Function],
                                                    "insert": [Function],
                                                    "isValidationPaused": [Function],
                                                    "move": [Function],
                                                    "onCancel": [MockFunction],
                                                    "onReset": undefined,
                                                    "onSubmit": [MockFunction],
                                                    "pauseValidation": [Function],
                                                    "pop": [Function],
                                                    "pristine": true,
                                                    "push": [Function],
                                                    "registerField": [Function],
                                                    "remove": [Function],
                                                    "removeBatch": [Function],
                                                    "renderForm": [Function],
                                                    "reset": [Function],
                                                    "resetFieldState": [Function],
                                                    "resumeValidation": [Function],
                                                    "setConfig": [Function],
                                                    "shift": [Function],
                                                    "submit": [Function],
                                                    "subscribe": [Function],
                                                    "swap": [Function],
                                                    "unshift": [Function],
                                                    "update": [Function],
                                                    "valid": true,
                                                  }
                                                }
                                                isDynamic={false}
                                                jumpToStep={[Function]}
                                                maxStepIndex={0}
                                                navSchema={
                                                  Array [
                                                    Object {
                                                      "index": 0,
                                                      "primary": true,
                                                      "substepOf": undefined,
                                                      "title": "foo-step",
                                                    },
                                                    Object {
                                                      "index": 1,
                                                      "primary": true,
                                                      "substepOf": undefined,
                                                      "title": "bar-step",
                                                    },
                                                  ]
                                                }
                                                setPrevSteps={[Function]}
                                                values={Object {}}
                                              >
                                                <Component
                                                  activeStepIndex={0}
                                                  formOptions={
                                                    Object {
                                                      "batch": [Function],
                                                      "blur": [Function],
                                                      "change": [Function],
                                                      "clearOnUnmount": false,
                                                      "clearedValue": undefined,
                                                      "concat": [Function],
                                                      "destroyOnUnregister": false,
                                                      "focus": [Function],
                                                      "getFieldState": [Function],
                                                      "getRegisteredFields": [Function],
                                                      "getState": [Function],
                                                      "handleSubmit": [Function],
                                                      "initialize": [Function],
                                                      "insert": [Function],
                                                      "isValidationPaused": [Function],
                                                      "move": [Function],
                                                      "onCancel": [MockFunction],
                                                      "onReset": undefined,
                                                      "onSubmit": [MockFunction],
                                                      "pauseValidation": [Function],
                                                      "pop": [Function],
                                                      "pristine": true,
                                                      "push": [Function],
                                                      "registerField": [Function],
                                                      "remove": [Function],
                                                      "removeBatch": [Function],
                                                      "renderForm": [Function],
                                                      "reset": [Function],
                                                      "resetFieldState": [Function],
                                                      "resumeValidation": [Function],
                                                      "setConfig": [Function],
                                                      "shift": [Function],
                                                      "submit": [Function],
                                                      "subscribe": [Function],
                                                      "swap": [Function],
                                                      "unshift": [Function],
                                                      "update": [Function],
                                                      "valid": true,
                                                    }
                                                  }
                                                  jumpToStep={[Function]}
                                                  maxStepIndex={0}
                                                  navSchema={
                                                    Array [
                                                      Object {
                                                        "index": 0,
                                                        "primary": true,
                                                        "substepOf": undefined,
                                                        "title": "foo-step",
                                                      },
                                                      Object {
                                                        "index": 1,
                                                        "primary": true,
                                                        "substepOf": undefined,
                                                        "title": "bar-step",
                                                      },
                                                    ]
                                                  }
                                                >
                                                  <WizardNavItem
                                                    isCurrent={true}
                                                    isDisabled={false}
                                                    key="foo-step"
                                                    onNavItemClick={[Function]}
                                                    step={0}
                                                    text="foo-step"
                                                  >
                                                    <li
                                                      className="pf-c-wizard__nav-item"
                                                    >
                                                      <a
                                                        aria-current="page"
                                                        aria-disabled={false}
                                                        className="pf-c-wizard__nav-link pf-m-current"
                                                        onClick={[Function]}
                                                      >
                                                        foo-step
                                                      </a>
                                                    </li>
                                                  </WizardNavItem>
                                                  <WizardNavItem
                                                    isCurrent={false}
                                                    isDisabled={true}
                                                    key="bar-step"
                                                    onNavItemClick={[Function]}
                                                    step={1}
                                                    text="bar-step"
                                                  >
                                                    <li
                                                      className="pf-c-wizard__nav-item"
                                                    >
                                                      <a
                                                        aria-current={false}
                                                        aria-disabled={true}
                                                        className="pf-c-wizard__nav-link pf-m-disabled"
                                                        onClick={[Function]}
                                                        tabIndex={-1}
                                                      >
                                                        bar-step
                                                      </a>
                                                    </li>
                                                  </WizardNavItem>
                                                </Component>
                                              </WizardNavigation>
                                            </FormSpy>
                                          </ol>
                                        </nav>
                                      </WizardNav>
                                      <WizardStep
                                        buttonLabels={
                                          Object {
                                            "back": "Back",
                                            "cancel": "Cancel",
                                            "next": "Next",
                                            "submit": "Submit",
                                          }
                                        }
                                        disableBack={true}
                                        fields={
                                          Array [
                                            Object {
                                              "component": "text-field",
                                              "name": "foo-field",
                                            },
                                          ]
                                        }
                                        formOptions={
                                          Object {
                                            "batch": [Function],
                                            "blur": [Function],
                                            "change": [Function],
                                            "clearOnUnmount": false,
                                            "clearedValue": undefined,
                                            "concat": [Function],
                                            "destroyOnUnregister": false,
                                            "focus": [Function],
                                            "getFieldState": [Function],
                                            "getRegisteredFields": [Function],
                                            "getState": [Function],
                                            "handleSubmit": [Function],
                                            "initialize": [Function],
                                            "insert": [Function],
                                            "isValidationPaused": [Function],
                                            "move": [Function],
                                            "onCancel": [MockFunction],
                                            "onReset": undefined,
                                            "onSubmit": [MockFunction],
                                            "pauseValidation": [Function],
                                            "pop": [Function],
                                            "pristine": true,
                                            "push": [Function],
                                            "registerField": [Function],
                                            "remove": [Function],
                                            "removeBatch": [Function],
                                            "renderForm": [Function],
                                            "reset": [Function],
                                            "resetFieldState": [Function],
                                            "resumeValidation": [Function],
                                            "setConfig": [Function],
                                            "shift": [Function],
                                            "submit": [Function],
                                            "subscribe": [Function],
                                            "swap": [Function],
                                            "unshift": [Function],
                                            "update": [Function],
                                            "valid": true,
                                          }
                                        }
                                        handleNext={[Function]}
                                        handlePrev={[Function]}
                                        name="foo"
                                        nextStep="2"
                                        stepKey="1"
                                        title="foo-step"
                                      >
                                        <WizardBody
                                          hasBodyPadding={true}
                                        >
                                          <main
                                            className="pf-c-wizard__main"
                                          >
                                            <div
                                              className="pf-c-wizard__main-body"
                                            >
                                              <div
                                                className="pf-c-form"
                                              >
                                                <SingleField
                                                  component="text-field"
                                                  key="foo-field"
                                                  name="foo-field"
                                                >
                                                  <FormConditionWrapper>
                                                    <FormFieldHideWrapper
                                                      hideField={false}
                                                    >
                                                      <FieldWrapper
                                                        component={[Function]}
                                                        componentType="text-field"
                                                        name="foo-field"
                                                      >
                                                        <TextField
                                                          name="foo-field"
                                                          validate={[Function]}
                                                        >
                                                          <FormGroup
                                                            id="foo-field"
                                                            isRequired={false}
                                                            meta={
                                                              Object {
                                                                "active": false,
                                                                "data": Object {},
                                                                "dirty": false,
                                                                "dirtySinceLastSubmit": false,
                                                                "error": undefined,
                                                                "initial": undefined,
                                                                "invalid": false,
                                                                "length": undefined,
                                                                "modified": false,
                                                                "pristine": true,
                                                                "submitError": undefined,
                                                                "submitFailed": false,
                                                                "submitSucceeded": false,
                                                                "submitting": false,
                                                                "touched": false,
                                                                "valid": true,
                                                                "validating": false,
                                                                "visited": false,
                                                              }
                                                            }
                                                          >
                                                            <FormGroup
                                                              fieldId="foo-field"
                                                              isRequired={false}
                                                              isValid={true}
                                                            >
                                                              <div
                                                                className="pf-c-form__group"
                                                              >
                                                                <ForwardRef
                                                                  id="foo-field"
                                                                  name="foo-field"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  value=""
                                                                >
                                                                  <TextInputBase
                                                                    aria-label={null}
                                                                    className=""
                                                                    id="foo-field"
                                                                    innerRef={null}
                                                                    isDisabled={false}
                                                                    isReadOnly={false}
                                                                    isRequired={false}
                                                                    isValid={true}
                                                                    name="foo-field"
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    type="text"
                                                                    validated="default"
                                                                    value=""
                                                                  >
                                                                    <input
                                                                      aria-invalid={false}
                                                                      aria-label={null}
                                                                      className="pf-c-form-control"
                                                                      disabled={false}
                                                                      id="foo-field"
                                                                      name="foo-field"
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      readOnly={false}
                                                                      required={false}
                                                                      type="text"
                                                                      value=""
                                                                    />
                                                                  </TextInputBase>
                                                                </ForwardRef>
                                                              </div>
                                                            </FormGroup>
                                                          </FormGroup>
                                                        </TextField>
                                                      </FieldWrapper>
                                                    </FormFieldHideWrapper>
                                                  </FormConditionWrapper>
                                                </SingleField>
                                              </div>
                                            </div>
                                          </main>
                                        </WizardBody>
                                        <WizardStepButtons
                                          buttonLabels={
                                            Object {
                                              "back": "Back",
                                              "cancel": "Cancel",
                                              "next": "Next",
                                              "submit": "Submit",
                                            }
                                          }
                                          disableBack={true}
                                          formOptions={
                                            Object {
                                              "batch": [Function],
                                              "blur": [Function],
                                              "change": [Function],
                                              "clearOnUnmount": false,
                                              "clearedValue": undefined,
                                              "concat": [Function],
                                              "destroyOnUnregister": false,
                                              "focus": [Function],
                                              "getFieldState": [Function],
                                              "getRegisteredFields": [Function],
                                              "getState": [Function],
                                              "handleSubmit": [Function],
                                              "initialize": [Function],
                                              "insert": [Function],
                                              "isValidationPaused": [Function],
                                              "move": [Function],
                                              "onCancel": [MockFunction],
                                              "onReset": undefined,
                                              "onSubmit": [MockFunction],
                                              "pauseValidation": [Function],
                                              "pop": [Function],
                                              "pristine": true,
                                              "push": [Function],
                                              "registerField": [Function],
                                              "remove": [Function],
                                              "removeBatch": [Function],
                                              "renderForm": [Function],
                                              "reset": [Function],
                                              "resetFieldState": [Function],
                                              "resumeValidation": [Function],
                                              "setConfig": [Function],
                                              "shift": [Function],
                                              "submit": [Function],
                                              "subscribe": [Function],
                                              "swap": [Function],
                                              "unshift": [Function],
                                              "update": [Function],
                                              "valid": true,
                                            }
                                          }
                                          handleNext={[Function]}
                                          handlePrev={[Function]}
                                          name="foo"
                                          nextStep="2"
                                          stepKey="1"
                                        >
                                          <footer
                                            className="pf-c-wizard__footer "
                                          >
                                            <NextButton
                                              batch={[Function]}
                                              blur={[Function]}
                                              change={[Function]}
                                              clearOnUnmount={false}
                                              concat={[Function]}
                                              destroyOnUnregister={false}
                                              focus={[Function]}
                                              getFieldState={[Function]}
                                              getRegisteredFields={[Function]}
                                              getState={[Function]}
                                              handleNext={[Function]}
                                              handleSubmit={[Function]}
                                              initialize={[Function]}
                                              insert={[Function]}
                                              isValidationPaused={[Function]}
                                              move={[Function]}
                                              nextLabel="Next"
                                              nextStep="2"
                                              onCancel={[MockFunction]}
                                              onSubmit={[MockFunction]}
                                              pauseValidation={[Function]}
                                              pop={[Function]}
                                              pristine={true}
                                              push={[Function]}
                                              registerField={[Function]}
                                              remove={[Function]}
                                              removeBatch={[Function]}
                                              renderForm={[Function]}
                                              reset={[Function]}
                                              resetFieldState={[Function]}
                                              resumeValidation={[Function]}
                                              setConfig={[Function]}
                                              shift={[Function]}
                                              submit={[Function]}
                                              submitLabel="Submit"
                                              subscribe={[Function]}
                                              swap={[Function]}
                                              unshift={[Function]}
                                              update={[Function]}
                                              valid={true}
                                            >
                                              <SimpleNext
                                                batch={[Function]}
                                                blur={[Function]}
                                                change={[Function]}
                                                clearOnUnmount={false}
                                                concat={[Function]}
                                                destroyOnUnregister={false}
                                                focus={[Function]}
                                                getFieldState={[Function]}
                                                getRegisteredFields={[Function]}
                                                getState={[Function]}
                                                handleNext={[Function]}
                                                initialize={[Function]}
                                                insert={[Function]}
                                                isValidationPaused={[Function]}
                                                move={[Function]}
                                                nextLabel="Next"
                                                nextStep="2"
                                                onCancel={[MockFunction]}
                                                onSubmit={[MockFunction]}
                                                pauseValidation={[Function]}
                                                pop={[Function]}
                                                pristine={true}
                                                push={[Function]}
                                                registerField={[Function]}
                                                remove={[Function]}
                                                removeBatch={[Function]}
                                                renderForm={[Function]}
                                                reset={[Function]}
                                                resetFieldState={[Function]}
                                                resumeValidation={[Function]}
                                                setConfig={[Function]}
                                                shift={[Function]}
                                                submit={[Function]}
                                                subscribe={[Function]}
                                                swap={[Function]}
                                                unshift={[Function]}
                                                update={[Function]}
                                                valid={true}
                                              >
                                                <Component
                                                  isDisabled={false}
                                                  onClick={[Function]}
                                                  type="button"
                                                  variant="primary"
                                                >
                                                  <ComponentWithOuia
                                                    component={[Function]}
                                                    componentProps={
                                                      Object {
                                                        "children": "Next",
                                                        "isDisabled": false,
                                                        "onClick": [Function],
                                                        "type": "button",
                                                        "variant": "primary",
                                                      }
                                                    }
                                                    consumerContext={null}
                                                  >
                                                    <Button
                                                      isDisabled={false}
                                                      onClick={[Function]}
                                                      ouiaContext={
                                                        Object {
                                                          "isOuia": false,
                                                          "ouiaId": null,
                                                        }
                                                      }
                                                      type="button"
                                                      variant="primary"
                                                    >
                                                      <button
                                                        aria-disabled={null}
                                                        aria-label={null}
                                                        className="pf-c-button pf-m-primary"
                                                        disabled={false}
                                                        onClick={[Function]}
                                                        tabIndex={null}
                                                        type="button"
                                                      >
                                                        Next
                                                      </button>
                                                    </Button>
                                                  </ComponentWithOuia>
                                                </Component>
                                              </SimpleNext>
                                            </NextButton>
                                            <Component
                                              isDisabled={true}
                                              onClick={[Function]}
                                              type="button"
                                              variant="secondary"
                                            >
                                              <ComponentWithOuia
                                                component={[Function]}
                                                componentProps={
                                                  Object {
                                                    "children": "Back",
                                                    "isDisabled": true,
                                                    "onClick": [Function],
                                                    "type": "button",
                                                    "variant": "secondary",
                                                  }
                                                }
                                                consumerContext={null}
                                              >
                                                <Button
                                                  isDisabled={true}
                                                  onClick={[Function]}
                                                  ouiaContext={
                                                    Object {
                                                      "isOuia": false,
                                                      "ouiaId": null,
                                                    }
                                                  }
                                                  type="button"
                                                  variant="secondary"
                                                >
                                                  <button
                                                    aria-disabled={null}
                                                    aria-label={null}
                                                    className="pf-c-button pf-m-secondary"
                                                    disabled={true}
                                                    onClick={[Function]}
                                                    tabIndex={null}
                                                    type="button"
                                                  >
                                                    Back
                                                  </button>
                                                </Button>
                                              </ComponentWithOuia>
                                            </Component>
                                            <Component
                                              onClick={[Function]}
                                              type="button"
                                              variant="link"
                                            >
                                              <ComponentWithOuia
                                                component={[Function]}
                                                componentProps={
                                                  Object {
                                                    "children": "Cancel",
                                                    "onClick": [Function],
                                                    "type": "button",
                                                    "variant": "link",
                                                  }
                                                }
                                                consumerContext={null}
                                              >
                                                <Button
                                                  onClick={[Function]}
                                                  ouiaContext={
                                                    Object {
                                                      "isOuia": false,
                                                      "ouiaId": null,
                                                    }
                                                  }
                                                  type="button"
                                                  variant="link"
                                                >
                                                  <button
                                                    aria-disabled={null}
                                                    aria-label={null}
                                                    className="pf-c-button pf-m-link"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                    tabIndex={null}
                                                    type="button"
                                                  >
                                                    Cancel
                                                  </button>
                                                </Button>
                                              </ComponentWithOuia>
                                            </Component>
                                          </footer>
                                        </WizardStepButtons>
                                      </WizardStep>
                                    </div>
                                  </div>
                                </div>
                              </Bullseye>
                            </div>
                          </Backdrop>
                        </Portal>
                      </Modal>
                    </Wizard>
                  </WizardFunction>
                </FieldWrapper>
              </FormFieldHideWrapper>
            </FormConditionWrapper>
          </SingleField>
        </form>
      </Form>
    </Component>
  </ReactFinalForm>
</FormRenderer>
`;

exports[`<Wizard /> should render correctly in modal and unmount 2`] = `null`;
