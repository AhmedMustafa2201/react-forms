// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormFields should render Checkbox correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Checkbox
      dataType="someDataType"
      id="someIdKey"
      name="Name of the field"
    >
      <SingleCheckbox
        dataType="someDataType"
        id="someIdKey"
        name="Name of the field"
      >
        <FormGroup
          hideLabel={true}
          id="someIdKey"
          isRequired={false}
          meta={
            Object {
              "active": false,
              "data": Object {},
              "dirty": false,
              "dirtySinceLastSubmit": false,
              "error": undefined,
              "initial": undefined,
              "invalid": false,
              "length": undefined,
              "modified": false,
              "pristine": true,
              "submitError": undefined,
              "submitFailed": false,
              "submitSucceeded": false,
              "submitting": false,
              "touched": false,
              "valid": true,
              "validating": false,
              "visited": false,
            }
          }
        >
          <FormGroup
            fieldId="someIdKey"
            isRequired={false}
            isValid={true}
            label={false}
          >
            <div
              className="pf-c-form__group"
            >
              <Checkbox
                className=""
                dataType="someDataType"
                formOptions={Object {}}
                id="someIdKey"
                isChecked={false}
                isDisabled={false}
                isValid={true}
                name="Name of the field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                value=""
              >
                <div
                  className="pf-c-check"
                >
                  <input
                    aria-invalid={false}
                    checked={false}
                    className="pf-c-check__input"
                    dataType="someDataType"
                    disabled={false}
                    formOptions={Object {}}
                    id="someIdKey"
                    name="Name of the field"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    type="checkbox"
                    value=""
                  />
                </div>
              </Checkbox>
            </div>
          </FormGroup>
        </FormGroup>
      </SingleCheckbox>
    </Checkbox>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render Checkbox with options correctly 1`] = `
<Checkbox
  FieldProvider={[Function]}
  dataType="someDataType"
  id="someIdKey"
  input={
    Object {
      "name": "Name of the field",
      "value": "",
    }
  }
  meta={
    Object {
      "error": false,
      "touched": false,
    }
  }
  options={
    Array [
      Object {
        "label": "One",
        "value": "1",
      },
      Object {
        "label": "Two",
        "value": "2",
      },
      Object {
        "label": "Three",
        "value": "3",
      },
    ]
  }
>
  <SingleCheckbox
    FieldProvider={[Function]}
    dataType="someDataType"
    id="someIdKey"
    input={
      Object {
        "name": "Name of the field",
        "value": "",
      }
    }
    meta={
      Object {
        "error": false,
        "touched": false,
      }
    }
  >
    <FormGroup
      hideLabel={true}
      id="someIdKey"
      isRequired={false}
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
    >
      <FormGroup
        fieldId="someIdKey"
        helperTextInvalid={false}
        isRequired={false}
        isValid={true}
        label={false}
      >
        <div
          className="pf-c-form__group"
        >
          <Checkbox
            FieldProvider={[Function]}
            className=""
            dataType="someDataType"
            id="someIdKey"
            isChecked={false}
            isDisabled={false}
            isValid={true}
            name="Name of the field"
            onChange={[Function]}
            value=""
          >
            <div
              className="pf-c-check"
            >
              <input
                FieldProvider={[Function]}
                aria-invalid={false}
                className="pf-c-check__input"
                dataType="someDataType"
                disabled={false}
                id="someIdKey"
                name="Name of the field"
                onChange={[Function]}
                type="checkbox"
                value=""
              />
            </div>
          </Checkbox>
        </div>
      </FormGroup>
    </FormGroup>
  </SingleCheckbox>
</Checkbox>
`;

exports[`FormFields should render DatePicker correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <DatePicker
      dataType="someDataType"
      id="someIdKey"
      name="Name of the field"
    >
      <FormGroup
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
        >
          <div
            className="pf-c-form__group"
          >
            <ForwardRef
              dataType="someDataType"
              formOptions={Object {}}
              id="someIdKey"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="date"
              value=""
            >
              <TextInputBase
                aria-label={null}
                className=""
                dataType="someDataType"
                formOptions={Object {}}
                id="someIdKey"
                innerRef={null}
                isDisabled={false}
                isReadOnly={false}
                isRequired={false}
                isValid={true}
                name="Name of the field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="date"
                validated="default"
                value=""
              >
                <input
                  aria-invalid={false}
                  aria-label={null}
                  className="pf-c-form-control"
                  dataType="someDataType"
                  disabled={false}
                  formOptions={Object {}}
                  id="someIdKey"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={false}
                  required={false}
                  type="date"
                  value=""
                />
              </TextInputBase>
            </ForwardRef>
          </div>
        </FormGroup>
      </FormGroup>
    </DatePicker>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render Radio correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Radio
      dataType="someDataType"
      id="someIdKey"
      name="Name of the field"
      options={
        Array [
          Object {
            "label": "One",
            "value": "1",
          },
          Object {
            "label": "Two",
            "value": "2",
          },
          Object {
            "label": "Three",
            "value": "3",
          },
        ]
      }
    >
      <FormGroup
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
        >
          <div
            className="pf-c-form__group"
          >
            <Radio
              aria-label="One"
              checked={false}
              className=""
              id="Name of the field-1"
              isDisabled={false}
              isValid={true}
              key="Name of the field-1"
              label="One"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="radio"
              value="1"
            >
              <div
                className="pf-c-radio"
              >
                <input
                  aria-invalid={false}
                  className="pf-c-radio__input"
                  disabled={false}
                  id="Name of the field-1"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  type="radio"
                  value="1"
                />
                <label
                  className="pf-c-radio__label"
                  htmlFor="Name of the field-1"
                >
                  One
                </label>
              </div>
            </Radio>
            <Radio
              aria-label="Two"
              checked={false}
              className=""
              id="Name of the field-2"
              isDisabled={false}
              isValid={true}
              key="Name of the field-2"
              label="Two"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="radio"
              value="2"
            >
              <div
                className="pf-c-radio"
              >
                <input
                  aria-invalid={false}
                  className="pf-c-radio__input"
                  disabled={false}
                  id="Name of the field-2"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  type="radio"
                  value="2"
                />
                <label
                  className="pf-c-radio__label"
                  htmlFor="Name of the field-2"
                >
                  Two
                </label>
              </div>
            </Radio>
            <Radio
              aria-label="Three"
              checked={false}
              className=""
              id="Name of the field-3"
              isDisabled={false}
              isValid={true}
              key="Name of the field-3"
              label="Three"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="radio"
              value="3"
            >
              <div
                className="pf-c-radio"
              >
                <input
                  aria-invalid={false}
                  className="pf-c-radio__input"
                  disabled={false}
                  id="Name of the field-3"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  type="radio"
                  value="3"
                />
                <label
                  className="pf-c-radio__label"
                  htmlFor="Name of the field-3"
                >
                  Three
                </label>
              </div>
            </Radio>
          </div>
        </FormGroup>
      </FormGroup>
    </Radio>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render Select correctly 1`] = `
<ContextProvider
  value={
    Object {
      "batch": [Function],
      "blur": [Function],
      "change": [Function],
      "destroyOnUnregister": false,
      "focus": [Function],
      "getFieldState": [Function],
      "getRegisteredFields": [Function],
      "getState": [Function],
      "initialize": [Function],
      "isValidationPaused": [Function],
      "mutators": Object {},
      "pauseValidation": [Function],
      "registerField": [Function],
      "reset": [Function],
      "resetFieldState": [Function],
      "resumeValidation": [Function],
      "setConfig": [Function],
      "submit": [Function],
      "subscribe": [Function],
    }
  }
>
  <ContextProvider
    value={
      Object {
        "formOptions": Object {},
      }
    }
  >
    <Select
      dataType="someDataType"
      id="someIdKey"
      name="Name of the field"
      options={
        Array [
          Object {
            "label": "One",
            "value": "1",
          },
          Object {
            "label": "Two",
            "value": "2",
          },
          Object {
            "label": "Three",
            "value": "3",
          },
        ]
      }
    />
  </ContextProvider>
</ContextProvider>
`;

exports[`FormFields should render Switch correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      dataType="someDataType"
      id="someIdKey"
      name="Name of the field"
    >
      <FormGroup
        hideLabel={true}
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
          label={false}
        >
          <div
            className="pf-c-form__group"
          >
            <Component
              checked={false}
              dataType="someDataType"
              formOptions={Object {}}
              id="someIdKey"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
            >
              <ComponentWithOuia
                component={[Function]}
                componentProps={
                  Object {
                    "checked": false,
                    "dataType": "someDataType",
                    "formOptions": Object {},
                    "id": "someIdKey",
                    "isDisabled": undefined,
                    "label": undefined,
                    "labelOff": undefined,
                    "name": "Name of the field",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "type": "checkbox",
                    "value": undefined,
                  }
                }
                consumerContext={null}
              >
                <Switch
                  aria-label=""
                  checked={false}
                  className=""
                  dataType="someDataType"
                  formOptions={Object {}}
                  id="someIdKey"
                  isChecked={true}
                  isDisabled={false}
                  label=""
                  labelOff=""
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  ouiaContext={
                    Object {
                      "isOuia": false,
                      "ouiaId": null,
                    }
                  }
                  type="checkbox"
                >
                  <label
                    className="pf-c-switch"
                    htmlFor="someIdKey"
                  >
                    <input
                      aria-label=""
                      aria-labelledby="someIdKey-on"
                      checked={false}
                      className="pf-c-switch__input"
                      dataType="someDataType"
                      disabled={false}
                      formOptions={Object {}}
                      id="someIdKey"
                      name="Name of the field"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="checkbox"
                    />
                    <span
                      className="pf-c-switch__toggle"
                    >
                      <div
                        aria-hidden="true"
                        className="pf-c-switch__toggle-icon"
                      >
                        <CheckIcon
                          color="currentColor"
                          noVerticalAlign={true}
                          size="sm"
                          title={null}
                        >
                          <svg
                            aria-hidden={true}
                            aria-labelledby={null}
                            fill="currentColor"
                            height="1em"
                            role="img"
                            style={null}
                            viewBox="0 0 512 512"
                            width="1em"
                          >
                            <path
                              d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                              transform=""
                            />
                          </svg>
                        </CheckIcon>
                      </div>
                    </span>
                  </label>
                </Switch>
              </ComponentWithOuia>
            </Component>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render TextArea correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <TextArea
      dataType="someDataType"
      id="someIdKey"
      name="Name of the field"
    >
      <FormGroup
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
        >
          <div
            className="pf-c-form__group"
          >
            <TextArea
              aria-label={null}
              className=""
              dataType="someDataType"
              formOptions={Object {}}
              isRequired={false}
              isValid={true}
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              resizeOrientation="both"
              validated="default"
              value=""
            >
              <textarea
                aria-invalid={false}
                aria-label={null}
                className="pf-c-form-control"
                dataType="someDataType"
                formOptions={Object {}}
                name="Name of the field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                required={false}
                value=""
              />
            </TextArea>
          </div>
        </FormGroup>
      </FormGroup>
    </TextArea>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render TextField correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <TextField
      dataType="someDataType"
      id="someIdKey"
      name="Name of the field"
    >
      <FormGroup
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
        >
          <div
            className="pf-c-form__group"
          >
            <ForwardRef
              dataType="someDataType"
              formOptions={Object {}}
              id="someIdKey"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              value=""
            >
              <TextInputBase
                aria-label={null}
                className=""
                dataType="someDataType"
                formOptions={Object {}}
                id="someIdKey"
                innerRef={null}
                isDisabled={false}
                isReadOnly={false}
                isRequired={false}
                isValid={true}
                name="Name of the field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                validated="default"
                value=""
              >
                <input
                  aria-invalid={false}
                  aria-label={null}
                  className="pf-c-form-control"
                  dataType="someDataType"
                  disabled={false}
                  formOptions={Object {}}
                  id="someIdKey"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={false}
                  required={false}
                  type="text"
                  value=""
                />
              </TextInputBase>
            </ForwardRef>
          </div>
        </FormGroup>
      </FormGroup>
    </TextField>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render TextField with description correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <TextField
      dataType="someDataType"
      description="This is description"
      id="someIdKey"
      name="Name of the field"
    >
      <FormGroup
        description="This is description"
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
        >
          <div
            className="pf-c-form__group"
          >
            <TextContent>
              <div
                className="pf-c-content"
              >
                <Text
                  component="small"
                >
                  <small
                    className=""
                    data-pf-content={true}
                  >
                    This is description
                  </small>
                </Text>
              </div>
            </TextContent>
            <ForwardRef
              dataType="someDataType"
              formOptions={Object {}}
              id="someIdKey"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              value=""
            >
              <TextInputBase
                aria-label={null}
                className=""
                dataType="someDataType"
                formOptions={Object {}}
                id="someIdKey"
                innerRef={null}
                isDisabled={false}
                isReadOnly={false}
                isRequired={false}
                isValid={true}
                name="Name of the field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                validated="default"
                value=""
              >
                <input
                  aria-invalid={false}
                  aria-label={null}
                  className="pf-c-form-control"
                  dataType="someDataType"
                  disabled={false}
                  formOptions={Object {}}
                  id="someIdKey"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={false}
                  required={false}
                  type="text"
                  value=""
                />
              </TextInputBase>
            </ForwardRef>
          </div>
        </FormGroup>
      </FormGroup>
    </TextField>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render TextField without id correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <TextField
      dataType="someDataType"
      name="Name of the field"
    >
      <FormGroup
        id="Name of the field"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="Name of the field"
          isRequired={false}
          isValid={true}
        >
          <div
            className="pf-c-form__group"
          >
            <ForwardRef
              dataType="someDataType"
              formOptions={Object {}}
              id="Name of the field"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              value=""
            >
              <TextInputBase
                aria-label={null}
                className=""
                dataType="someDataType"
                formOptions={Object {}}
                id="Name of the field"
                innerRef={null}
                isDisabled={false}
                isReadOnly={false}
                isRequired={false}
                isValid={true}
                name="Name of the field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                validated="default"
                value=""
              >
                <input
                  aria-invalid={false}
                  aria-label={null}
                  className="pf-c-form-control"
                  dataType="someDataType"
                  disabled={false}
                  formOptions={Object {}}
                  id="Name of the field"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={false}
                  required={false}
                  type="text"
                  value=""
                />
              </TextInputBase>
            </ForwardRef>
          </div>
        </FormGroup>
      </FormGroup>
    </TextField>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render TimePicker correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <TimePicker
      dataType="someDataType"
      id="someIdKey"
      name="Name of the field"
    >
      <FormGroup
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
        >
          <div
            className="pf-c-form__group"
          >
            <ForwardRef
              dataType="someDataType"
              formOptions={Object {}}
              id="someIdKey"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="time"
              value=""
            >
              <TextInputBase
                aria-label={null}
                className=""
                dataType="someDataType"
                formOptions={Object {}}
                id="someIdKey"
                innerRef={null}
                isDisabled={false}
                isReadOnly={false}
                isRequired={false}
                isValid={true}
                name="Name of the field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="time"
                validated="default"
                value=""
              >
                <input
                  aria-invalid={false}
                  aria-label={null}
                  className="pf-c-form-control"
                  dataType="someDataType"
                  disabled={false}
                  formOptions={Object {}}
                  id="someIdKey"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={false}
                  required={false}
                  type="time"
                  value=""
                />
              </TextInputBase>
            </ForwardRef>
          </div>
        </FormGroup>
      </FormGroup>
    </TimePicker>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render disabled Checkbox with options correctly 1`] = `
<Checkbox
  FieldProvider={[Function]}
  dataType="someDataType"
  disabled={true}
  id="someIdKey"
  input={
    Object {
      "name": "Name of the field",
      "value": "",
    }
  }
  meta={
    Object {
      "error": false,
      "touched": false,
    }
  }
  options={
    Array [
      Object {
        "label": "One",
        "value": "1",
      },
      Object {
        "label": "Two",
        "value": "2",
      },
      Object {
        "label": "Three",
        "value": "3",
      },
    ]
  }
>
  <SingleCheckbox
    FieldProvider={[Function]}
    dataType="someDataType"
    disabled={true}
    id="someIdKey"
    input={
      Object {
        "name": "Name of the field",
        "value": "",
      }
    }
    meta={
      Object {
        "error": false,
        "touched": false,
      }
    }
  >
    <FormGroup
      hideLabel={true}
      id="someIdKey"
      isRequired={false}
      meta={
        Object {
          "error": false,
          "touched": false,
        }
      }
    >
      <FormGroup
        fieldId="someIdKey"
        helperTextInvalid={false}
        isRequired={false}
        isValid={true}
        label={false}
      >
        <div
          className="pf-c-form__group"
        >
          <Checkbox
            FieldProvider={[Function]}
            className=""
            dataType="someDataType"
            disabled={true}
            id="someIdKey"
            isChecked={false}
            isDisabled={false}
            isValid={true}
            name="Name of the field"
            onChange={[Function]}
            value=""
          >
            <div
              className="pf-c-check"
            >
              <input
                FieldProvider={[Function]}
                aria-invalid={false}
                className="pf-c-check__input"
                dataType="someDataType"
                disabled={false}
                id="someIdKey"
                name="Name of the field"
                onChange={[Function]}
                type="checkbox"
                value=""
              />
            </div>
          </Checkbox>
        </div>
      </FormGroup>
    </FormGroup>
  </SingleCheckbox>
</Checkbox>
`;

exports[`FormFields should render disabled Radio correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Radio
      dataType="someDataType"
      disabled={true}
      id="someIdKey"
      name="Name of the field"
      options={
        Array [
          Object {
            "label": "One",
            "value": "1",
          },
          Object {
            "label": "Two",
            "value": "2",
          },
          Object {
            "label": "Three",
            "value": "3",
          },
        ]
      }
    >
      <FormGroup
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
        >
          <div
            className="pf-c-form__group"
          >
            <Radio
              aria-label="One"
              checked={false}
              className=""
              id="Name of the field-1"
              isDisabled={false}
              isValid={true}
              key="Name of the field-1"
              label="One"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="radio"
              value="1"
            >
              <div
                className="pf-c-radio"
              >
                <input
                  aria-invalid={false}
                  className="pf-c-radio__input"
                  disabled={false}
                  id="Name of the field-1"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  type="radio"
                  value="1"
                />
                <label
                  className="pf-c-radio__label"
                  htmlFor="Name of the field-1"
                >
                  One
                </label>
              </div>
            </Radio>
            <Radio
              aria-label="Two"
              checked={false}
              className=""
              id="Name of the field-2"
              isDisabled={false}
              isValid={true}
              key="Name of the field-2"
              label="Two"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="radio"
              value="2"
            >
              <div
                className="pf-c-radio"
              >
                <input
                  aria-invalid={false}
                  className="pf-c-radio__input"
                  disabled={false}
                  id="Name of the field-2"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  type="radio"
                  value="2"
                />
                <label
                  className="pf-c-radio__label"
                  htmlFor="Name of the field-2"
                >
                  Two
                </label>
              </div>
            </Radio>
            <Radio
              aria-label="Three"
              checked={false}
              className=""
              id="Name of the field-3"
              isDisabled={false}
              isValid={true}
              key="Name of the field-3"
              label="Three"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="radio"
              value="3"
            >
              <div
                className="pf-c-radio"
              >
                <input
                  aria-invalid={false}
                  className="pf-c-radio__input"
                  disabled={false}
                  id="Name of the field-3"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  type="radio"
                  value="3"
                />
                <label
                  className="pf-c-radio__label"
                  htmlFor="Name of the field-3"
                >
                  Three
                </label>
              </div>
            </Radio>
          </div>
        </FormGroup>
      </FormGroup>
    </Radio>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render disabled Select correctly 1`] = `
<ContextProvider
  value={
    Object {
      "batch": [Function],
      "blur": [Function],
      "change": [Function],
      "destroyOnUnregister": false,
      "focus": [Function],
      "getFieldState": [Function],
      "getRegisteredFields": [Function],
      "getState": [Function],
      "initialize": [Function],
      "isValidationPaused": [Function],
      "mutators": Object {},
      "pauseValidation": [Function],
      "registerField": [Function],
      "reset": [Function],
      "resetFieldState": [Function],
      "resumeValidation": [Function],
      "setConfig": [Function],
      "submit": [Function],
      "subscribe": [Function],
    }
  }
>
  <ContextProvider
    value={
      Object {
        "formOptions": Object {},
      }
    }
  >
    <Select
      dataType="someDataType"
      id="someIdKey"
      isDisabled={true}
      name="Name of the field"
      options={
        Array [
          Object {
            "label": "One",
            "value": "1",
          },
          Object {
            "label": "Two",
            "value": "2",
          },
          Object {
            "label": "Three",
            "value": "3",
          },
        ]
      }
    />
  </ContextProvider>
</ContextProvider>
`;

exports[`FormFields should render disabled Switch correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      dataType="someDataType"
      id="someIdKey"
      isDisabled={true}
      name="Name of the field"
    >
      <FormGroup
        hideLabel={true}
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
          label={false}
        >
          <div
            className="pf-c-form__group"
          >
            <Component
              checked={false}
              dataType="someDataType"
              formOptions={Object {}}
              id="someIdKey"
              isDisabled={true}
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
            >
              <ComponentWithOuia
                component={[Function]}
                componentProps={
                  Object {
                    "checked": false,
                    "dataType": "someDataType",
                    "formOptions": Object {},
                    "id": "someIdKey",
                    "isDisabled": true,
                    "label": undefined,
                    "labelOff": undefined,
                    "name": "Name of the field",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "type": "checkbox",
                    "value": undefined,
                  }
                }
                consumerContext={null}
              >
                <Switch
                  aria-label=""
                  checked={false}
                  className=""
                  dataType="someDataType"
                  formOptions={Object {}}
                  id="someIdKey"
                  isChecked={true}
                  isDisabled={true}
                  label=""
                  labelOff=""
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  ouiaContext={
                    Object {
                      "isOuia": false,
                      "ouiaId": null,
                    }
                  }
                  type="checkbox"
                >
                  <label
                    className="pf-c-switch"
                    htmlFor="someIdKey"
                  >
                    <input
                      aria-label=""
                      aria-labelledby="someIdKey-on"
                      checked={false}
                      className="pf-c-switch__input"
                      dataType="someDataType"
                      disabled={true}
                      formOptions={Object {}}
                      id="someIdKey"
                      name="Name of the field"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="checkbox"
                    />
                    <span
                      className="pf-c-switch__toggle"
                    >
                      <div
                        aria-hidden="true"
                        className="pf-c-switch__toggle-icon"
                      >
                        <CheckIcon
                          color="currentColor"
                          noVerticalAlign={true}
                          size="sm"
                          title={null}
                        >
                          <svg
                            aria-hidden={true}
                            aria-labelledby={null}
                            fill="currentColor"
                            height="1em"
                            role="img"
                            style={null}
                            viewBox="0 0 512 512"
                            width="1em"
                          >
                            <path
                              d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                              transform=""
                            />
                          </svg>
                        </CheckIcon>
                      </div>
                    </span>
                  </label>
                </Switch>
              </ComponentWithOuia>
            </Component>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render disabled Switch correctly 2`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      dataType="someDataType"
      id="someIdKey"
      isDisabled={true}
      name="Name of the field"
    >
      <FormGroup
        hideLabel={true}
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
          label={false}
        >
          <div
            className="pf-c-form__group"
          >
            <Component
              checked={false}
              dataType="someDataType"
              formOptions={Object {}}
              id="someIdKey"
              isDisabled={true}
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
            >
              <ComponentWithOuia
                component={[Function]}
                componentProps={
                  Object {
                    "checked": false,
                    "dataType": "someDataType",
                    "formOptions": Object {},
                    "id": "someIdKey",
                    "isDisabled": true,
                    "label": undefined,
                    "labelOff": undefined,
                    "name": "Name of the field",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "type": "checkbox",
                    "value": undefined,
                  }
                }
                consumerContext={null}
              >
                <Switch
                  aria-label=""
                  checked={false}
                  className=""
                  dataType="someDataType"
                  formOptions={Object {}}
                  id="someIdKey"
                  isChecked={true}
                  isDisabled={true}
                  label=""
                  labelOff=""
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  ouiaContext={
                    Object {
                      "isOuia": false,
                      "ouiaId": null,
                    }
                  }
                  type="checkbox"
                >
                  <label
                    className="pf-c-switch"
                    htmlFor="someIdKey"
                  >
                    <input
                      aria-label=""
                      aria-labelledby="someIdKey-on"
                      checked={false}
                      className="pf-c-switch__input"
                      dataType="someDataType"
                      disabled={true}
                      formOptions={Object {}}
                      id="someIdKey"
                      name="Name of the field"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="checkbox"
                    />
                    <span
                      className="pf-c-switch__toggle"
                    >
                      <div
                        aria-hidden="true"
                        className="pf-c-switch__toggle-icon"
                      >
                        <CheckIcon
                          color="currentColor"
                          noVerticalAlign={true}
                          size="sm"
                          title={null}
                        >
                          <svg
                            aria-hidden={true}
                            aria-labelledby={null}
                            fill="currentColor"
                            height="1em"
                            role="img"
                            style={null}
                            viewBox="0 0 512 512"
                            width="1em"
                          >
                            <path
                              d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
                              transform=""
                            />
                          </svg>
                        </CheckIcon>
                      </div>
                    </span>
                  </label>
                </Switch>
              </ComponentWithOuia>
            </Component>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render disabled TextArea correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <TextArea
      dataType="someDataType"
      id="someIdKey"
      isDisabled={true}
      name="Name of the field"
    >
      <FormGroup
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
        >
          <div
            className="pf-c-form__group"
          >
            <TextArea
              aria-label={null}
              className=""
              dataType="someDataType"
              disabled={true}
              formOptions={Object {}}
              isRequired={false}
              isValid={true}
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              resizeOrientation="both"
              validated="default"
              value=""
            >
              <textarea
                aria-invalid={false}
                aria-label={null}
                className="pf-c-form-control"
                dataType="someDataType"
                disabled={true}
                formOptions={Object {}}
                name="Name of the field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                required={false}
                value=""
              />
            </TextArea>
          </div>
        </FormGroup>
      </FormGroup>
    </TextArea>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render touched TextField id correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <TextField
      dataType="someDataType"
      id="someIdKey"
      meta={
        Object {
          "error": false,
          "touched": true,
        }
      }
      name="Name of the field"
    >
      <FormGroup
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
        >
          <div
            className="pf-c-form__group"
          >
            <ForwardRef
              dataType="someDataType"
              formOptions={Object {}}
              id="someIdKey"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              value=""
            >
              <TextInputBase
                aria-label={null}
                className=""
                dataType="someDataType"
                formOptions={Object {}}
                id="someIdKey"
                innerRef={null}
                isDisabled={false}
                isReadOnly={false}
                isRequired={false}
                isValid={true}
                name="Name of the field"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                validated="default"
                value=""
              >
                <input
                  aria-invalid={false}
                  aria-label={null}
                  className="pf-c-form-control"
                  dataType="someDataType"
                  disabled={false}
                  formOptions={Object {}}
                  id="someIdKey"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={false}
                  required={false}
                  type="text"
                  value=""
                />
              </TextInputBase>
            </ForwardRef>
          </div>
        </FormGroup>
      </FormGroup>
    </TextField>
  </ReactFinalForm>
</RenderWithProvider>
`;

exports[`FormFields should render with onText/OffText Switch correctly 1`] = `
<RenderWithProvider>
  <ReactFinalForm
    onSubmit={[Function]}
  >
    <Switch
      dataType="someDataType"
      id="someIdKey"
      name="Name of the field"
      offText="Turned off"
      onText="I am on"
    >
      <FormGroup
        hideLabel={true}
        id="someIdKey"
        isRequired={false}
        meta={
          Object {
            "active": false,
            "data": Object {},
            "dirty": false,
            "dirtySinceLastSubmit": false,
            "error": undefined,
            "initial": undefined,
            "invalid": false,
            "length": undefined,
            "modified": false,
            "pristine": true,
            "submitError": undefined,
            "submitFailed": false,
            "submitSucceeded": false,
            "submitting": false,
            "touched": false,
            "valid": true,
            "validating": false,
            "visited": false,
          }
        }
      >
        <FormGroup
          fieldId="someIdKey"
          isRequired={false}
          isValid={true}
          label={false}
        >
          <div
            className="pf-c-form__group"
          >
            <Component
              checked={false}
              dataType="someDataType"
              formOptions={Object {}}
              id="someIdKey"
              label="I am on"
              labelOff="Turned off"
              name="Name of the field"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="checkbox"
            >
              <ComponentWithOuia
                component={[Function]}
                componentProps={
                  Object {
                    "checked": false,
                    "dataType": "someDataType",
                    "formOptions": Object {},
                    "id": "someIdKey",
                    "isDisabled": undefined,
                    "label": "I am on",
                    "labelOff": "Turned off",
                    "name": "Name of the field",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "type": "checkbox",
                    "value": undefined,
                  }
                }
                consumerContext={null}
              >
                <Switch
                  aria-label=""
                  checked={false}
                  className=""
                  dataType="someDataType"
                  formOptions={Object {}}
                  id="someIdKey"
                  isChecked={true}
                  isDisabled={false}
                  label="I am on"
                  labelOff="Turned off"
                  name="Name of the field"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  ouiaContext={
                    Object {
                      "isOuia": false,
                      "ouiaId": null,
                    }
                  }
                  type="checkbox"
                >
                  <label
                    className="pf-c-switch"
                    htmlFor="someIdKey"
                  >
                    <input
                      aria-label=""
                      aria-labelledby="someIdKey-on"
                      checked={false}
                      className="pf-c-switch__input"
                      dataType="someDataType"
                      disabled={false}
                      formOptions={Object {}}
                      id="someIdKey"
                      name="Name of the field"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="checkbox"
                    />
                    <span
                      className="pf-c-switch__toggle"
                    />
                    <span
                      aria-hidden="true"
                      className="pf-c-switch__label pf-m-on"
                      id="someIdKey-on"
                    >
                      I am on
                    </span>
                    <span
                      aria-hidden="true"
                      className="pf-c-switch__label pf-m-off"
                      id="someIdKey-off"
                    >
                      Turned off
                    </span>
                  </label>
                </Switch>
              </ComponentWithOuia>
            </Component>
          </div>
        </FormGroup>
      </FormGroup>
    </Switch>
  </ReactFinalForm>
</RenderWithProvider>
`;
