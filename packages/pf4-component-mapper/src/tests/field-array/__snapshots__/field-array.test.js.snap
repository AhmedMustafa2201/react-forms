// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FieldArray should render array field correctly 1`] = `
<ContextWrapper
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "field-array",
          "fields": Array [
            Object {
              "component": "text-field",
              "label": "foo",
              "name": "nested component",
            },
          ],
          "name": "foo",
        },
      ],
    }
  }
>
  <FormRenderer
    buttonClassName=""
    buttonsLabels={Object {}}
    clearOnUnmount={false}
    disableSubmit={Array []}
    formFieldsMapper={
      Object {
        "checkbox": [Function],
        "date-picker": [Function],
        "field-array": [Function],
        "plain-text": [Function],
        "radio": [Function],
        "select-field": [Function],
        "sub-form": [Function],
        "switch-field": [Function],
        "tabs": [Function],
        "text-field": [Function],
        "textarea-field": [Function],
        "time-picker": [Function],
        "undefined": [Function],
        "wizard": [Function],
      }
    }
    formType="pf3"
    initialValues={Object {}}
    layoutMapper={
      Object {
        "Button": [Function],
        "ButtonGroup": [Function],
        "Description": [Function],
        "FormWrapper": [Function],
        "Title": [Function],
      }
    }
    onSubmit={[MockFunction]}
    resetAble={false}
    schema={
      Object {
        "fields": Array [
          Object {
            "component": "field-array",
            "fields": Array [
              Object {
                "component": "text-field",
                "label": "foo",
                "name": "nested component",
              },
            ],
            "name": "foo",
          },
        ],
      }
    }
    schemaType="default"
    showFormControls={true}
    uiSchema={Object {}}
  >
    <ReactFinalForm
      decorators={
        Array [
          [Function],
        ]
      }
      initialValues={Object {}}
      mutators={
        Object {
          "concat": [Function],
          "insert": [Function],
          "move": [Function],
          "pop": [Function],
          "push": [Function],
          "remove": [Function],
          "removeBatch": [Function],
          "shift": [Function],
          "swap": [Function],
          "unshift": [Function],
          "update": [Function],
        }
      }
      onSubmit={[MockFunction]}
      render={[Function]}
      subscription={
        Object {
          "pristine": true,
          "submitting": true,
          "valid": true,
        }
      }
    >
      <Form>
        <form
          className="pf-c-form"
          noValidate={true}
        >
          <FormConditionWrapper>
            <FormFieldHideWrapper
              hideField={false}
            >
              <FieldWrapper
                component={[Function]}
                componentType="field-array"
                fields={
                  Array [
                    Object {
                      "component": "text-field",
                      "label": "foo",
                      "name": "nested component",
                    },
                  ]
                }
                formOptions={
                  Object {
                    "batch": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "clearOnUnmount": false,
                    "concat": [Function],
                    "destroyOnUnregister": false,
                    "focus": [Function],
                    "getFieldState": [Function],
                    "getRegisteredFields": [Function],
                    "getState": [Function],
                    "handleSubmit": [Function],
                    "initialize": [Function],
                    "insert": [Function],
                    "isValidationPaused": [Function],
                    "move": [Function],
                    "onCancel": undefined,
                    "onSubmit": [MockFunction],
                    "pauseValidation": [Function],
                    "pop": [Function],
                    "pristine": true,
                    "push": [Function],
                    "registerField": [Function],
                    "remove": [Function],
                    "removeBatch": [Function],
                    "renderForm": [Function],
                    "reset": [Function],
                    "resetFieldState": [Function],
                    "resumeValidation": [Function],
                    "setConfig": [Function],
                    "shift": [Function],
                    "submit": [Function],
                    "subscribe": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                    "valid": true,
                  }
                }
                name="foo"
                validate={
                  Array [
                    undefined,
                  ]
                }
              >
                <FieldProvider
                  FieldArrayProvider={[Function]}
                  FieldProvider={[Function]}
                  arrayValidator={[Function]}
                  component={[Function]}
                  fields={
                    Array [
                      Object {
                        "component": "text-field",
                        "label": "foo",
                        "name": "nested component",
                      },
                    ]
                  }
                  formOptions={
                    Object {
                      "batch": [Function],
                      "blur": [Function],
                      "change": [Function],
                      "clearOnUnmount": false,
                      "concat": [Function],
                      "destroyOnUnregister": false,
                      "focus": [Function],
                      "getFieldState": [Function],
                      "getRegisteredFields": [Function],
                      "getState": [Function],
                      "handleSubmit": [Function],
                      "initialize": [Function],
                      "insert": [Function],
                      "isValidationPaused": [Function],
                      "move": [Function],
                      "onCancel": undefined,
                      "onSubmit": [MockFunction],
                      "pauseValidation": [Function],
                      "pop": [Function],
                      "pristine": true,
                      "push": [Function],
                      "registerField": [Function],
                      "remove": [Function],
                      "removeBatch": [Function],
                      "renderForm": [Function],
                      "reset": [Function],
                      "resetFieldState": [Function],
                      "resumeValidation": [Function],
                      "setConfig": [Function],
                      "shift": [Function],
                      "submit": [Function],
                      "subscribe": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                      "valid": true,
                    }
                  }
                  name="foo"
                >
                  <ReactFinalForm(Field)
                    FieldArrayProvider={[Function]}
                    FieldProvider={[Function]}
                    arrayValidator={[Function]}
                    fields={
                      Array [
                        Object {
                          "component": "text-field",
                          "label": "foo",
                          "name": "nested component",
                        },
                      ]
                    }
                    formOptions={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "clearOnUnmount": false,
                        "concat": [Function],
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "handleSubmit": [Function],
                        "initialize": [Function],
                        "insert": [Function],
                        "isValidationPaused": [Function],
                        "move": [Function],
                        "onCancel": undefined,
                        "onSubmit": [MockFunction],
                        "pauseValidation": [Function],
                        "pop": [Function],
                        "pristine": true,
                        "push": [Function],
                        "registerField": [Function],
                        "remove": [Function],
                        "removeBatch": [Function],
                        "renderForm": [Function],
                        "reset": [Function],
                        "resetFieldState": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "shift": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                        "update": [Function],
                        "valid": true,
                      }
                    }
                    name="foo"
                    render={[Function]}
                  >
                    <Field
                      FieldArrayProvider={[Function]}
                      FieldProvider={[Function]}
                      arrayValidator={[Function]}
                      fields={
                        Array [
                          Object {
                            "component": "text-field",
                            "label": "foo",
                            "name": "nested component",
                          },
                        ]
                      }
                      formOptions={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "clearOnUnmount": false,
                          "concat": [Function],
                          "destroyOnUnregister": false,
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "handleSubmit": [Function],
                          "initialize": [Function],
                          "insert": [Function],
                          "isValidationPaused": [Function],
                          "move": [Function],
                          "onCancel": undefined,
                          "onSubmit": [MockFunction],
                          "pauseValidation": [Function],
                          "pop": [Function],
                          "pristine": true,
                          "push": [Function],
                          "registerField": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "renderForm": [Function],
                          "reset": [Function],
                          "resetFieldState": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "shift": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                          "valid": true,
                        }
                      }
                      format={[Function]}
                      name="foo"
                      parse={[Function]}
                      reactFinalForm={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "destroyOnUnregister": false,
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "initialize": [Function],
                          "isValidationPaused": [Function],
                          "mutators": Object {
                            "concat": [Function],
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeBatch": [Function],
                            "shift": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                            "update": [Function],
                          },
                          "pauseValidation": [Function],
                          "registerField": [Function],
                          "reset": [Function],
                          "resetFieldState": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                        }
                      }
                      render={[Function]}
                    >
                      <DynamicArray
                        FieldArrayProvider={[Function]}
                        FieldProvider={[Function]}
                        arrayValidator={[Function]}
                        fields={
                          Array [
                            Object {
                              "component": "text-field",
                              "label": "foo",
                              "name": "nested component",
                            },
                          ]
                        }
                        formOptions={
                          Object {
                            "batch": [Function],
                            "blur": [Function],
                            "change": [Function],
                            "clearOnUnmount": false,
                            "concat": [Function],
                            "destroyOnUnregister": false,
                            "focus": [Function],
                            "getFieldState": [Function],
                            "getRegisteredFields": [Function],
                            "getState": [Function],
                            "handleSubmit": [Function],
                            "initialize": [Function],
                            "insert": [Function],
                            "isValidationPaused": [Function],
                            "move": [Function],
                            "onCancel": undefined,
                            "onSubmit": [MockFunction],
                            "pauseValidation": [Function],
                            "pop": [Function],
                            "pristine": true,
                            "push": [Function],
                            "registerField": [Function],
                            "remove": [Function],
                            "removeBatch": [Function],
                            "renderForm": [Function],
                            "reset": [Function],
                            "resetFieldState": [Function],
                            "resumeValidation": [Function],
                            "setConfig": [Function],
                            "shift": [Function],
                            "submit": [Function],
                            "subscribe": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                            "update": [Function],
                            "valid": true,
                          }
                        }
                        input={
                          Object {
                            "name": "foo",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "value": "",
                          }
                        }
                        maxItems={Infinity}
                        meta={
                          Object {
                            "active": false,
                            "data": Object {},
                            "dirty": false,
                            "dirtySinceLastSubmit": false,
                            "error": undefined,
                            "initial": undefined,
                            "invalid": false,
                            "modified": false,
                            "pristine": true,
                            "submitError": undefined,
                            "submitFailed": false,
                            "submitSucceeded": false,
                            "submitting": false,
                            "touched": false,
                            "valid": true,
                            "visited": false,
                          }
                        }
                        minItems={0}
                        noItemsMessage="No items added"
                      >
                        <ReactFinalForm(ReactFinalFormFieldArray(4.18.5)(2.0.1))
                          key="foo"
                          name="foo"
                          validate={[Function]}
                        >
                          <ReactFinalFormFieldArray(4.18.5)(2.0.1)
                            name="foo"
                            reactFinalForm={
                              Object {
                                "batch": [Function],
                                "blur": [Function],
                                "change": [Function],
                                "destroyOnUnregister": false,
                                "focus": [Function],
                                "getFieldState": [Function],
                                "getRegisteredFields": [Function],
                                "getState": [Function],
                                "initialize": [Function],
                                "isValidationPaused": [Function],
                                "mutators": Object {
                                  "concat": [Function],
                                  "insert": [Function],
                                  "move": [Function],
                                  "pop": [Function],
                                  "push": [Function],
                                  "remove": [Function],
                                  "removeBatch": [Function],
                                  "shift": [Function],
                                  "swap": [Function],
                                  "unshift": [Function],
                                  "update": [Function],
                                },
                                "pauseValidation": [Function],
                                "registerField": [Function],
                                "reset": [Function],
                                "resetFieldState": [Function],
                                "resumeValidation": [Function],
                                "setConfig": [Function],
                                "submit": [Function],
                                "subscribe": [Function],
                              }
                            }
                            validate={[Function]}
                          >
                            <Bullseye>
                              <div
                                className="pf-l-bullseye"
                              >
                                <GridItem
                                  sm={12}
                                >
                                  <div
                                    className="pf-l-grid__item pf-m-12-col-on-sm"
                                  >
                                    No items added
                                  </div>
                                </GridItem>
                              </div>
                            </Bullseye>
                            <Grid>
                              <div
                                className="pf-l-grid"
                              >
                                <GridItem
                                  sm={11}
                                >
                                  <div
                                    className="pf-l-grid__item pf-m-11-col-on-sm"
                                  />
                                </GridItem>
                                <GridItem
                                  className="final-form-array-add-container"
                                  sm={1}
                                >
                                  <div
                                    className="pf-l-grid__item pf-m-1-col-on-sm final-form-array-add-container"
                                  >
                                    <Bullseye>
                                      <div
                                        className="pf-l-bullseye"
                                      >
                                        <AddCircleOIcon
                                          className="ddf-final-form-group-add-icon"
                                          onClick={[Function]}
                                        >
                                          <svg
                                            aria-labelledby="icon-title-25"
                                            className="ddf-final-form-group-add-icon"
                                            fill="currentColor"
                                            height="3em"
                                            onClick={[Function]}
                                            role="img"
                                            style={
                                              Object {
                                                "verticalAlign": "-0.375em"
                                              }
                                            }
                                            tabIndex="0"
                                            viewBox="0 64 1024 1024"
                                            width="3em"
                                          >
                                            <title
                                              id="icon-title-25"
                                            >
                                              AddCircleOIcon
                                            </title>
                                            <path
                                              d="M512.059-73.143c-282.338 0-512.059 229.673-512.059 512.025 0 282.238 229.721 511.975 512.059 511.975 282.283 0 511.941-229.735 511.941-511.975 0.005-282.352-229.659-512.025-511.941-512.025zM512.059 826.523c-213.826 0-387.728-173.856-387.728-387.643 0-213.888 173.904-387.691 387.728-387.691 213.717 0 387.671 173.803 387.671 387.691 0.005 213.785-173.957 387.643-387.671 387.643zM726.283 506.777c-3.429 3.477-7.803 5.223-13.138 5.223h-128.005v128.007c0 5.333-1.739 9.71-5.218 13.138s-7.936 5.141-13.351 5.141h-109.143c-5.417 0-9.863-1.714-13.351-5.141-3.481-3.429-5.221-7.808-5.221-13.141v-128.005l-128.007-0.002c-5.333 0-9.71-1.737-13.138-5.218-3.426-3.477-5.141-7.934-5.141-13.351v-109.143c0-5.417 1.714-9.856 5.141-13.351 3.429-3.481 7.808-5.221 13.141-5.221l128.005 0.002v-128.009c0-5.335 1.744-9.707 5.225-13.134 3.477-3.429 7.927-5.145 13.344-5.145h109.143c5.417 0 9.858 1.717 13.351 5.145 3.477 3.429 5.223 7.803 5.223 13.138v128.002h128.007c5.335 0 9.707 1.742 13.134 5.225 3.429 3.477 5.145 7.927 5.145 13.344v109.143c0 5.417-1.717 9.863-5.145 13.351z"
                                              transform="rotate(180 0 512) scale(-1 1)"
                                            />
                                          </svg>
                                        </AddCircleOIcon>
                                      </div>
                                    </Bullseye>
                                  </div>
                                </GridItem>
                              </div>
                            </Grid>
                          </ReactFinalFormFieldArray(4.18.5)(2.0.1)>
                        </ReactFinalForm(ReactFinalFormFieldArray(4.18.5)(2.0.1))>
                      </DynamicArray>
                    </Field>
                  </ReactFinalForm(Field)>
                </FieldProvider>
              </FieldWrapper>
            </FormFieldHideWrapper>
          </FormConditionWrapper>
          <FormControls
            buttonClassName=""
            buttonOrder={
              Array [
                "submit",
                "reset",
                "cancel",
              ]
            }
            canReset={false}
            canSubmit={false}
            cancelLabel="Cancel"
            handleSubmit={[Function]}
            resetLabel="Reset"
            submitLabel="Submit"
          >
            <ReactFinalForm(FormSpy)>
              <FormSpy
                reactFinalForm={
                  Object {
                    "batch": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "destroyOnUnregister": false,
                    "focus": [Function],
                    "getFieldState": [Function],
                    "getRegisteredFields": [Function],
                    "getState": [Function],
                    "initialize": [Function],
                    "isValidationPaused": [Function],
                    "mutators": Object {
                      "concat": [Function],
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "removeBatch": [Function],
                      "shift": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                    },
                    "pauseValidation": [Function],
                    "registerField": [Function],
                    "reset": [Function],
                    "resetFieldState": [Function],
                    "resumeValidation": [Function],
                    "setConfig": [Function],
                    "submit": [Function],
                    "subscribe": [Function],
                  }
                }
              >
                <ButtonGroupLayout
                  className=""
                >
                  <ActionGroup
                    className=""
                  >
                    <div
                      className="pf-c-form__group pf-m-action"
                    >
                      <div
                        className="pf-c-form__actions"
                      >
                        <Toolbar>
                          <div
                            className="pf-l-toolbar"
                          >
                            <ButtonLayout
                              key="form-submit"
                              label="Submit"
                              onClick={[Function]}
                              type="button"
                              variant="primary"
                            >
                              <ToolbarGroup
                                className="data-driven-forms__pf4-button-group"
                              >
                                <div
                                  className="pf-l-toolbar__group data-driven-forms__pf4-button-group"
                                >
                                  <ToolbarItem>
                                    <div
                                      className="pf-l-toolbar__item"
                                    >
                                      <Component
                                        onClick={[Function]}
                                        type="button"
                                        variant="primary"
                                      >
                                        <ComponentWithOuia
                                          component={[Function]}
                                          componentProps={
                                            Object {
                                              "children": Array [
                                                "Submit",
                                                undefined,
                                              ],
                                              "disabled": undefined,
                                              "onClick": [Function],
                                              "type": "button",
                                              "variant": "primary",
                                            }
                                          }
                                          consumerContext={null}
                                        >
                                          <Button
                                            onClick={[Function]}
                                            ouiaContext={
                                              Object {
                                                "isOuia": false,
                                                "ouiaId": null,
                                              }
                                            }
                                            type="button"
                                            variant="primary"
                                          >
                                            <button
                                              aria-disabled={null}
                                              aria-label={null}
                                              className="pf-c-button pf-m-primary"
                                              disabled={false}
                                              onClick={[Function]}
                                              tabIndex={null}
                                              type="button"
                                            >
                                              Submit
                                            </button>
                                          </Button>
                                        </ComponentWithOuia>
                                      </Component>
                                    </div>
                                  </ToolbarItem>
                                </div>
                              </ToolbarGroup>
                            </ButtonLayout>
                          </div>
                        </Toolbar>
                      </div>
                    </div>
                  </ActionGroup>
                </ButtonGroupLayout>
              </FormSpy>
            </ReactFinalForm(FormSpy)>
          </FormControls>
        </form>
      </Form>
    </ReactFinalForm>
  </FormRenderer>
</ContextWrapper>
`;
