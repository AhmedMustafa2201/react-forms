// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renderForm function #condition should render condition field only if contition is array and passes all validations 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Array [
          Object {
            "is": "x",
            "when": Array [
              "a",
              "b",
            ],
          },
          Object {
            "pattern": /fuzz/,
            "when": "c",
          },
        ]
      }
    >
      <Condition
        condition={
          Array [
            Object {
              "is": "x",
              "when": Array [
                "a",
                "b",
              ],
            },
            Object {
              "pattern": /fuzz/,
              "when": "c",
            },
          ]
        }
      >
        <ReactFinalForm(FormSpy)>
          <FormSpy
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "concat": [Function],
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resetFieldState": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
          />
        </ReactFinalForm(FormSpy)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if one of depency fields has correct value 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper
      condition={
        Object {
          "is": "x",
          "when": Array [
            "a",
            "b",
          ],
        }
      }
    >
      <Condition
        condition={
          Object {
            "is": "x",
            "when": Array [
              "a",
              "b",
            ],
          }
        }
      >
        <ReactFinalForm(FormSpy)>
          <FormSpy
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "concat": [Function],
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resetFieldState": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
          />
        </ReactFinalForm(FormSpy)>
      </Condition>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render single field from defined componentTypes 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "text-field": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper>
      <FormFieldHideWrapper
        hideField={false}
      >
        <FieldWrapper
          component={[Function]}
          componentType="text-field"
          name="foo"
          validate={
            Array [
              undefined,
            ]
          }
        >
          <TemporaryWrapper
            FieldArrayProvider={[Function]}
            FieldProvider={[Function]}
            component={[Function]}
            name="foo"
            validate={[Function]}
          >
            <FieldProvider
              FieldArrayProvider={[Function]}
              FieldProvider={[Function]}
              component={[Function]}
              formOptions={
                Object {
                  "renderForm": [Function],
                }
              }
              name="foo"
              validate={[Function]}
            >
              <ReactFinalForm(Field)
                FieldArrayProvider={[Function]}
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "renderForm": [Function],
                  }
                }
                name="foo"
                render={[Function]}
                validate={[Function]}
              >
                <Field
                  FieldArrayProvider={[Function]}
                  FieldProvider={[Function]}
                  formOptions={
                    Object {
                      "renderForm": [Function],
                    }
                  }
                  format={[Function]}
                  name="foo"
                  parse={[Function]}
                  reactFinalForm={
                    Object {
                      "batch": [Function],
                      "blur": [Function],
                      "change": [Function],
                      "destroyOnUnregister": false,
                      "focus": [Function],
                      "getFieldState": [Function],
                      "getRegisteredFields": [Function],
                      "getState": [Function],
                      "initialize": [Function],
                      "isValidationPaused": [Function],
                      "mutators": Object {
                        "concat": [Function],
                        "insert": [Function],
                        "move": [Function],
                        "pop": [Function],
                        "push": [Function],
                        "remove": [Function],
                        "removeBatch": [Function],
                        "shift": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                        "update": [Function],
                      },
                      "pauseValidation": [Function],
                      "registerField": [Function],
                      "reset": [Function],
                      "resetFieldState": [Function],
                      "resumeValidation": [Function],
                      "setConfig": [Function],
                      "submit": [Function],
                      "subscribe": [Function],
                    }
                  }
                  render={[Function]}
                  validate={[Function]}
                >
                  <Component
                    FieldArrayProvider={[Function]}
                    FieldProvider={[Function]}
                    formOptions={
                      Object {
                        "renderForm": [Function],
                      }
                    }
                    input={
                      Object {
                        "name": "foo",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "value": "",
                      }
                    }
                    meta={
                      Object {
                        "active": false,
                        "data": Object {},
                        "dirty": false,
                        "dirtySinceLastSubmit": false,
                        "error": undefined,
                        "initial": undefined,
                        "invalid": false,
                        "modified": false,
                        "pristine": true,
                        "submitError": undefined,
                        "submitFailed": false,
                        "submitSucceeded": false,
                        "submitting": false,
                        "touched": false,
                        "valid": true,
                        "visited": false,
                      }
                    }
                  >
                    <div
                      FieldArrayProvider={[Function]}
                      formOptions={
                        Object {
                          "renderForm": [Function],
                        }
                      }
                      input={
                        Object {
                          "name": "foo",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": undefined,
                          "invalid": false,
                          "modified": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "submitting": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                    >
                      TextField
                    </div>
                  </Component>
                </Field>
              </ReactFinalForm(Field)>
            </FieldProvider>
          </TemporaryWrapper>
        </FieldWrapper>
      </FormFieldHideWrapper>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render single field from with custom componentType 1`] = `
<ContextWrapper
  formFieldsMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper>
      <FormFieldHideWrapper
        hideField={false}
      >
        <FieldWrapper
          component={[Function]}
          componentType="custom-component"
          name="foo"
          validate={
            Array [
              undefined,
            ]
          }
        >
          <CustomComponent
            FieldProvider={[Function]}
            name="foo"
            validate={[Function]}
          >
            <div
              name="foo"
              validate={[Function]}
            >
              Custom component
            </div>
          </CustomComponent>
        </FieldWrapper>
      </FormFieldHideWrapper>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;
