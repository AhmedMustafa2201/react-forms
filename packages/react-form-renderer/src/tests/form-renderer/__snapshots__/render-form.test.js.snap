// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renderForm function #condition should render condition field only if contition is array and passes all validations 1`] = `
<ContextWrapper
  componentMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <SingleField
      component="custom-component"
      key="a"
      name="a"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <CustomComponent
            name="a"
          >
            <FieldProvider
              component={[Function]}
              name="a"
            >
              <TextField
                input={
                  Object {
                    "checked": undefined,
                    "name": "a",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "value": "",
                  }
                }
                meta={
                  Object {
                    "active": false,
                    "data": Object {},
                    "dirty": false,
                    "dirtySinceLastSubmit": false,
                    "error": undefined,
                    "initial": undefined,
                    "invalid": false,
                    "length": undefined,
                    "modified": false,
                    "pristine": true,
                    "submitError": undefined,
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "touched": false,
                    "valid": true,
                    "validating": false,
                    "visited": false,
                  }
                }
              >
                <input
                  id="a"
                  name="a"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  value=""
                />
              </TextField>
            </FieldProvider>
          </CustomComponent>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
    <SingleField
      component="custom-component"
      key="c"
      name="c"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <CustomComponent
            name="c"
          >
            <FieldProvider
              component={[Function]}
              name="c"
            >
              <TextField
                input={
                  Object {
                    "checked": undefined,
                    "name": "c",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "value": "",
                  }
                }
                meta={
                  Object {
                    "active": false,
                    "data": Object {},
                    "dirty": false,
                    "dirtySinceLastSubmit": false,
                    "error": undefined,
                    "initial": undefined,
                    "invalid": false,
                    "length": undefined,
                    "modified": false,
                    "pristine": true,
                    "submitError": undefined,
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "touched": false,
                    "valid": true,
                    "validating": false,
                    "visited": false,
                  }
                }
              >
                <input
                  id="c"
                  name="c"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  value=""
                />
              </TextField>
            </FieldProvider>
          </CustomComponent>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
    <SingleField
      component="custom-component"
      condition={
        Array [
          Object {
            "is": "x",
            "when": Array [
              "a",
              "b",
            ],
          },
          Object {
            "pattern": /fuzz/,
            "when": "c",
          },
        ]
      }
      key="foo"
      name="foo"
    >
      <FormConditionWrapper
        condition={
          Array [
            Object {
              "is": "x",
              "when": Array [
                "a",
                "b",
              ],
            },
            Object {
              "pattern": /fuzz/,
              "when": "c",
            },
          ]
        }
      >
        <FormSpy>
          <Component
            condition={
              Array [
                Object {
                  "is": "x",
                  "when": Array [
                    "a",
                    "b",
                  ],
                },
                Object {
                  "pattern": /fuzz/,
                  "when": "c",
                },
              ]
            }
            values={Object {}}
          />
        </FormSpy>
      </FormConditionWrapper>
    </SingleField>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if one of depency fields has correct value 1`] = `
<ContextWrapper
  componentMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <SingleField
      component="custom-component"
      key="a"
      name="a"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <CustomComponent
            name="a"
          >
            <FieldProvider
              component={[Function]}
              name="a"
            >
              <TextField
                input={
                  Object {
                    "checked": undefined,
                    "name": "a",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "value": "",
                  }
                }
                meta={
                  Object {
                    "active": false,
                    "data": Object {},
                    "dirty": false,
                    "dirtySinceLastSubmit": false,
                    "error": undefined,
                    "initial": undefined,
                    "invalid": false,
                    "length": undefined,
                    "modified": false,
                    "pristine": true,
                    "submitError": undefined,
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "touched": false,
                    "valid": true,
                    "validating": false,
                    "visited": false,
                  }
                }
              >
                <input
                  id="a"
                  name="a"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  value=""
                />
              </TextField>
            </FieldProvider>
          </CustomComponent>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
    <SingleField
      component="custom-component"
      key="b"
      name="b"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <CustomComponent
            name="b"
          >
            <FieldProvider
              component={[Function]}
              name="b"
            >
              <TextField
                input={
                  Object {
                    "checked": undefined,
                    "name": "b",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "value": "",
                  }
                }
                meta={
                  Object {
                    "active": false,
                    "data": Object {},
                    "dirty": false,
                    "dirtySinceLastSubmit": false,
                    "error": undefined,
                    "initial": undefined,
                    "invalid": false,
                    "length": undefined,
                    "modified": false,
                    "pristine": true,
                    "submitError": undefined,
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "touched": false,
                    "valid": true,
                    "validating": false,
                    "visited": false,
                  }
                }
              >
                <input
                  id="b"
                  name="b"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  value=""
                />
              </TextField>
            </FieldProvider>
          </CustomComponent>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
    <SingleField
      component="custom-component"
      condition={
        Object {
          "is": "x",
          "when": Array [
            "a",
            "b",
          ],
        }
      }
      key="foo"
      name="foo"
    >
      <FormConditionWrapper
        condition={
          Object {
            "is": "x",
            "when": Array [
              "a",
              "b",
            ],
          }
        }
      >
        <FormSpy>
          <Component
            condition={
              Object {
                "is": "x",
                "when": Array [
                  "a",
                  "b",
                ],
              }
            }
            values={Object {}}
          />
        </FormSpy>
      </FormConditionWrapper>
    </SingleField>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render single field from defined componentTypes 1`] = `
<ContextWrapper
  componentMapper={
    Object {
      "text-field": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <SingleField
      component="text-field"
      key="foo"
      name="foo"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <text-field
            name="foo"
          >
            <div
              name="foo"
            >
              TextField
            </div>
          </text-field>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render single field from with custom componentType 1`] = `
<ContextWrapper
  componentMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <SingleField
      component="custom-component"
      key="foo"
      name="foo"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <CustomComponent
            name="foo"
          >
            <FieldProvider
              component={[Function]}
              name="foo"
            >
              <TextField
                input={
                  Object {
                    "checked": undefined,
                    "name": "foo",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "value": "",
                  }
                }
                meta={
                  Object {
                    "active": false,
                    "data": Object {},
                    "dirty": false,
                    "dirtySinceLastSubmit": false,
                    "error": undefined,
                    "initial": undefined,
                    "invalid": false,
                    "length": undefined,
                    "modified": false,
                    "pristine": true,
                    "submitError": undefined,
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "touched": false,
                    "valid": true,
                    "validating": false,
                    "visited": false,
                  }
                }
              >
                <input
                  id="foo"
                  name="foo"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  value=""
                />
              </TextField>
            </FieldProvider>
          </CustomComponent>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
  </ReactFinalForm>
</ContextWrapper>
`;
