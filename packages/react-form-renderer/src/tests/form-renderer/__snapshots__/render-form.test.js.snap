// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renderForm function #condition should render condition field only if contition is array and passes all validations 1`] = `
<ContextWrapper
  componentMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <SingleField
      component="custom-component"
      key="a"
      name="a"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <FieldWrapper
            component={[Function]}
            componentType="custom-component"
            name="a"
          >
            <CustomComponent
              name="a"
              validate={[Function]}
            >
              <FieldProvider
                component={[Function]}
                name="a"
                validate={[Function]}
              >
                <TextField
                  input={
                    Object {
                      "checked": undefined,
                      "name": "a",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                      "value": "",
                    }
                  }
                  meta={
                    Object {
                      "active": false,
                      "data": Object {},
                      "dirty": false,
                      "dirtySinceLastSubmit": false,
                      "error": undefined,
                      "initial": undefined,
                      "invalid": false,
                      "length": undefined,
                      "modified": false,
                      "pristine": true,
                      "submitError": undefined,
                      "submitFailed": false,
                      "submitSucceeded": false,
                      "submitting": false,
                      "touched": false,
                      "valid": true,
                      "validating": false,
                      "visited": false,
                    }
                  }
                >
                  <input
                    id="a"
                    name="a"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    value=""
                  />
                </TextField>
              </FieldProvider>
            </CustomComponent>
          </FieldWrapper>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
    <SingleField
      component="custom-component"
      key="c"
      name="c"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <FieldWrapper
            component={[Function]}
            componentType="custom-component"
            name="c"
          >
            <CustomComponent
              name="c"
              validate={[Function]}
            >
              <FieldProvider
                component={[Function]}
                name="c"
                validate={[Function]}
              >
                <TextField
                  input={
                    Object {
                      "checked": undefined,
                      "name": "c",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                      "value": "",
                    }
                  }
                  meta={
                    Object {
                      "active": false,
                      "data": Object {},
                      "dirty": false,
                      "dirtySinceLastSubmit": false,
                      "error": undefined,
                      "initial": undefined,
                      "invalid": false,
                      "length": undefined,
                      "modified": false,
                      "pristine": true,
                      "submitError": undefined,
                      "submitFailed": false,
                      "submitSucceeded": false,
                      "submitting": false,
                      "touched": false,
                      "valid": true,
                      "validating": false,
                      "visited": false,
                    }
                  }
                >
                  <input
                    id="c"
                    name="c"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    value=""
                  />
                </TextField>
              </FieldProvider>
            </CustomComponent>
          </FieldWrapper>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
    <SingleField
      component="custom-component"
      condition={
        Array [
          Object {
            "is": "x",
            "when": Array [
              "a",
              "b",
            ],
          },
          Object {
            "pattern": /fuzz/,
            "when": "c",
          },
        ]
      }
      key="foo"
      name="foo"
    >
      <FormConditionWrapper
        condition={
          Array [
            Object {
              "is": "x",
              "when": Array [
                "a",
                "b",
              ],
            },
            Object {
              "pattern": /fuzz/,
              "when": "c",
            },
          ]
        }
      >
        <Condition
          condition={
            Array [
              Object {
                "is": "x",
                "when": Array [
                  "a",
                  "b",
                ],
              },
              Object {
                "pattern": /fuzz/,
                "when": "c",
              },
            ]
          }
        >
          <FormSpy />
        </Condition>
      </FormConditionWrapper>
    </SingleField>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function #condition should render condition field only if one of depency fields has correct value 1`] = `
<ContextWrapper
  componentMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <SingleField
      component="custom-component"
      key="a"
      name="a"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <FieldWrapper
            component={[Function]}
            componentType="custom-component"
            name="a"
          >
            <CustomComponent
              name="a"
              validate={[Function]}
            >
              <FieldProvider
                component={[Function]}
                name="a"
                validate={[Function]}
              >
                <TextField
                  input={
                    Object {
                      "checked": undefined,
                      "name": "a",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                      "value": "",
                    }
                  }
                  meta={
                    Object {
                      "active": false,
                      "data": Object {},
                      "dirty": false,
                      "dirtySinceLastSubmit": false,
                      "error": undefined,
                      "initial": undefined,
                      "invalid": false,
                      "length": undefined,
                      "modified": false,
                      "pristine": true,
                      "submitError": undefined,
                      "submitFailed": false,
                      "submitSucceeded": false,
                      "submitting": false,
                      "touched": false,
                      "valid": true,
                      "validating": false,
                      "visited": false,
                    }
                  }
                >
                  <input
                    id="a"
                    name="a"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    value=""
                  />
                </TextField>
              </FieldProvider>
            </CustomComponent>
          </FieldWrapper>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
    <SingleField
      component="custom-component"
      key="b"
      name="b"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <FieldWrapper
            component={[Function]}
            componentType="custom-component"
            name="b"
          >
            <CustomComponent
              name="b"
              validate={[Function]}
            >
              <FieldProvider
                component={[Function]}
                name="b"
                validate={[Function]}
              >
                <TextField
                  input={
                    Object {
                      "checked": undefined,
                      "name": "b",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                      "value": "",
                    }
                  }
                  meta={
                    Object {
                      "active": false,
                      "data": Object {},
                      "dirty": false,
                      "dirtySinceLastSubmit": false,
                      "error": undefined,
                      "initial": undefined,
                      "invalid": false,
                      "length": undefined,
                      "modified": false,
                      "pristine": true,
                      "submitError": undefined,
                      "submitFailed": false,
                      "submitSucceeded": false,
                      "submitting": false,
                      "touched": false,
                      "valid": true,
                      "validating": false,
                      "visited": false,
                    }
                  }
                >
                  <input
                    id="b"
                    name="b"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    value=""
                  />
                </TextField>
              </FieldProvider>
            </CustomComponent>
          </FieldWrapper>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
    <SingleField
      component="custom-component"
      condition={
        Object {
          "is": "x",
          "when": Array [
            "a",
            "b",
          ],
        }
      }
      key="foo"
      name="foo"
    >
      <FormConditionWrapper
        condition={
          Object {
            "is": "x",
            "when": Array [
              "a",
              "b",
            ],
          }
        }
      >
        <Condition
          condition={
            Object {
              "is": "x",
              "when": Array [
                "a",
                "b",
              ],
            }
          }
        >
          <FormSpy />
        </Condition>
      </FormConditionWrapper>
    </SingleField>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render single field from defined componentTypes 1`] = `
<ContextWrapper
  componentMapper={
    Object {
      "text-field": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <SingleField
      component="text-field"
      key="foo"
      name="foo"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <FieldWrapper
            component={[Function]}
            componentType="text-field"
            name="foo"
          >
            <Component
              name="foo"
              validate={[Function]}
            >
              <div
                name="foo"
                validate={[Function]}
              >
                TextField
              </div>
            </Component>
          </FieldWrapper>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render single field from with custom componentType 1`] = `
<ContextWrapper
  componentMapper={
    Object {
      "custom-component": [Function],
    }
  }
>
  <ReactFinalForm
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <SingleField
      component="custom-component"
      key="foo"
      name="foo"
    >
      <FormConditionWrapper>
        <FormFieldHideWrapper
          hideField={false}
        >
          <FieldWrapper
            component={[Function]}
            componentType="custom-component"
            name="foo"
          >
            <CustomComponent
              name="foo"
              validate={[Function]}
            >
              <FieldProvider
                component={[Function]}
                name="foo"
                validate={[Function]}
              >
                <TextField
                  input={
                    Object {
                      "checked": undefined,
                      "name": "foo",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                      "value": "",
                    }
                  }
                  meta={
                    Object {
                      "active": false,
                      "data": Object {},
                      "dirty": false,
                      "dirtySinceLastSubmit": false,
                      "error": undefined,
                      "initial": undefined,
                      "invalid": false,
                      "length": undefined,
                      "modified": false,
                      "pristine": true,
                      "submitError": undefined,
                      "submitFailed": false,
                      "submitSucceeded": false,
                      "submitting": false,
                      "touched": false,
                      "valid": true,
                      "validating": false,
                      "visited": false,
                    }
                  }
                >
                  <input
                    id="foo"
                    name="foo"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    value=""
                  />
                </TextField>
              </FieldProvider>
            </CustomComponent>
          </FieldWrapper>
        </FormFieldHideWrapper>
      </FormConditionWrapper>
    </SingleField>
  </ReactFinalForm>
</ContextWrapper>
`;
