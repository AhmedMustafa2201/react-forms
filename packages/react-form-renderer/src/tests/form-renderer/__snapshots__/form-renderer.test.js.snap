// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FormRenderer /> should render form from schema 1`] = `
<FormRenderer
  clearOnUnmount={false}
  formFieldsMapper={
    Object {
      "checkbox": [Function],
      "date-picker": [Function],
      "radio": [Function],
      "select-field": [Function],
      "sub-form": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea-field": [Function],
      "time-picker": [Function],
    }
  }
  formTemplate={[Function]}
  initialValues={Object {}}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "text-field",
          "name": "component1",
        },
        Object {
          "component": "select-field",
          "name": "secret",
        },
      ],
    }
  }
>
  <ReactFinalForm
    decorators={
      Array [
        [Function],
      ]
    }
    initialValues={Object {}}
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <FormTemplate
      FormSpy={[Function]}
      formFields={
        Array [
          <React.Fragment>
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          </React.Fragment>,
          <React.Fragment>
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          </React.Fragment>,
        ]
      }
      formOptions={
        Object {
          "batch": [Function],
          "blur": [Function],
          "change": [Function],
          "clearOnUnmount": false,
          "clearedValue": undefined,
          "concat": [Function],
          "destroyOnUnregister": false,
          "focus": [Function],
          "getFieldState": [Function],
          "getRegisteredFields": [Function],
          "getState": [Function],
          "handleSubmit": [Function],
          "initialize": [Function],
          "insert": [Function],
          "isValidationPaused": [Function],
          "move": [Function],
          "onCancel": undefined,
          "onReset": undefined,
          "onSubmit": [MockFunction],
          "pauseValidation": [Function],
          "pop": [Function],
          "pristine": true,
          "push": [Function],
          "registerField": [Function],
          "remove": [Function],
          "removeBatch": [Function],
          "renderForm": [Function],
          "reset": [Function],
          "resetFieldState": [Function],
          "resumeValidation": [Function],
          "setConfig": [Function],
          "shift": [Function],
          "submit": [Function],
          "subscribe": [Function],
          "swap": [Function],
          "unshift": [Function],
          "update": [Function],
          "valid": true,
        }
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "text-field",
              "name": "component1",
            },
            Object {
              "component": "select-field",
              "name": "secret",
            },
          ],
        }
      }
    >
      <form
        onSubmit={[Function]}
      >
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={false}
          >
            <FieldWrapper
              component={[Function]}
              componentType="text-field"
              name="component1"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <TemporaryWrapper
                FieldArrayProvider={[Function]}
                FieldProvider={[Function]}
                component={[Function]}
                name="component1"
                validate={[Function]}
              >
                <FieldProvider
                  FieldArrayProvider={[Function]}
                  FieldProvider={[Function]}
                  component={[Function]}
                  formOptions={
                    Object {
                      "batch": [Function],
                      "blur": [Function],
                      "change": [Function],
                      "clearOnUnmount": false,
                      "clearedValue": undefined,
                      "concat": [Function],
                      "destroyOnUnregister": false,
                      "focus": [Function],
                      "getFieldState": [Function],
                      "getRegisteredFields": [Function],
                      "getState": [Function],
                      "handleSubmit": [Function],
                      "initialize": [Function],
                      "insert": [Function],
                      "isValidationPaused": [Function],
                      "move": [Function],
                      "onCancel": undefined,
                      "onReset": undefined,
                      "onSubmit": [MockFunction],
                      "pauseValidation": [Function],
                      "pop": [Function],
                      "pristine": true,
                      "push": [Function],
                      "registerField": [Function],
                      "remove": [Function],
                      "removeBatch": [Function],
                      "renderForm": [Function],
                      "reset": [Function],
                      "resetFieldState": [Function],
                      "resumeValidation": [Function],
                      "setConfig": [Function],
                      "shift": [Function],
                      "submit": [Function],
                      "subscribe": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                      "valid": true,
                    }
                  }
                  name="component1"
                  validate={[Function]}
                >
                  <ReactFinalForm(Field)
                    FieldArrayProvider={[Function]}
                    FieldProvider={[Function]}
                    formOptions={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "clearOnUnmount": false,
                        "clearedValue": undefined,
                        "concat": [Function],
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "handleSubmit": [Function],
                        "initialize": [Function],
                        "insert": [Function],
                        "isValidationPaused": [Function],
                        "move": [Function],
                        "onCancel": undefined,
                        "onReset": undefined,
                        "onSubmit": [MockFunction],
                        "pauseValidation": [Function],
                        "pop": [Function],
                        "pristine": true,
                        "push": [Function],
                        "registerField": [Function],
                        "remove": [Function],
                        "removeBatch": [Function],
                        "renderForm": [Function],
                        "reset": [Function],
                        "resetFieldState": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "shift": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                        "update": [Function],
                        "valid": true,
                      }
                    }
                    name="component1"
                    render={[Function]}
                    validate={[Function]}
                  >
                    <Field
                      FieldArrayProvider={[Function]}
                      FieldProvider={[Function]}
                      formOptions={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "clearOnUnmount": false,
                          "clearedValue": undefined,
                          "concat": [Function],
                          "destroyOnUnregister": false,
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "handleSubmit": [Function],
                          "initialize": [Function],
                          "insert": [Function],
                          "isValidationPaused": [Function],
                          "move": [Function],
                          "onCancel": undefined,
                          "onReset": undefined,
                          "onSubmit": [MockFunction],
                          "pauseValidation": [Function],
                          "pop": [Function],
                          "pristine": true,
                          "push": [Function],
                          "registerField": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "renderForm": [Function],
                          "reset": [Function],
                          "resetFieldState": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "shift": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                          "valid": true,
                        }
                      }
                      format={[Function]}
                      name="component1"
                      parse={[Function]}
                      reactFinalForm={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "destroyOnUnregister": false,
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "initialize": [Function],
                          "isValidationPaused": [Function],
                          "mutators": Object {
                            "concat": [Function],
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeBatch": [Function],
                            "shift": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                            "update": [Function],
                          },
                          "pauseValidation": [Function],
                          "registerField": [Function],
                          "reset": [Function],
                          "resetFieldState": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                        }
                      }
                      render={[Function]}
                      validate={[Function]}
                    >
                      <Component
                        FieldArrayProvider={[Function]}
                        FieldProvider={[Function]}
                        formOptions={
                          Object {
                            "batch": [Function],
                            "blur": [Function],
                            "change": [Function],
                            "clearOnUnmount": false,
                            "clearedValue": undefined,
                            "concat": [Function],
                            "destroyOnUnregister": false,
                            "focus": [Function],
                            "getFieldState": [Function],
                            "getRegisteredFields": [Function],
                            "getState": [Function],
                            "handleSubmit": [Function],
                            "initialize": [Function],
                            "insert": [Function],
                            "isValidationPaused": [Function],
                            "move": [Function],
                            "onCancel": undefined,
                            "onReset": undefined,
                            "onSubmit": [MockFunction],
                            "pauseValidation": [Function],
                            "pop": [Function],
                            "pristine": true,
                            "push": [Function],
                            "registerField": [Function],
                            "remove": [Function],
                            "removeBatch": [Function],
                            "renderForm": [Function],
                            "reset": [Function],
                            "resetFieldState": [Function],
                            "resumeValidation": [Function],
                            "setConfig": [Function],
                            "shift": [Function],
                            "submit": [Function],
                            "subscribe": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                            "update": [Function],
                            "valid": true,
                          }
                        }
                        input={
                          Object {
                            "name": "component1",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "value": "",
                          }
                        }
                        meta={
                          Object {
                            "active": false,
                            "data": Object {},
                            "dirty": false,
                            "dirtySinceLastSubmit": false,
                            "error": undefined,
                            "initial": undefined,
                            "invalid": false,
                            "modified": false,
                            "pristine": true,
                            "submitError": undefined,
                            "submitFailed": false,
                            "submitSucceeded": false,
                            "submitting": false,
                            "touched": false,
                            "valid": true,
                            "visited": false,
                          }
                        }
                      >
                        <div
                          className="nested-item"
                        >
                          Text field
                        </div>
                      </Component>
                    </Field>
                  </ReactFinalForm(Field)>
                </FieldProvider>
              </TemporaryWrapper>
            </FieldWrapper>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={false}
          >
            <FieldWrapper
              component={[Function]}
              componentType="select-field"
              name="secret"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <TemporaryWrapper
                FieldArrayProvider={[Function]}
                FieldProvider={[Function]}
                component={[Function]}
                name="secret"
                validate={[Function]}
              >
                <FieldProvider
                  FieldArrayProvider={[Function]}
                  FieldProvider={[Function]}
                  component={[Function]}
                  formOptions={
                    Object {
                      "batch": [Function],
                      "blur": [Function],
                      "change": [Function],
                      "clearOnUnmount": false,
                      "clearedValue": undefined,
                      "concat": [Function],
                      "destroyOnUnregister": false,
                      "focus": [Function],
                      "getFieldState": [Function],
                      "getRegisteredFields": [Function],
                      "getState": [Function],
                      "handleSubmit": [Function],
                      "initialize": [Function],
                      "insert": [Function],
                      "isValidationPaused": [Function],
                      "move": [Function],
                      "onCancel": undefined,
                      "onReset": undefined,
                      "onSubmit": [MockFunction],
                      "pauseValidation": [Function],
                      "pop": [Function],
                      "pristine": true,
                      "push": [Function],
                      "registerField": [Function],
                      "remove": [Function],
                      "removeBatch": [Function],
                      "renderForm": [Function],
                      "reset": [Function],
                      "resetFieldState": [Function],
                      "resumeValidation": [Function],
                      "setConfig": [Function],
                      "shift": [Function],
                      "submit": [Function],
                      "subscribe": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                      "valid": true,
                    }
                  }
                  name="secret"
                  validate={[Function]}
                >
                  <ReactFinalForm(Field)
                    FieldArrayProvider={[Function]}
                    FieldProvider={[Function]}
                    formOptions={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "clearOnUnmount": false,
                        "clearedValue": undefined,
                        "concat": [Function],
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "handleSubmit": [Function],
                        "initialize": [Function],
                        "insert": [Function],
                        "isValidationPaused": [Function],
                        "move": [Function],
                        "onCancel": undefined,
                        "onReset": undefined,
                        "onSubmit": [MockFunction],
                        "pauseValidation": [Function],
                        "pop": [Function],
                        "pristine": true,
                        "push": [Function],
                        "registerField": [Function],
                        "remove": [Function],
                        "removeBatch": [Function],
                        "renderForm": [Function],
                        "reset": [Function],
                        "resetFieldState": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "shift": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                        "update": [Function],
                        "valid": true,
                      }
                    }
                    name="secret"
                    render={[Function]}
                    validate={[Function]}
                  >
                    <Field
                      FieldArrayProvider={[Function]}
                      FieldProvider={[Function]}
                      formOptions={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "clearOnUnmount": false,
                          "clearedValue": undefined,
                          "concat": [Function],
                          "destroyOnUnregister": false,
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "handleSubmit": [Function],
                          "initialize": [Function],
                          "insert": [Function],
                          "isValidationPaused": [Function],
                          "move": [Function],
                          "onCancel": undefined,
                          "onReset": undefined,
                          "onSubmit": [MockFunction],
                          "pauseValidation": [Function],
                          "pop": [Function],
                          "pristine": true,
                          "push": [Function],
                          "registerField": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "renderForm": [Function],
                          "reset": [Function],
                          "resetFieldState": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "shift": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                          "valid": true,
                        }
                      }
                      format={[Function]}
                      name="secret"
                      parse={[Function]}
                      reactFinalForm={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "destroyOnUnregister": false,
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "initialize": [Function],
                          "isValidationPaused": [Function],
                          "mutators": Object {
                            "concat": [Function],
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "removeBatch": [Function],
                            "shift": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                            "update": [Function],
                          },
                          "pauseValidation": [Function],
                          "registerField": [Function],
                          "reset": [Function],
                          "resetFieldState": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                        }
                      }
                      render={[Function]}
                      validate={[Function]}
                    >
                      <Component
                        FieldArrayProvider={[Function]}
                        FieldProvider={[Function]}
                        formOptions={
                          Object {
                            "batch": [Function],
                            "blur": [Function],
                            "change": [Function],
                            "clearOnUnmount": false,
                            "clearedValue": undefined,
                            "concat": [Function],
                            "destroyOnUnregister": false,
                            "focus": [Function],
                            "getFieldState": [Function],
                            "getRegisteredFields": [Function],
                            "getState": [Function],
                            "handleSubmit": [Function],
                            "initialize": [Function],
                            "insert": [Function],
                            "isValidationPaused": [Function],
                            "move": [Function],
                            "onCancel": undefined,
                            "onReset": undefined,
                            "onSubmit": [MockFunction],
                            "pauseValidation": [Function],
                            "pop": [Function],
                            "pristine": true,
                            "push": [Function],
                            "registerField": [Function],
                            "remove": [Function],
                            "removeBatch": [Function],
                            "renderForm": [Function],
                            "reset": [Function],
                            "resetFieldState": [Function],
                            "resumeValidation": [Function],
                            "setConfig": [Function],
                            "shift": [Function],
                            "submit": [Function],
                            "subscribe": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                            "update": [Function],
                            "valid": true,
                          }
                        }
                        input={
                          Object {
                            "name": "secret",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "value": "",
                          }
                        }
                        meta={
                          Object {
                            "active": false,
                            "data": Object {},
                            "dirty": false,
                            "dirtySinceLastSubmit": false,
                            "error": undefined,
                            "initial": undefined,
                            "invalid": false,
                            "modified": false,
                            "pristine": true,
                            "submitError": undefined,
                            "submitFailed": false,
                            "submitSucceeded": false,
                            "submitting": false,
                            "touched": false,
                            "valid": true,
                            "visited": false,
                          }
                        }
                      >
                        <div
                          className="nested-item"
                        >
                          Select field
                        </div>
                      </Component>
                    </Field>
                  </ReactFinalForm(Field)>
                </FieldProvider>
              </TemporaryWrapper>
            </FieldWrapper>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <ReactFinalForm(FormSpy)>
          <FormSpy
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "concat": [Function],
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resetFieldState": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
          >
            <button
              disabled={false}
              type="submit"
            >
              Submit
            </button>
            <button
              disabled={true}
              onClick={[Function]}
              type="button"
            >
              Reset
            </button>
            <button
              disabled={true}
              onClick={[Function]}
              type="button"
            >
              Cancel
            </button>
          </FormSpy>
        </ReactFinalForm(FormSpy)>
      </form>
    </FormTemplate>
  </ReactFinalForm>
</FormRenderer>
`;

exports[`<FormRenderer /> should render hidden field 1`] = `
<FormRenderer
  clearOnUnmount={false}
  formFieldsMapper={
    Object {
      "checkbox": [Function],
      "date-picker": [Function],
      "radio": [Function],
      "select-field": [Function],
      "sub-form": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea-field": [Function],
      "time-picker": [Function],
    }
  }
  formTemplate={[Function]}
  initialValues={Object {}}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": Array [
            "text-field",
          ],
          "label": "Visible",
          "name": "visible",
        },
        Object {
          "component": Array [
            "text-field",
          ],
          "hideField": true,
          "label": "Hidden",
          "name": "hidden",
        },
      ],
    }
  }
>
  <ReactFinalForm
    decorators={
      Array [
        [Function],
      ]
    }
    initialValues={Object {}}
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <FormTemplate
      FormSpy={[Function]}
      formFields={
        Array [
          <React.Fragment>
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          </React.Fragment>,
          <React.Fragment>
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          </React.Fragment>,
        ]
      }
      formOptions={
        Object {
          "batch": [Function],
          "blur": [Function],
          "change": [Function],
          "clearOnUnmount": false,
          "clearedValue": undefined,
          "concat": [Function],
          "destroyOnUnregister": false,
          "focus": [Function],
          "getFieldState": [Function],
          "getRegisteredFields": [Function],
          "getState": [Function],
          "handleSubmit": [Function],
          "initialize": [Function],
          "insert": [Function],
          "isValidationPaused": [Function],
          "move": [Function],
          "onCancel": undefined,
          "onReset": undefined,
          "onSubmit": [MockFunction],
          "pauseValidation": [Function],
          "pop": [Function],
          "pristine": true,
          "push": [Function],
          "registerField": [Function],
          "remove": [Function],
          "removeBatch": [Function],
          "renderForm": [Function],
          "reset": [Function],
          "resetFieldState": [Function],
          "resumeValidation": [Function],
          "setConfig": [Function],
          "shift": [Function],
          "submit": [Function],
          "subscribe": [Function],
          "swap": [Function],
          "unshift": [Function],
          "update": [Function],
          "valid": true,
        }
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": Array [
                "text-field",
              ],
              "label": "Visible",
              "name": "visible",
            },
            Object {
              "component": Array [
                "text-field",
              ],
              "hideField": true,
              "label": "Hidden",
              "name": "hidden",
            },
          ],
        }
      }
    >
      <form
        onSubmit={[Function]}
      >
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={false}
          >
            <FieldWrapper
              component={[Function]}
              componentType={
                Array [
                  "text-field",
                ]
              }
              label="Visible"
              name="visible"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <Component
                FieldProvider={[Function]}
                FormSpyProvider={[Function]}
                label="Visible"
                name="visible"
                validate={[Function]}
              >
                <div
                  className="nested-item"
                >
                  Text field
                </div>
              </Component>
            </FieldWrapper>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={true}
          >
            <div
              hidden={true}
            >
              <FieldWrapper
                component={[Function]}
                componentType={
                  Array [
                    "text-field",
                  ]
                }
                label="Hidden"
                name="hidden"
                validate={
                  Array [
                    undefined,
                  ]
                }
              >
                <Component
                  FieldProvider={[Function]}
                  FormSpyProvider={[Function]}
                  label="Hidden"
                  name="hidden"
                  validate={[Function]}
                >
                  <div
                    className="nested-item"
                  >
                    Text field
                  </div>
                </Component>
              </FieldWrapper>
            </div>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <ReactFinalForm(FormSpy)>
          <FormSpy
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "destroyOnUnregister": false,
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "concat": [Function],
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resetFieldState": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
          >
            <button
              disabled={false}
              type="submit"
            >
              Submit
            </button>
            <button
              disabled={true}
              onClick={[Function]}
              type="button"
            >
              Reset
            </button>
            <button
              disabled={true}
              onClick={[Function]}
              type="button"
            >
              Cancel
            </button>
          </FormSpy>
        </ReactFinalForm(FormSpy)>
      </form>
    </FormTemplate>
  </ReactFinalForm>
</FormRenderer>
`;
