// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FormRenderer /> should render form from schema 1`] = `
<FormRenderer
  clearOnUnmount={false}
  formFieldsMapper={
    Object {
      "checkbox": [Function],
      "date-picker": [Function],
      "radio": [Function],
      "select-field": [Function],
      "sub-form": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea-field": [Function],
      "time-picker": [Function],
    }
  }
  formTemplate={[Function]}
  initialValues={Object {}}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "text-field",
          "name": "component1",
        },
        Object {
          "component": "select-field",
          "name": "secret",
        },
      ],
    }
  }
>
  <ReactFinalForm
    decorators={
      Array [
        [Function],
      ]
    }
    initialValues={Object {}}
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <FormTemplate
      formFields={
        Array [
          <React.Fragment>
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          </React.Fragment>,
          <React.Fragment>
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          </React.Fragment>,
        ]
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "text-field",
              "name": "component1",
            },
            Object {
              "component": "select-field",
              "name": "secret",
            },
          ],
        }
      }
    >
      <form
        onSubmit={[Function]}
      >
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={false}
          >
            <FieldWrapper
              component={[Function]}
              componentType="text-field"
              name="component1"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <TextField
                FieldProvider={[Function]}
                name="component1"
                validate={[Function]}
              >
                <div
                  className="nested-item"
                >
                  <input
                    id="component1"
                    name="component1"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    value=""
                  />
                </div>
              </TextField>
            </FieldWrapper>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={false}
          >
            <FieldWrapper
              component={[Function]}
              componentType="select-field"
              name="secret"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <Component
                FieldProvider={[Function]}
                name="secret"
                validate={[Function]}
              >
                <div
                  className="nested-item"
                >
                  Select field
                </div>
              </Component>
            </FieldWrapper>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <FormSpy>
          <button
            disabled={false}
            type="submit"
          >
            Submit
          </button>
          <button
            disabled={true}
            onClick={[Function]}
            type="button"
          >
            Reset
          </button>
          <button
            disabled={true}
            onClick={[Function]}
            type="button"
          >
            Cancel
          </button>
        </FormSpy>
      </form>
    </FormTemplate>
  </ReactFinalForm>
</FormRenderer>
`;

exports[`<FormRenderer /> should render hidden field 1`] = `
<FormRenderer
  clearOnUnmount={false}
  formFieldsMapper={
    Object {
      "checkbox": [Function],
      "date-picker": [Function],
      "radio": [Function],
      "select-field": [Function],
      "sub-form": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea-field": [Function],
      "time-picker": [Function],
    }
  }
  formTemplate={[Function]}
  initialValues={Object {}}
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "text-field",
          "label": "Visible",
          "name": "visible",
        },
        Object {
          "component": "text-field",
          "hideField": true,
          "label": "Hidden",
          "name": "hidden",
        },
      ],
    }
  }
>
  <ReactFinalForm
    decorators={
      Array [
        [Function],
      ]
    }
    initialValues={Object {}}
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <FormTemplate
      formFields={
        Array [
          <React.Fragment>
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          </React.Fragment>,
          <React.Fragment>
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          </React.Fragment>,
        ]
      }
      schema={
        Object {
          "fields": Array [
            Object {
              "component": "text-field",
              "label": "Visible",
              "name": "visible",
            },
            Object {
              "component": "text-field",
              "hideField": true,
              "label": "Hidden",
              "name": "hidden",
            },
          ],
        }
      }
    >
      <form
        onSubmit={[Function]}
      >
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={false}
          >
            <FieldWrapper
              component={[Function]}
              componentType="text-field"
              label="Visible"
              name="visible"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <TextField
                FieldProvider={[Function]}
                label="Visible"
                name="visible"
                validate={[Function]}
              >
                <div
                  className="nested-item"
                >
                  <input
                    id="visible"
                    name="visible"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    value=""
                  />
                </div>
              </TextField>
            </FieldWrapper>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={true}
          >
            <div
              hidden={true}
            >
              <FieldWrapper
                component={[Function]}
                componentType="text-field"
                label="Hidden"
                name="hidden"
                validate={
                  Array [
                    undefined,
                  ]
                }
              >
                <TextField
                  FieldProvider={[Function]}
                  label="Hidden"
                  name="hidden"
                  validate={[Function]}
                >
                  <div
                    className="nested-item"
                  >
                    <input
                      id="hidden"
                      name="hidden"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      value=""
                    />
                  </div>
                </TextField>
              </FieldWrapper>
            </div>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <FormSpy>
          <button
            disabled={false}
            type="submit"
          >
            Submit
          </button>
          <button
            disabled={true}
            onClick={[Function]}
            type="button"
          >
            Reset
          </button>
          <button
            disabled={true}
            onClick={[Function]}
            type="button"
          >
            Cancel
          </button>
        </FormSpy>
      </form>
    </FormTemplate>
  </ReactFinalForm>
</FormRenderer>
`;
