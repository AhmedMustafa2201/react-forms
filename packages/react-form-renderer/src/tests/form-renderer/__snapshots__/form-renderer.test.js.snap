// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FormRenderer /> should render form from schema 1`] = `
<FormRenderer
  buttonClassName=""
  buttonsLabels={Object {}}
  clearOnUnmount={false}
  disableSubmit={Array []}
  formFieldsMapper={
    Object {
      "checkbox": [Function],
      "date-picker": [Function],
      "radio": [Function],
      "select-field": [Function],
      "sub-form": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea-field": [Function],
      "time-picker": [Function],
    }
  }
  initialValues={Object {}}
  layoutMapper={
    Object {
      "Button": [Function],
      "ButtonGroup": [Function],
      "Description": [Function],
      "FormWrapper": [Function],
      "Title": [Function],
    }
  }
  onSubmit={[MockFunction]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": "text-field",
          "name": "component1",
        },
        Object {
          "component": "select-field",
          "name": "secret",
        },
      ],
    }
  }
  showFormControls={true}
>
  <ReactFinalForm
    decorators={
      Array [
        [Function],
      ]
    }
    initialValues={Object {}}
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <Component
      onSubmit={[Function]}
    >
      <form>
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={false}
          >
            <FieldWrapper
              component={[Function]}
              componentType="text-field"
              formOptions={
                Object {
                  "batch": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "clearOnUnmount": false,
                  "clearedValue": undefined,
                  "concat": [Function],
                  "destroyOnUnregister": false,
                  "focus": [Function],
                  "getFieldState": [Function],
                  "getRegisteredFields": [Function],
                  "getState": [Function],
                  "handleSubmit": [Function],
                  "initialize": [Function],
                  "insert": [Function],
                  "isValidationPaused": [Function],
                  "move": [Function],
                  "onCancel": undefined,
                  "onSubmit": [MockFunction],
                  "pauseValidation": [Function],
                  "pop": [Function],
                  "pristine": true,
                  "push": [Function],
                  "registerField": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "renderForm": [Function],
                  "reset": [Function],
                  "resetFieldState": [Function],
                  "resumeValidation": [Function],
                  "setConfig": [Function],
                  "shift": [Function],
                  "submit": [Function],
                  "subscribe": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                  "valid": true,
                }
              }
              name="component1"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <FieldProvider
                FieldArrayProvider={[Function]}
                FieldProvider={[Function]}
                component={[Function]}
                formOptions={
                  Object {
                    "batch": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "clearOnUnmount": false,
                    "clearedValue": undefined,
                    "concat": [Function],
                    "destroyOnUnregister": false,
                    "focus": [Function],
                    "getFieldState": [Function],
                    "getRegisteredFields": [Function],
                    "getState": [Function],
                    "handleSubmit": [Function],
                    "initialize": [Function],
                    "insert": [Function],
                    "isValidationPaused": [Function],
                    "move": [Function],
                    "onCancel": undefined,
                    "onSubmit": [MockFunction],
                    "pauseValidation": [Function],
                    "pop": [Function],
                    "pristine": true,
                    "push": [Function],
                    "registerField": [Function],
                    "remove": [Function],
                    "removeBatch": [Function],
                    "renderForm": [Function],
                    "reset": [Function],
                    "resetFieldState": [Function],
                    "resumeValidation": [Function],
                    "setConfig": [Function],
                    "shift": [Function],
                    "submit": [Function],
                    "subscribe": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                    "valid": true,
                  }
                }
                name="component1"
                validate={[Function]}
              >
                <ReactFinalForm(Field)
                  FieldArrayProvider={[Function]}
                  FieldProvider={[Function]}
                  formOptions={
                    Object {
                      "batch": [Function],
                      "blur": [Function],
                      "change": [Function],
                      "clearOnUnmount": false,
                      "clearedValue": undefined,
                      "concat": [Function],
                      "destroyOnUnregister": false,
                      "focus": [Function],
                      "getFieldState": [Function],
                      "getRegisteredFields": [Function],
                      "getState": [Function],
                      "handleSubmit": [Function],
                      "initialize": [Function],
                      "insert": [Function],
                      "isValidationPaused": [Function],
                      "move": [Function],
                      "onCancel": undefined,
                      "onSubmit": [MockFunction],
                      "pauseValidation": [Function],
                      "pop": [Function],
                      "pristine": true,
                      "push": [Function],
                      "registerField": [Function],
                      "remove": [Function],
                      "removeBatch": [Function],
                      "renderForm": [Function],
                      "reset": [Function],
                      "resetFieldState": [Function],
                      "resumeValidation": [Function],
                      "setConfig": [Function],
                      "shift": [Function],
                      "submit": [Function],
                      "subscribe": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                      "valid": true,
                    }
                  }
                  name="component1"
                  render={[Function]}
                  validate={[Function]}
                >
                  <Field
                    FieldArrayProvider={[Function]}
                    FieldProvider={[Function]}
                    formOptions={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "clearOnUnmount": false,
                        "clearedValue": undefined,
                        "concat": [Function],
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "handleSubmit": [Function],
                        "initialize": [Function],
                        "insert": [Function],
                        "isValidationPaused": [Function],
                        "move": [Function],
                        "onCancel": undefined,
                        "onSubmit": [MockFunction],
                        "pauseValidation": [Function],
                        "pop": [Function],
                        "pristine": true,
                        "push": [Function],
                        "registerField": [Function],
                        "remove": [Function],
                        "removeBatch": [Function],
                        "renderForm": [Function],
                        "reset": [Function],
                        "resetFieldState": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "shift": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                        "update": [Function],
                        "valid": true,
                      }
                    }
                    format={[Function]}
                    name="component1"
                    parse={[Function]}
                    reactFinalForm={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "initialize": [Function],
                        "isValidationPaused": [Function],
                        "mutators": Object {
                          "concat": [Function],
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "shift": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                        },
                        "pauseValidation": [Function],
                        "registerField": [Function],
                        "reset": [Function],
                        "resetFieldState": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                      }
                    }
                    render={[Function]}
                    validate={[Function]}
                  >
                    <Component
                      FieldArrayProvider={[Function]}
                      FieldProvider={[Function]}
                      formOptions={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "clearOnUnmount": false,
                          "clearedValue": undefined,
                          "concat": [Function],
                          "destroyOnUnregister": false,
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "handleSubmit": [Function],
                          "initialize": [Function],
                          "insert": [Function],
                          "isValidationPaused": [Function],
                          "move": [Function],
                          "onCancel": undefined,
                          "onSubmit": [MockFunction],
                          "pauseValidation": [Function],
                          "pop": [Function],
                          "pristine": true,
                          "push": [Function],
                          "registerField": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "renderForm": [Function],
                          "reset": [Function],
                          "resetFieldState": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "shift": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                          "valid": true,
                        }
                      }
                      input={
                        Object {
                          "name": "component1",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": undefined,
                          "invalid": false,
                          "modified": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "submitting": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                    >
                      <div
                        className="nested-item"
                      >
                        Text field
                      </div>
                    </Component>
                  </Field>
                </ReactFinalForm(Field)>
              </FieldProvider>
            </FieldWrapper>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={false}
          >
            <FieldWrapper
              component={[Function]}
              componentType="select-field"
              formOptions={
                Object {
                  "batch": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "clearOnUnmount": false,
                  "clearedValue": undefined,
                  "concat": [Function],
                  "destroyOnUnregister": false,
                  "focus": [Function],
                  "getFieldState": [Function],
                  "getRegisteredFields": [Function],
                  "getState": [Function],
                  "handleSubmit": [Function],
                  "initialize": [Function],
                  "insert": [Function],
                  "isValidationPaused": [Function],
                  "move": [Function],
                  "onCancel": undefined,
                  "onSubmit": [MockFunction],
                  "pauseValidation": [Function],
                  "pop": [Function],
                  "pristine": true,
                  "push": [Function],
                  "registerField": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "renderForm": [Function],
                  "reset": [Function],
                  "resetFieldState": [Function],
                  "resumeValidation": [Function],
                  "setConfig": [Function],
                  "shift": [Function],
                  "submit": [Function],
                  "subscribe": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                  "valid": true,
                }
              }
              name="secret"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <FieldProvider
                FieldArrayProvider={[Function]}
                FieldProvider={[Function]}
                component={[Function]}
                formOptions={
                  Object {
                    "batch": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "clearOnUnmount": false,
                    "clearedValue": undefined,
                    "concat": [Function],
                    "destroyOnUnregister": false,
                    "focus": [Function],
                    "getFieldState": [Function],
                    "getRegisteredFields": [Function],
                    "getState": [Function],
                    "handleSubmit": [Function],
                    "initialize": [Function],
                    "insert": [Function],
                    "isValidationPaused": [Function],
                    "move": [Function],
                    "onCancel": undefined,
                    "onSubmit": [MockFunction],
                    "pauseValidation": [Function],
                    "pop": [Function],
                    "pristine": true,
                    "push": [Function],
                    "registerField": [Function],
                    "remove": [Function],
                    "removeBatch": [Function],
                    "renderForm": [Function],
                    "reset": [Function],
                    "resetFieldState": [Function],
                    "resumeValidation": [Function],
                    "setConfig": [Function],
                    "shift": [Function],
                    "submit": [Function],
                    "subscribe": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                    "valid": true,
                  }
                }
                name="secret"
                validate={[Function]}
              >
                <ReactFinalForm(Field)
                  FieldArrayProvider={[Function]}
                  FieldProvider={[Function]}
                  formOptions={
                    Object {
                      "batch": [Function],
                      "blur": [Function],
                      "change": [Function],
                      "clearOnUnmount": false,
                      "clearedValue": undefined,
                      "concat": [Function],
                      "destroyOnUnregister": false,
                      "focus": [Function],
                      "getFieldState": [Function],
                      "getRegisteredFields": [Function],
                      "getState": [Function],
                      "handleSubmit": [Function],
                      "initialize": [Function],
                      "insert": [Function],
                      "isValidationPaused": [Function],
                      "move": [Function],
                      "onCancel": undefined,
                      "onSubmit": [MockFunction],
                      "pauseValidation": [Function],
                      "pop": [Function],
                      "pristine": true,
                      "push": [Function],
                      "registerField": [Function],
                      "remove": [Function],
                      "removeBatch": [Function],
                      "renderForm": [Function],
                      "reset": [Function],
                      "resetFieldState": [Function],
                      "resumeValidation": [Function],
                      "setConfig": [Function],
                      "shift": [Function],
                      "submit": [Function],
                      "subscribe": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                      "valid": true,
                    }
                  }
                  name="secret"
                  render={[Function]}
                  validate={[Function]}
                >
                  <Field
                    FieldArrayProvider={[Function]}
                    FieldProvider={[Function]}
                    formOptions={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "clearOnUnmount": false,
                        "clearedValue": undefined,
                        "concat": [Function],
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "handleSubmit": [Function],
                        "initialize": [Function],
                        "insert": [Function],
                        "isValidationPaused": [Function],
                        "move": [Function],
                        "onCancel": undefined,
                        "onSubmit": [MockFunction],
                        "pauseValidation": [Function],
                        "pop": [Function],
                        "pristine": true,
                        "push": [Function],
                        "registerField": [Function],
                        "remove": [Function],
                        "removeBatch": [Function],
                        "renderForm": [Function],
                        "reset": [Function],
                        "resetFieldState": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "shift": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                        "update": [Function],
                        "valid": true,
                      }
                    }
                    format={[Function]}
                    name="secret"
                    parse={[Function]}
                    reactFinalForm={
                      Object {
                        "batch": [Function],
                        "blur": [Function],
                        "change": [Function],
                        "destroyOnUnregister": false,
                        "focus": [Function],
                        "getFieldState": [Function],
                        "getRegisteredFields": [Function],
                        "getState": [Function],
                        "initialize": [Function],
                        "isValidationPaused": [Function],
                        "mutators": Object {
                          "concat": [Function],
                          "insert": [Function],
                          "move": [Function],
                          "pop": [Function],
                          "push": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "shift": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                        },
                        "pauseValidation": [Function],
                        "registerField": [Function],
                        "reset": [Function],
                        "resetFieldState": [Function],
                        "resumeValidation": [Function],
                        "setConfig": [Function],
                        "submit": [Function],
                        "subscribe": [Function],
                      }
                    }
                    render={[Function]}
                    validate={[Function]}
                  >
                    <Component
                      FieldArrayProvider={[Function]}
                      FieldProvider={[Function]}
                      formOptions={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "clearOnUnmount": false,
                          "clearedValue": undefined,
                          "concat": [Function],
                          "destroyOnUnregister": false,
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "handleSubmit": [Function],
                          "initialize": [Function],
                          "insert": [Function],
                          "isValidationPaused": [Function],
                          "move": [Function],
                          "onCancel": undefined,
                          "onSubmit": [MockFunction],
                          "pauseValidation": [Function],
                          "pop": [Function],
                          "pristine": true,
                          "push": [Function],
                          "registerField": [Function],
                          "remove": [Function],
                          "removeBatch": [Function],
                          "renderForm": [Function],
                          "reset": [Function],
                          "resetFieldState": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "shift": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                          "swap": [Function],
                          "unshift": [Function],
                          "update": [Function],
                          "valid": true,
                        }
                      }
                      input={
                        Object {
                          "name": "secret",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": undefined,
                          "invalid": false,
                          "modified": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "submitting": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                    >
                      <div
                        className="nested-item"
                      >
                        Select field
                      </div>
                    </Component>
                  </Field>
                </ReactFinalForm(Field)>
              </FieldProvider>
            </FieldWrapper>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <FormControls
          buttonClassName=""
          buttonOrder={
            Array [
              "submit",
              "reset",
              "cancel",
            ]
          }
          canReset={false}
          canSubmit={false}
          cancelLabel="Cancel"
          handleSubmit={[Function]}
          resetLabel="Reset"
          submitLabel="Submit"
        >
          <ReactFinalForm(FormSpy)>
            <FormSpy
              reactFinalForm={
                Object {
                  "batch": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "destroyOnUnregister": false,
                  "focus": [Function],
                  "getFieldState": [Function],
                  "getRegisteredFields": [Function],
                  "getState": [Function],
                  "initialize": [Function],
                  "isValidationPaused": [Function],
                  "mutators": Object {
                    "concat": [Function],
                    "insert": [Function],
                    "move": [Function],
                    "pop": [Function],
                    "push": [Function],
                    "remove": [Function],
                    "removeBatch": [Function],
                    "shift": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                  },
                  "pauseValidation": [Function],
                  "registerField": [Function],
                  "reset": [Function],
                  "resetFieldState": [Function],
                  "resumeValidation": [Function],
                  "setConfig": [Function],
                  "submit": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Component
                className=""
              >
                <div>
                  <Component
                    key="form-submit"
                    label="Submit"
                    onClick={[Function]}
                    type="submit"
                    variant="primary"
                  >
                    <button
                      onClick={[Function]}
                      type="submit"
                      variant="primary"
                    >
                      Submit
                    </button>
                  </Component>
                </div>
              </Component>
            </FormSpy>
          </ReactFinalForm(FormSpy)>
        </FormControls>
      </form>
    </Component>
  </ReactFinalForm>
</FormRenderer>
`;

exports[`<FormRenderer /> should render hidden field 1`] = `
<FormRenderer
  buttonClassName=""
  buttonsLabels={Object {}}
  clearOnUnmount={false}
  disableSubmit={Array []}
  formFieldsMapper={
    Object {
      "checkbox": [Function],
      "date-picker": [Function],
      "radio": [Function],
      "select-field": [Function],
      "sub-form": [Function],
      "tabs": [Function],
      "text-field": [Function],
      "textarea-field": [Function],
      "time-picker": [Function],
    }
  }
  initialValues={Object {}}
  layoutMapper={
    Object {
      "Button": [Function],
      "ButtonGroup": [Function],
      "Description": [Function],
      "FormWrapper": [Function],
      "Title": [Function],
    }
  }
  onSubmit={[MockFunction]}
  renderFormButtons={[Function]}
  schema={
    Object {
      "fields": Array [
        Object {
          "component": Array [
            "text-field",
          ],
          "label": "Visible",
          "name": "visible",
        },
        Object {
          "component": Array [
            "text-field",
          ],
          "hideField": true,
          "label": "Hidden",
          "name": "hidden",
        },
      ],
    }
  }
  showFormControls={true}
>
  <ReactFinalForm
    decorators={
      Array [
        [Function],
      ]
    }
    initialValues={Object {}}
    mutators={
      Object {
        "concat": [Function],
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeBatch": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
        "valid": true,
      }
    }
  >
    <Component
      onSubmit={[Function]}
    >
      <form>
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={false}
          >
            <FieldWrapper
              component={[Function]}
              componentType={
                Array [
                  "text-field",
                ]
              }
              formOptions={
                Object {
                  "batch": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "clearOnUnmount": false,
                  "clearedValue": undefined,
                  "concat": [Function],
                  "destroyOnUnregister": false,
                  "focus": [Function],
                  "getFieldState": [Function],
                  "getRegisteredFields": [Function],
                  "getState": [Function],
                  "handleSubmit": [Function],
                  "initialize": [Function],
                  "insert": [Function],
                  "isValidationPaused": [Function],
                  "move": [Function],
                  "onCancel": undefined,
                  "onSubmit": [MockFunction],
                  "pauseValidation": [Function],
                  "pop": [Function],
                  "pristine": true,
                  "push": [Function],
                  "registerField": [Function],
                  "remove": [Function],
                  "removeBatch": [Function],
                  "renderForm": [Function],
                  "reset": [Function],
                  "resetFieldState": [Function],
                  "resumeValidation": [Function],
                  "setConfig": [Function],
                  "shift": [Function],
                  "submit": [Function],
                  "subscribe": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                  "valid": true,
                }
              }
              label="Visible"
              name="visible"
              validate={
                Array [
                  undefined,
                ]
              }
            >
              <Component
                FieldProvider={[Function]}
                formOptions={
                  Object {
                    "batch": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "clearOnUnmount": false,
                    "clearedValue": undefined,
                    "concat": [Function],
                    "destroyOnUnregister": false,
                    "focus": [Function],
                    "getFieldState": [Function],
                    "getRegisteredFields": [Function],
                    "getState": [Function],
                    "handleSubmit": [Function],
                    "initialize": [Function],
                    "insert": [Function],
                    "isValidationPaused": [Function],
                    "move": [Function],
                    "onCancel": undefined,
                    "onSubmit": [MockFunction],
                    "pauseValidation": [Function],
                    "pop": [Function],
                    "pristine": true,
                    "push": [Function],
                    "registerField": [Function],
                    "remove": [Function],
                    "removeBatch": [Function],
                    "renderForm": [Function],
                    "reset": [Function],
                    "resetFieldState": [Function],
                    "resumeValidation": [Function],
                    "setConfig": [Function],
                    "shift": [Function],
                    "submit": [Function],
                    "subscribe": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                    "valid": true,
                  }
                }
                label="Visible"
                name="visible"
                validate={[Function]}
              >
                <div
                  className="nested-item"
                >
                  Text field
                </div>
              </Component>
            </FieldWrapper>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <FormConditionWrapper>
          <FormFieldHideWrapper
            hideField={true}
          >
            <div
              hidden={true}
            >
              <FieldWrapper
                component={[Function]}
                componentType={
                  Array [
                    "text-field",
                  ]
                }
                formOptions={
                  Object {
                    "batch": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "clearOnUnmount": false,
                    "clearedValue": undefined,
                    "concat": [Function],
                    "destroyOnUnregister": false,
                    "focus": [Function],
                    "getFieldState": [Function],
                    "getRegisteredFields": [Function],
                    "getState": [Function],
                    "handleSubmit": [Function],
                    "initialize": [Function],
                    "insert": [Function],
                    "isValidationPaused": [Function],
                    "move": [Function],
                    "onCancel": undefined,
                    "onSubmit": [MockFunction],
                    "pauseValidation": [Function],
                    "pop": [Function],
                    "pristine": true,
                    "push": [Function],
                    "registerField": [Function],
                    "remove": [Function],
                    "removeBatch": [Function],
                    "renderForm": [Function],
                    "reset": [Function],
                    "resetFieldState": [Function],
                    "resumeValidation": [Function],
                    "setConfig": [Function],
                    "shift": [Function],
                    "submit": [Function],
                    "subscribe": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                    "valid": true,
                  }
                }
                label="Hidden"
                name="hidden"
                validate={
                  Array [
                    undefined,
                  ]
                }
              >
                <Component
                  FieldProvider={[Function]}
                  formOptions={
                    Object {
                      "batch": [Function],
                      "blur": [Function],
                      "change": [Function],
                      "clearOnUnmount": false,
                      "clearedValue": undefined,
                      "concat": [Function],
                      "destroyOnUnregister": false,
                      "focus": [Function],
                      "getFieldState": [Function],
                      "getRegisteredFields": [Function],
                      "getState": [Function],
                      "handleSubmit": [Function],
                      "initialize": [Function],
                      "insert": [Function],
                      "isValidationPaused": [Function],
                      "move": [Function],
                      "onCancel": undefined,
                      "onSubmit": [MockFunction],
                      "pauseValidation": [Function],
                      "pop": [Function],
                      "pristine": true,
                      "push": [Function],
                      "registerField": [Function],
                      "remove": [Function],
                      "removeBatch": [Function],
                      "renderForm": [Function],
                      "reset": [Function],
                      "resetFieldState": [Function],
                      "resumeValidation": [Function],
                      "setConfig": [Function],
                      "shift": [Function],
                      "submit": [Function],
                      "subscribe": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                      "valid": true,
                    }
                  }
                  label="Hidden"
                  name="hidden"
                  validate={[Function]}
                >
                  <div
                    className="nested-item"
                  >
                    Text field
                  </div>
                </Component>
              </FieldWrapper>
            </div>
          </FormFieldHideWrapper>
        </FormConditionWrapper>
        <FormControls
          FormButtons={[Function]}
          buttonClassName=""
          buttonOrder={
            Array [
              "submit",
              "reset",
              "cancel",
            ]
          }
          canReset={false}
          canSubmit={false}
          cancelLabel="Cancel"
          handleSubmit={[Function]}
          resetLabel="Reset"
          submitLabel="Submit"
        >
          <ReactFinalForm(FormSpy)>
            <FormSpy
              reactFinalForm={
                Object {
                  "batch": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "destroyOnUnregister": false,
                  "focus": [Function],
                  "getFieldState": [Function],
                  "getRegisteredFields": [Function],
                  "getState": [Function],
                  "initialize": [Function],
                  "isValidationPaused": [Function],
                  "mutators": Object {
                    "concat": [Function],
                    "insert": [Function],
                    "move": [Function],
                    "pop": [Function],
                    "push": [Function],
                    "remove": [Function],
                    "removeBatch": [Function],
                    "shift": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                  },
                  "pauseValidation": [Function],
                  "registerField": [Function],
                  "reset": [Function],
                  "resetFieldState": [Function],
                  "resumeValidation": [Function],
                  "setConfig": [Function],
                  "submit": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <FormControls
                batch={[Function]}
                blur={[Function]}
                change={[Function]}
                dirty={false}
                dirtyFields={Object {}}
                dirtyFieldsSinceLastSubmit={Object {}}
                dirtySinceLastSubmit={false}
                errors={Object {}}
                focus={[Function]}
                form={
                  Object {
                    "batch": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "destroyOnUnregister": false,
                    "focus": [Function],
                    "getFieldState": [Function],
                    "getRegisteredFields": [Function],
                    "getState": [Function],
                    "initialize": [Function],
                    "isValidationPaused": [Function],
                    "mutators": Object {
                      "concat": [Function],
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "removeBatch": [Function],
                      "shift": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                      "update": [Function],
                    },
                    "pauseValidation": [Function],
                    "registerField": [Function],
                    "reset": [Function],
                    "resetFieldState": [Function],
                    "resumeValidation": [Function],
                    "setConfig": [Function],
                    "submit": [Function],
                    "subscribe": [Function],
                  }
                }
                hasSubmitErrors={false}
                hasValidationErrors={false}
                initialValues={Object {}}
                initialize={[Function]}
                invalid={false}
                modified={Object {}}
                mutators={
                  Object {
                    "concat": [Function],
                    "insert": [Function],
                    "move": [Function],
                    "pop": [Function],
                    "push": [Function],
                    "remove": [Function],
                    "removeBatch": [Function],
                    "shift": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                    "update": [Function],
                  }
                }
                pristine={true}
                reset={[Function]}
                submitFailed={false}
                submitSucceeded={false}
                submitting={false}
                touched={Object {}}
                valid={true}
                validating={false}
                values={Object {}}
                visited={Object {}}
              >
                <div>
                  <button
                    id="custom-submit-button"
                    onClick={[Function]}
                    type="button"
                  >
                    Handle submit
                  </button>
                </div>
              </FormControls>
            </FormSpy>
          </ReactFinalForm(FormSpy)>
        </FormControls>
      </form>
    </Component>
  </ReactFinalForm>
</FormRenderer>
`;
